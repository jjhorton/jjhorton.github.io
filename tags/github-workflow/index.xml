<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>github workflow on James Horton</title>
        <link>https://jjhorton.co.uk/tags/github-workflow/</link>
        <description>Recent content in github workflow on James Horton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 01 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/github-workflow/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Website Upgrade</title>
        <link>https://jjhorton.co.uk/posts/website-upgrade/</link>
        <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/website-upgrade/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/pelican_website.png" alt="Featured image of post Website Upgrade" /&gt;&lt;p&gt;Every 5 years I seem to upgrade my website, in &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/posts/hello-world/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2012&lt;/a&gt; I upgraded my old static site to a wordpress site, then 5 years later in &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/posts/new_website/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2017&lt;/a&gt; I changed to a static HTML website generated by Pelican. This statically generated website was hosted on github pages, this is a setup I liked, with all my website files stored in git and then deployed automatically with github workflows when I merged a pull request with a new post in it.&lt;/p&gt;
&lt;p&gt;My reason for upgrading was that I wanted to update my theme, and I couldn&amp;rsquo;t find anything I liked in the pelican ecosystem, as a result I decided to go with &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;. This is a static site generator that works well with github pages, and functions with my current workflow of generating my git hosted on github pages.&lt;/p&gt;
&lt;p&gt;My workflow is based around posts written in markdown files stored in a github repository. The migration from Pelican to markdown was reasonably simple, although it required manually updating the headers in my markdown posts, and slowly upgrading all the links to match the new structure. Much as before with my old Pelican site the hugo markdown files are stored in one private Git repo, and the static site is deployed to a second git repo, which is a submodule in the output folder. This automatic deployment is handled by a github actions workflow, the workflow file is below.&lt;/p&gt;
&lt;p&gt;The start of the github workflow confirms that the workflow is automatically run when there is a push to the master branch, is allows me to make small changes (such as the inevitable spelling errors) directly to master, and then major changes in pull requests, with them all being deployed automatically to the website.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;name: Build Site

# Controls when the action will run.
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The workflow then needs to setup all the required git repository, and tools for building the website. The first 3 lines are all about getting the data from the git repository and the required SSH key for adding the updated site, we then print some debug info to the console. The final step is to install Hugo itself, for this we use the pre-made github action, and select the extended version, as it has features needed for the template, we also select the latest version as it is good to be up to date.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Checkout submodule
      run: |
        cd output
        git checkout master
        cd ..
    - name: Debug info
      run: |
        echo &amp;#34;REPO: $GITHUB_REPOSITORY&amp;#34;
        echo &amp;#34;ACTOR: $GITHUB_ACTOR&amp;#34;
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: &amp;#39;latest&amp;#39;
        extended: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With all the tools and files installed we can now complete the main event, building the site is completed with a single command &lt;code&gt;hugo -d output&lt;/code&gt; which overwrites the existing site in the github pages directory, that we checked out earlier, the following commands then setup the git user so that a commit can be made from the repo, committing and pushing the latest version of the site up to github page ready for uses to see when they open up my website within a few seconds.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
    - name: Build and deploy site
      run: |
        echo &amp;#39;=================== Build site ===================&amp;#39;
        hugo -d output
        echo &amp;#39;=================== Publish to GitHub Pages ===================&amp;#39;
        cd output
        git config user.name &amp;#34;${GITHUB_ACTOR}&amp;#34;
        git config user.email &amp;#34;${GITHUB_ACTOR}@users.noreply.github.com&amp;#34;
        git add .
        echo -n &amp;#39;Files to Commit:&amp;#39; &amp;amp;&amp;amp; ls -l | wc -l
        timestamp=$(date +%s%3N)
        git commit -m &amp;#34;[ci] Automated deployment to GitHub Pages on $timestamp&amp;#34;
        git push --force
        cd ../
        echo &amp;#39;=================== Done  ===================&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that the latest version of my website is deployed everytime I add a new update.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
