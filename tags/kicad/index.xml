<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Kicad on James Horton</title>
        <link>https://jjhorton.co.uk/tags/kicad/</link>
        <description>Recent content in Kicad on James Horton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Fri, 20 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/kicad/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PMod LED Array using with an RP2040 </title>
        <link>https://jjhorton.co.uk/posts/led_array/</link>
        <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/led_array/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/LED_Array_RP2040.jpg" alt="Featured image of post PMod LED Array using with an RP2040 " /&gt;&lt;p&gt;The PMod LED array was inspired by a post I spotted on twitter a long time ago, while i have used &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/ir_hub75/&#34; &gt;big colour displays&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/sevensegmentdisp/&#34; &gt;7 segment displays&lt;/a&gt; it is always nice to make something relativilily simple. I this case an array of 128 LEDs, arranged to make a simple scrolling display.&lt;/p&gt;
&lt;p&gt;Like all my boards, the schematic and PCB design was created using &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;KiCAD&lt;/a&gt;, using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/PMod/blob/master/PMod_LEDArray/Docs/TM1640.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GN1640&lt;/a&gt; chip which I purchased from LSCS a while back when building my 7 segement displays. The advantage of reusing this chip is that it allows me to make use of the code that I have already writen and used to control these displays.&lt;/p&gt;
&lt;p&gt;Hand assembling these boards was relativity simple, although time consuming, takinga long time to fit all those LED&amp;rsquo;s one at a time. The first version of the board also had a footprint error for the GN1640, which while a simple fix was fustrating to discover after placing all those LED&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/LED_Array_Board_Only.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Assembled LED Array PMod Board&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With the boards assembled the next task is the software, thankfully using the same parts of in the 7 segement display saved a lot of the hand work here as the commands for controlling the array all wrapped up in a class that is designed to run on the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod&lt;/a&gt; Boards. For this example I&amp;rsquo;m using the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_mini_pmod/&#34; &gt;PMod Mini Board&lt;/a&gt;, which has a single PMod Connector and is ideal for testing this board.&lt;/p&gt;
&lt;p&gt;For building up the scroling example I make use of the C++ object I created for the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/sevensegmentdisp/&#34; &gt;7 segment displays&lt;/a&gt; which provides the setup functionality as well as the ability to set the display using the &lt;code&gt;txData&lt;/code&gt; function, but the other 7 Segement specific functions aren&amp;rsquo;t used.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MyLedDisp
{
	private:
		uint8_t pin_clk;
		uint8_t pin_data;
  public:
    MyLedDisp(int data_pin , int clk_pin);

		void enable();
		void txData(uint8_t pos, uint8_t data);
		void setDisplay(uint8_t data[16]);
		void setValue(double value, uint8_t decimal);
		void setValue2(double value1, double value2, uint8_t decimal);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because i&amp;rsquo;m using the txData function to directly drive the LED values, I need a library of characters that can be displayed, for this I created a quick library of characters, with 8 bit values for each line of the display then a way of looking up the character created.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Charcater E
character_value[4] = &amp;#39;E&amp;#39;;
character_len[4] = 3;
character_store[4][0] = 0b11111111;
character_store[4][1] = 0b10010001;
character_store[4][2] = 0b10010001;
character_store[4][3] = 0b00000000;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this library of characters and associtated LED positions, I can specify a string which in the example here is &lt;code&gt;MERRY CHRISTMAS&lt;/code&gt; and work though the characters to fill up our display buffer &lt;code&gt;display_buff&lt;/code&gt; that has all these characters and spaces assigned to them.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int counter = 15;

char my_str[20] = &amp;#34;MERRY CHRISTMAS&amp;#34;;

for(int my_char=0; my_char&amp;lt;15; my_char++){
    for(int i=0; i&amp;lt;26; i++){
    	if (my_str[my_char] == character_value[i]){
	    	for(int j=0; j&amp;lt;character_len[i]; j++){
		    	display_buff[counter] = character_store[i][j];
    			counter++;
	    	}
	    	display_buff[counter] = 0;
	    	counter++;
    	}
    }
	if (32 == my_str[my_char]){
		 counter = counter +4;
	 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the character all turned into one giant array int8&amp;rsquo;s which we can then send them onto the display. By moving our reference point every 100ms we can create the appearance of the message sloly scrolling across the disaply, with a blank period at both the start and end we can then wrap round to the start of the message here as well.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;while(1){

	uint8_t my_disp[16];

	for(uint8_t pos = 0; pos&amp;lt;16; pos++){
		my_disp[pos] = 0b00000000;
	}

	for(uint8_t main_pos = 0; main_pos&amp;lt;(total_len); main_pos++){

		for(uint8_t pos = 0; pos&amp;lt;16; pos++){
			my_disp[pos] = display_buff[main_pos+pos];
		}
		Display2.setDisplay(my_disp);
		sleep_ms(100);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a scrolling message on the display, which can be specified at compile time. This example shows just one way in which a display line this can be used, but it also allows a more graphical display than the 7 Segment Displays that I have perviously used, allowing for more creataivity in the use of these displays.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RP2040 Mini PMod</title>
        <link>https://jjhorton.co.uk/posts/rp2040_mini_pmod/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/rp2040_mini_pmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RP2040_mini_complete.jpg" alt="Featured image of post RP2040 Mini PMod" /&gt;&lt;p&gt;My pervious &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod board&lt;/a&gt; included 3 PMod Connectors and a USB-C, this has been a great little board for development and testing but there are a couple of issues with this board. The first problem is the size, I would prefer something a bit smaller, with only a single PMod connector. The second is the lack of some additional storage, for logging data to such as GPS positions, and then finally is the cost with the expensive USB-C connector used on my original design being a particular problem, costing more than the RP2040 Micro Controller.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Mini_SdCard_Schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SD Card KiCAD Schematic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The micro SD card slot is mainly for projects where being able to log data is useful, rather than sending it to a connected PC to be stored on there. I have found this could be useful for a number of of the PMod boards I have, where currently I would just send data over onto a PC to save the data, just logging the data locally provides some better options. I did look at making myself a few little PMod breakout boards, but I soon realized that this wouldn&amp;rsquo;t work well with the RP2040 boards I use them with a lot at the moment, so hence why this board the Micro SD directly on the back of the board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Mini_USB_Schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;USB-C connector&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;On my &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod Board&lt;/a&gt; and several other boards I have made with a USB connection I have used a &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.co.uk/ProductDetail/Amphenol-Commercial-Products/12401610E42A?qs=EgDjlb95zqAWvChv41w5lg%3D%3D&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;USB-C Connector&lt;/a&gt;, USB-C is great,  even though I am only making use of the USB 2.0 functionality, and none of the high speed or high power options, using USB-C has proved a reliable way to connector my development boards up to a PC or Power Supply. The USB-C is now often the only port available on my laptops and the option reduce the number of adapters and cables I need to carry it is always a great reason to standardize the boards I personally make around these.&lt;/p&gt;
&lt;p&gt;The main disadvantage with USB-C is the cost of the connectors, on the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod Board&lt;/a&gt; the USB-C connector costs as much as the RP2040 Micro Controller, making it at the time i made my second batch of boards, the most expensive part on the board. So as a way of reducing this cost, I looked at alternatives to using these expensive connector, and one of the best ones I came across was using the &lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PCB as the connector&lt;/a&gt;, this removes the part and allows the PCB to do the task in its place, although this isn&amp;rsquo;t without its problems.&lt;/p&gt;
&lt;p&gt;While I could have spent some time creating a footprint for this part I was able to use the KIcad footprint that someone else had already created, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KiCAD footprint&lt;/a&gt; could just be imported and used in place of the old footprint that I previously used. As these are board edge connectors, it is important to consider placement of the connector and allowing space for the cable around the connector.&lt;/p&gt;
&lt;p&gt;As the PCB and it&amp;rsquo;s pads are making up the connector and it will need to slot directly into USB-C cable, we need to considered the PCB thickness, based on the recommendations of a hackaday &lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;post&lt;/a&gt;, it appeared that using 0.8mm would be fine from &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt; even though the size is a little large with the tolerances that USB-C cables allow for, it mates with a cable without any issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_barepcb.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Prototyping 3D Printing models to test out the functional elements of the design, and comparing with the actual PCB&amp;rsquo;s. Using the exported models from the kicad and using Cura and my Ender3 3D printer to produce models for testing that the USB connector would be able to fit into the connector, confirming if the PCB thickness was suitable and if I had allowed enough space for most the cables I have at home to be able to fit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_3D_Model.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;3D Printed testing prototype&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The PCB&amp;rsquo;s can be assembled individually or in complete panels, but generally I work on complete panels, these boards use many common components on the larger RP2040 PMod board. While even the most simple design changes can give me problems sometimes, as a respin was required to correct an error with the RGB LED&amp;rsquo;s, that I had wired the wrong way round.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_assemble.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Assembling the PCBs&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The PCB files are produced automatically using an &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod/blob/master/.github/workflows/RP2040_Mini_PMod_Kicad.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github action&lt;/a&gt; which I write up in my post about &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/kicad-github-panels/&#34; &gt;Kicad PCB Panels&lt;/a&gt; including adding the githash to the board help to keep track of the versions of the board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The panels of PCBs generated using github actions&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I now have a collection of RP2040 board, all with the same Micro Controller and PMod connector. The mini model is much smaller, which still allowing plenty of compatibility with the standard PMod modules. I hoping the addition SD Card on the back will allow me to play with a few more logging  type examples, as well as make some more practical examples with the &lt;a class=&#34;link&#34; href=&#34;InfraredSensorPMod.md&#34; &gt;Thermal Camera&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;gps_pmod_board.md&#34; &gt;PMod GPS Board&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Collection.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The RP2040 PMod (Left), Pico PMod (Center), and RP2040 Mini PMod (Right) &#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Useful Links and references that I found while creating these boards are in the table below:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Reference&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Link&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;R1&lt;/td&gt;
          &lt;td&gt;flexible PCB example&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/settinger/USB-C_PCB_experiments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settinger/USB-C_PCB_experiments&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R2&lt;/td&gt;
          &lt;td&gt;usb type c on pcb&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R3&lt;/td&gt;
          &lt;td&gt;with repo:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/settinger/USB-C_PCB_experiments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settinger/USB-C_PCB_experiments&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R4&lt;/td&gt;
          &lt;td&gt;different types:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/28516-business-card-gamepad/log/72175-pcb-connector-testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackaday.io/project/28516-business-card-gamepad/log/72175-pcb-connector-testing&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R5&lt;/td&gt;
          &lt;td&gt;project source of the connector used:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/wiki/PCBA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/joric/nrfmicro/wiki/PCBA&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R6&lt;/td&gt;
          &lt;td&gt;location of the files from github:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>Automatically panellization of Kicad PCB&#39;s with github Actions</title>
        <link>https://jjhorton.co.uk/posts/kicad-github-panels/</link>
        <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/kicad-github-panels/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg" alt="Featured image of post Automatically panellization of Kicad PCB&#39;s with github Actions" /&gt;&lt;p&gt;As part of my PCB design workflow I use &lt;a class=&#34;link&#34; href=&#34;https://github.com/INTI-CMNB/KiBot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kibot&lt;/a&gt; to process my PCB&amp;rsquo;s and generate the Gerber files I need for PCB manufacture, but sometimes to make better use of the of the PCB size I want to create panels that are the minimum size I need to pay for with JLCPCB who I frequently use to make these boards. Another problem I have found when doing respins of boards that have problems or errors, is keeping track of different versions, while i have tried in the past to keep up with a version on the board this hasn&amp;rsquo;t always worked out, so for these boards I wanted to add reference to the git version used to generate the files.&lt;/p&gt;
&lt;p&gt;For generating the Git short sha, from within the github action, we create a varrible to store the current github short sha, which checks if &lt;code&gt;github.event.pull_request.head.sha&lt;/code&gt; is avalible and use it, if it is not avalible use &lt;code&gt;git rev-parse --short HEAD&lt;/code&gt; to populate the variable &lt;code&gt;sha_short&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    # Do a string replacement in the PCB file to set the git HASH
    - name: Set outputs
      id: vars
      run: |
        if [${{ github.event.pull_request.head.sha }} == &amp;#34;&amp;#34;]; then
          echo &amp;#34;::set-output name=sha_short::$(git rev-parse --short HEAD)&amp;#34;
        else
          echo &amp;#34;::set-output name=sha_short::$(git rev-parse --short ${{ github.event.pull_request.head.sha }})&amp;#34;
        fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I need to create a reference to replace in the Kicad PCB, the KICAD pcb file is essentially a text file so I can take some text that is otherwise not in the file, and for my PCB i am using &lt;code&gt;%%GITHASH%%&lt;/code&gt;. This is placed on the back silkscreen of the PCB, where I want the short SHA to be placed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_pcb_bottom.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Using this variable and the &lt;code&gt;%%GITHASH%%&lt;/code&gt; reference on the board we use a find and replace operation in the github action to complete the replacement.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    - name: Set PCB version
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: &amp;#34;Hardware/RP2040_Mini_PMod/RP2040_Mini_PMod.kicad_pcb&amp;#34;
        find: &amp;#34;%%GITHASH%%&amp;#34;
        replace: ${{ steps.vars.outputs.sha_short }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the Github SHA replacement completed on the board, the next task is to create the panels of the board using &lt;code&gt;kikit&lt;/code&gt;, I have used this a lot in the past, but by using within the github action we can ensure that the same board is always generated. As part of this github action, I also take the opportunity to ensure the &lt;code&gt;JLC&lt;/code&gt; part number is added added on the panels frame as well as other automatically generated information such as the same SHA Hash and the date that the PCb was generated.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    - name: Make a panel 
      run: |
        kikit panelize \
          --layout &amp;#39;grid; rows: 3; cols: 2; space: 2mm&amp;#39; \
          --tabs &amp;#39;fixed; width: 5mm; vcount: 2; hcount: 0&amp;#39; \
          --cuts &amp;#39;mousebites; drill: 0.5mm; spacing: 1mm; offset: -0.2mm; prolong: 0.7mm&amp;#39; \
          --framing &amp;#39;railstb; width: 5mm; space: 3mm;&amp;#39; \
          --post &amp;#39;millradius: 1mm&amp;#39; \
          --text &amp;#39;simple; text: JLCJLCJLCJLC; anchor: mt; voffset: 2.5mm; hjustify: center; vjustify: center;&amp;#39; \
          --text2 &amp;#39;simple; text: Created {date}    Git Version ${{ steps.vars.outputs.sha_short }}; anchor: mb; voffset: -2.5mm; hjustify: center; vjustify: center;&amp;#39; \
          Hardware/RP2040_Mini_PMod/RP2040_Mini_PMod.kicad_pcb Hardware/RP2040_Mini_PMod/panel.kicad_pcb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The complete github action for generating the PCB&amp;rsquo;s can be found &lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/jjhorton/Pico_Pmod/master/.github/workflows/RP2040_Mini_PMod_Kicad.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; as part of the RP2040 mini PMod I have been building.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Completed PCB panels with github SHA and Date generated&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
