<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FPGA on James Horton</title>
    <link>https://jjhorton.co.uk/tags/fpga/</link>
    <description>Recent content in FPGA on James Horton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 01 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/fpga/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous Integration for Firmware testing using Verilator</title>
      <link>https://jjhorton.co.uk/posts/firmware-testing/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/firmware-testing/</guid>
      <description>I was looking to build a simple flashing LED example using my IceBreaker FPGA Board, for this I wanted to build on CI tools I set up before, and add some more useful testing to my setup. First of all lets look at what we are aiming to build, the PMOD board has 8 LED&amp;rsquo;s each connected to a single pin, setting the IO pin high turns the LED on. With one LED on at a time, cycling though all the LED&amp;rsquo;s one at a time at a speed which is easily slow enough to see.</description>
    </item>
    
    <item>
      <title>Infrared Sensors and Neopixel screen</title>
      <link>https://jjhorton.co.uk/posts/infraredsensorneopixel/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/infraredsensorneopixel/</guid>
      <description>After perviously building a PMod Infrared Sensor board, that was perviously streaming data over the serial link from the RP2040 PMod board to a PC which was using Python to display the data. The next step is to look at using a screen to display the data from the infrared Sensor.
The screen that I looked to use is a custom board based on using the Neopixel LED&amp;rsquo;s that I have previously used with the RP2040 board, this allows a simple way to display the data, the screen which is also a 8x8 grid the same resolution as the sensor.</description>
    </item>
    
    <item>
      <title>RP2040 PMod PCB</title>
      <link>https://jjhorton.co.uk/posts/rp2040_pmod/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/rp2040_pmod/</guid>
      <description>Having perviously built myself a Pico PMod Board around the Raspberry Pi Pico, I wanted to take this to the next level, and build myself a few boards from scratch. So once the orders went live for the RP2040 microcontroller a few months ago, I ordered some, and then did nothing with them for a while.
 
Like many people, I seem to end up with more ideas than time and it took me a little while to get around to this one.</description>
    </item>
    
    <item>
      <title>PMod 8x8 Infrared Sensor</title>
      <link>https://jjhorton.co.uk/posts/infraredsensorpmod/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/infraredsensorpmod/</guid>
      <description>Building a PMod Based board with an 8x8 Infrared Sensor</description>
    </item>
    
    <item>
      <title>Pico PMod breakout PCB</title>
      <link>https://jjhorton.co.uk/posts/picopmod/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/picopmod/</guid>
      <description>Pico on a Breadboard 
After picking up a few Raspberry Pi Pico&amp;rsquo;s, I was looking for a use for them and I decided to hook up a few of the PMod boards I have from playing around with FPGA. This PMod boards all use the same pinout, of 12 pins, which consists of 8 I/O pins, two 3.3V, and two GND connections on a two row 2.54mm header. I have a few kicking around from a more complex ones, down to a simple 8 DIP switch and a 7 segment display.</description>
    </item>
    
    <item>
      <title>Continuous Integration for Firmware with Github Actions</title>
      <link>https://jjhorton.co.uk/posts/firmwareci/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/firmwareci/</guid>
      <description>For a couple of months I&amp;rsquo;ve been slowly building up a little project using some Development boards that include an FPGA, typically once i&amp;rsquo;ve finished editing my design I run all my simulations, tests and then check I can still build the firmware. While running these manually before each commit isn&amp;rsquo;t typically much an issue, I wanted to automate this.
The project i&amp;rsquo;m working on uses a ColorLite i5 FPGA board, this with it Lattice ECP5 FPGA allows me to use a set of Open source tools to test and build my FPGA images.</description>
    </item>
    
  </channel>
</rss>
