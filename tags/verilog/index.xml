<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verilog on James Horton</title>
    <link>https://jjhorton.co.uk/tags/verilog/</link>
    <description>Recent content in Verilog on James Horton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Fri, 01 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/verilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started with Ice Sugar Pro </title>
      <link>https://jjhorton.co.uk/posts/icesugarpro/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/icesugarpro/</guid>
      <description>Having previously purchased a several FPGA development boards, this is the latest one for working with both Yosys and Next-pnr, an open source FPGA tool chain. I have brought 2 of these other boards which are both based around the color light modules, these boards are avalible as both the Lattice ECP5 FPGA Colorlight i5 Development Board and Lattice ECP5 FPGA Colorlight i9 Development Board. They include a breakout board that allows you to connect PMod Modules, HDMI (Which i&amp;rsquo;ve never used) and a USB-C port that allows the connection of a computer to do the programming and serial connections.</description>
    </item>
    
    <item>
      <title>Controlling Neopixels with iceBreaker FPGA </title>
      <link>https://jjhorton.co.uk/posts/neopixelfirmware/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/neopixelfirmware/</guid>
      <description>Having perviously got my Neopixel PCB working with my RP2040 Board, i&amp;rsquo;ve be wanting to spend some time building up a FPGA example, that has some of the same functionality. For this I wanted to build an example in Verilog that could be deployed to my icebreaker FPGA devboard, with its ice40 FPGA which as 5K LUTs is a great match for this task with it serial over USB link and PMod Connectors.</description>
    </item>
    
    <item>
      <title>Adding FPGA build stats to Github Pull requests</title>
      <link>https://jjhorton.co.uk/posts/fpga-build-stats/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/fpga-build-stats/</guid>
      <description>The pervious post on building the LED example is Firmware Testing and aims to add the building of the FPGA for the iceBreaker FPGA board. The FPGA image will be built using the github actions workflow that is similar to that which was used in my post but with the addition of adding some detailed comments in the pull requests and using the Lattice ice40 part in place of the Lattice ECP5.</description>
    </item>
    
    <item>
      <title>Continuous Integration for Firmware testing using Verilator</title>
      <link>https://jjhorton.co.uk/posts/firmware-testing/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jjhorton.co.uk/posts/firmware-testing/</guid>
      <description>I was looking to build a simple flashing LED example using my IceBreaker FPGA Board, for this I wanted to build on CI tools I set up before, and add some more useful testing to my setup. First of all lets look at what we are aiming to build, the PMOD board has 8 LED&amp;rsquo;s each connected to a single pin, setting the IO pin high turns the LED on. With one LED on at a time, cycling though all the LED&amp;rsquo;s one at a time at a speed which is easily slow enough to see.</description>
    </item>
    
  </channel>
</rss>
