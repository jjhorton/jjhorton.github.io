<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Raspberry Pi on James Horton</title>
        <link>https://jjhorton.co.uk/tags/raspberry-pi/</link>
        <description>Recent content in Raspberry Pi on James Horton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Thu, 02 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Pi Hut Let in Glow Advent Calendar</title>
        <link>https://jjhorton.co.uk/posts/2024adventpihut/</link>
        <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/2024adventpihut/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/2024Advent_Day02.jpg" alt="Featured image of post Pi Hut Let in Glow Advent Calendar" /&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The Pi Hut&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/products/maker-advent-calendar-let-it-glow-inc-raspberry-pi-pico-h&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Let it Glow Advent Calendar&lt;/a&gt; I picked up back in 2023 never got built the year that I purchased it, but this year I set myself the goal of completing it. Each of the 12 days there are little boxes contains a few components and a companion website where you will find the instructions on how to get it all built.&lt;/p&gt;
&lt;p&gt;The building process starts with getting the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&lt;/a&gt; all setup, and then works though a full set of instructions including varrity of buttons, LED&amp;rsquo;s, RGB Control and a simple LCD. While these little projects are not challenging for me, they were a great excuse to have a play around with &lt;a class=&#34;link&#34; href=&#34;https://micropython.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MicroPython&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://thonny.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thorny&lt;/a&gt; which I hadn&amp;rsquo;t used before.&lt;/p&gt;
&lt;p&gt;I added my code to &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/PiHutAdventCalendar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github&lt;/a&gt; as I worked through and took daily pictures, as I way to track my progress, which although it took me past christmas to complete, it was all done by New Year&amp;rsquo;s Eve (Just!)&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;2024&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day01.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day02.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day03.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-advent-calendar-day-1-lets-get-started&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 1&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-2-lighting-leds&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 2&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-3-incredible-inputs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 3&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day04.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day05.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day06.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-4-brilliant-bar-graphs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 4&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-5-switch-the-dip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 5&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-6-see-the-rgb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 6&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day07.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day08.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day09.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-7-time-to-slide&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 7&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-8-rainbow-ring&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 8&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-9-ice-cold-coding&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 9&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day10.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day11.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2024Advent_Day12.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-10-ultra-blinky&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 10&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-11-merry-membrane&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 11&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/blogs/raspberry-pi-tutorials/let-it-glow-maker-advent-calendar-day-12-dazzling-displays&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Day 12&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>RP2040 Mini PMod</title>
        <link>https://jjhorton.co.uk/posts/rp2040_mini_pmod/</link>
        <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/rp2040_mini_pmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RP2040_mini_complete.jpg" alt="Featured image of post RP2040 Mini PMod" /&gt;&lt;p&gt;My pervious &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod board&lt;/a&gt; included 3 PMod Connectors and a USB-C, this has been a great little board for development and testing but there are a couple of issues with this board. The first problem is the size, I would prefer something a bit smaller, with only a single PMod connector. The second is the lack of some additional storage, for logging data to such as GPS positions, and then finally is the cost with the expensive USB-C connector used on my original design being a particular problem, costing more than the RP2040 Micro Controller.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Mini_SdCard_Schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SD Card KiCAD Schematic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The micro SD card slot is mainly for projects where being able to log data is useful, rather than sending it to a connected PC to be stored on there. I have found this could be useful for a number of of the PMod boards I have, where currently I would just send data over onto a PC to save the data, just logging the data locally provides some better options. I did look at making myself a few little PMod breakout boards, but I soon realized that this wouldn&amp;rsquo;t work well with the RP2040 boards I use them with a lot at the moment, so hence why this board the Micro SD directly on the back of the board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Mini_USB_Schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;USB-C connector&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;On my &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod Board&lt;/a&gt; and several other boards I have made with a USB connection I have used a &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.co.uk/ProductDetail/Amphenol-Commercial-Products/12401610E42A?qs=EgDjlb95zqAWvChv41w5lg%3D%3D&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;USB-C Connector&lt;/a&gt;, USB-C is great,  even though I am only making use of the USB 2.0 functionality, and none of the high speed or high power options, using USB-C has proved a reliable way to connector my development boards up to a PC or Power Supply. The USB-C is now often the only port available on my laptops and the option reduce the number of adapters and cables I need to carry it is always a great reason to standardize the boards I personally make around these.&lt;/p&gt;
&lt;p&gt;The main disadvantage with USB-C is the cost of the connectors, on the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 PMod Board&lt;/a&gt; the USB-C connector costs as much as the RP2040 Micro Controller, making it at the time i made my second batch of boards, the most expensive part on the board. So as a way of reducing this cost, I looked at alternatives to using these expensive connector, and one of the best ones I came across was using the &lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PCB as the connector&lt;/a&gt;, this removes the part and allows the PCB to do the task in its place, although this isn&amp;rsquo;t without its problems.&lt;/p&gt;
&lt;p&gt;While I could have spent some time creating a footprint for this part I was able to use the KIcad footprint that someone else had already created, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KiCAD footprint&lt;/a&gt; could just be imported and used in place of the old footprint that I previously used. As these are board edge connectors, it is important to consider placement of the connector and allowing space for the cable around the connector.&lt;/p&gt;
&lt;p&gt;As the PCB and it&amp;rsquo;s pads are making up the connector and it will need to slot directly into USB-C cable, we need to considered the PCB thickness, based on the recommendations of a hackaday &lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;post&lt;/a&gt;, it appeared that using 0.8mm would be fine from &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt; even though the size is a little large with the tolerances that USB-C cables allow for, it mates with a cable without any issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_barepcb.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Prototyping 3D Printing models to test out the functional elements of the design, and comparing with the actual PCB&amp;rsquo;s. Using the exported models from the kicad and using Cura and my Ender3 3D printer to produce models for testing that the USB connector would be able to fit into the connector, confirming if the PCB thickness was suitable and if I had allowed enough space for most the cables I have at home to be able to fit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_3D_Model.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;3D Printed testing prototype&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The PCB&amp;rsquo;s can be assembled individually or in complete panels, but generally I work on complete panels, these boards use many common components on the larger RP2040 PMod board. While even the most simple design changes can give me problems sometimes, as a respin was required to correct an error with the RGB LED&amp;rsquo;s, that I had wired the wrong way round.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_assemble.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Assembling the PCB’s&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The PCB files are produced automatically using an &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod/blob/master/.github/workflows/RP2040_Mini_PMod_Kicad.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github action&lt;/a&gt; which I write up in my post about &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/kicad-github-panels/&#34; &gt;Kicad PCB Panels&lt;/a&gt; including adding the githash to the board help to keep track of the versions of the board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The panels of PCB’s generated using github actions&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I now have a collection of RP2040 board, all with the same Micro Controller and PMod connector. The mini model is much smaller, which still allowing plenty of compatibility with the standard PMod modules. I hoping the addition SD Card on the back will allow me to play with a few more logging  type examples, as well as make some more practical examples with the &lt;a class=&#34;link&#34; href=&#34;InfraredSensorPMod.md&#34; &gt;Thermal Camera&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;gps_pmod_board.md&#34; &gt;PMod GPS Board&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_Collection.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The RP2040 PMod (Left), Pico PMod (Center), and RP2040 Mini PMod (Right) &#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Useful Links and references that I found while creating these boards are in the table below:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Reference&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Link&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;R1&lt;/td&gt;
          &lt;td&gt;flexible PCB example&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/settinger/USB-C_PCB_experiments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settinger/USB-C_PCB_experiments&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R2&lt;/td&gt;
          &lt;td&gt;usb type c on pcb&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackaday.io/project/171381-fluff-m0/log/178674-version-13-and-usb-type-c&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R3&lt;/td&gt;
          &lt;td&gt;with repo:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/settinger/USB-C_PCB_experiments&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settinger/USB-C_PCB_experiments&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R4&lt;/td&gt;
          &lt;td&gt;different types:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/28516-business-card-gamepad/log/72175-pcb-connector-testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackaday.io/project/28516-business-card-gamepad/log/72175-pcb-connector-testing&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R5&lt;/td&gt;
          &lt;td&gt;project source of the connector used:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/wiki/PCBA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/joric/nrfmicro/wiki/PCBA&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;R6&lt;/td&gt;
          &lt;td&gt;location of the files from github:&lt;/td&gt;
          &lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/joric/nrfmicro/tree/devel-1.4-pcb-connector/hardware/nrfmicro.pretty&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>Automatically panellization of Kicad PCB&#39;s with github Actions</title>
        <link>https://jjhorton.co.uk/posts/kicad-github-panels/</link>
        <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/kicad-github-panels/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg" alt="Featured image of post Automatically panellization of Kicad PCB&#39;s with github Actions" /&gt;&lt;p&gt;As part of my PCB design workflow I use &lt;a class=&#34;link&#34; href=&#34;https://github.com/INTI-CMNB/KiBot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kibot&lt;/a&gt; to process my PCB&amp;rsquo;s and generate the Gerber files I need for PCB manufacture, but sometimes to make better use of the of the PCB size I want to create panels that are the minimum size I need to pay for with JLCPCB who I frequently use to make these boards. Another problem I have found when doing respins of boards that have problems or errors, is keeping track of different versions, while i have tried in the past to keep up with a version on the board this hasn&amp;rsquo;t always worked out, so for these boards I wanted to add reference to the git version used to generate the files.&lt;/p&gt;
&lt;p&gt;For generating the Git short sha, from within the github action, we create a varrible to store the current github short sha, which checks if &lt;code&gt;github.event.pull_request.head.sha&lt;/code&gt; is avalible and use it, if it is not avalible use &lt;code&gt;git rev-parse --short HEAD&lt;/code&gt; to populate the variable &lt;code&gt;sha_short&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    # Do a string replacement in the PCB file to set the git HASH
    - name: Set outputs
      id: vars
      run: |
        if [${{ github.event.pull_request.head.sha }} == &amp;#34;&amp;#34;]; then
          echo &amp;#34;::set-output name=sha_short::$(git rev-parse --short HEAD)&amp;#34;
        else
          echo &amp;#34;::set-output name=sha_short::$(git rev-parse --short ${{ github.event.pull_request.head.sha }})&amp;#34;
        fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I need to create a reference to replace in the Kicad PCB, the KICAD pcb file is essentially a text file so I can take some text that is otherwise not in the file, and for my PCB i am using &lt;code&gt;%%GITHASH%%&lt;/code&gt;. This is placed on the back silkscreen of the PCB, where I want the short SHA to be placed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_mini_pcb_bottom.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Using this variable and the &lt;code&gt;%%GITHASH%%&lt;/code&gt; reference on the board we use a find and replace operation in the github action to complete the replacement.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    - name: Set PCB version
      uses: jacobtomlinson/gha-find-replace@master
      with:
        include: &amp;#34;Hardware/RP2040_Mini_PMod/RP2040_Mini_PMod.kicad_pcb&amp;#34;
        find: &amp;#34;%%GITHASH%%&amp;#34;
        replace: ${{ steps.vars.outputs.sha_short }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the Github SHA replacement completed on the board, the next task is to create the panels of the board using &lt;code&gt;kikit&lt;/code&gt;, I have used this a lot in the past, but by using within the github action we can ensure that the same board is always generated. As part of this github action, I also take the opportunity to ensure the &lt;code&gt;JLC&lt;/code&gt; part number is added added on the panels frame as well as other automatically generated information such as the same SHA Hash and the date that the PCb was generated.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    - name: Make a panel 
      run: |
        kikit panelize \
          --layout &amp;#39;grid; rows: 3; cols: 2; space: 2mm&amp;#39; \
          --tabs &amp;#39;fixed; width: 5mm; vcount: 2; hcount: 0&amp;#39; \
          --cuts &amp;#39;mousebites; drill: 0.5mm; spacing: 1mm; offset: -0.2mm; prolong: 0.7mm&amp;#39; \
          --framing &amp;#39;railstb; width: 5mm; space: 3mm;&amp;#39; \
          --post &amp;#39;millradius: 1mm&amp;#39; \
          --text &amp;#39;simple; text: JLCJLCJLCJLC; anchor: mt; voffset: 2.5mm; hjustify: center; vjustify: center;&amp;#39; \
          --text2 &amp;#39;simple; text: Created {date}    Git Version ${{ steps.vars.outputs.sha_short }}; anchor: mb; voffset: -2.5mm; hjustify: center; vjustify: center;&amp;#39; \
          Hardware/RP2040_Mini_PMod/RP2040_Mini_PMod.kicad_pcb Hardware/RP2040_Mini_PMod/panel.kicad_pcb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The complete github action for generating the PCB&amp;rsquo;s can be found &lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/jjhorton/Pico_Pmod/master/.github/workflows/RP2040_Mini_PMod_Kicad.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; as part of the RP2040 mini PMod I have been building.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RP2040_PCB_Panels.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Completed PCB panels with github SHA and Date generated&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Upgrading the christmas countdown with GPS</title>
        <link>https://jjhorton.co.uk/posts/chrismas_gps_countdown/</link>
        <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/chrismas_gps_countdown/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/countdown_gps_running.png" alt="Featured image of post Upgrading the christmas countdown with GPS" /&gt;&lt;p&gt;The countdown timer that I created last year, which used my custom &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/rp2040_pmod/&#34; &gt;RP2040 Pmod board&lt;/a&gt; with the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/sevensegmentdisp/&#34; &gt;PMod Severn Segment Display&lt;/a&gt; I had also created, was in need of an upgrade. The main aim of this project was to replace the Raspberry Pi Zero that provided the time data to what was just a display made of my custom hardware, and turn it into something that can run automonously, by getting that time data from a &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/gps_pmod_board/&#34; &gt;GPS reveiver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main advantage of using GPS data for this is that by using a GPS receiver we have a high accuracy timing data source, now I wanted to understand how I can make the display update as accurate as possible using this new timing source so I needed to measure how well my initial setup worked, so I built a test setup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_testing.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Tesing the GPS receiver with DSLogic Logic Analyiser&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With this test setup, using some PMod Breakout Boards, I could monitor the Serial Data and 1 PPS from the GPS, as well as the Clock and Data lines to the PMod 7 Segement display. By monitoring all these signals at the same time I could monitor the progress of the data through the system, the 1 Pulse Per Second (PPS) signal makes the absolute point that a second begins and the time at which the data is valid for, we can then reference the delay in which it takes from the time information to reach the display.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_before.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Using Pulse Veiw to measure the data&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For the display, I assumed that once the data is completly sent, as the point at which it is displayed. There is a delay in the time it takes to be processed at the disaply, but it is small compared to the rest of the processing. For the measurements I am using &lt;a class=&#34;link&#34; href=&#34;https://sigrok.org/wiki/PulseView&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PulseVeiw&lt;/a&gt; with my &lt;a class=&#34;link&#34; href=&#34;https://www.dreamsourcelab.com/product/dslogic-series/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DS Logic Analyzer&lt;/a&gt;, which allows me to see the the exact timeing of these signals, I can then try and summaries them using &lt;a class=&#34;link&#34; href=&#34;https://wavedrom.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wavedrom&lt;/a&gt;, to show the &lt;a class=&#34;link&#34; href=&#34;https://wavedrom.com/editor.html?%7Bsignal%3A%20%5B%0A%20%20%7Bname%3A%20%27GPS%201pps%27%2C%20wave%3A%20%27l..hl.........hl.........%27%7D%2C%0A%20%20%7Bname%3A%20%27GPS%20Tx%27%2C%20wave%3A%20%27x...3..x.......4..x......%27%2C%20data%3A%20%5B%27GPS%28x%29%27%2C%20%27GPS%28x%2B1%29%27%5D%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Time%27%2C%20wave%3A%20%27.x....3.x........4.x......%27%2C%20data%3A%20%5B%27T%28x%29%27%2C%27T%28x%2B1%29%27%5D%2C%20phase%3A%200.5%20%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Display%27%2C%20wave%3A%20%27x.......3.x........4.x...%27%2C%20data%3A%20%5B%27D%28x%29%27%2C%27D%28x%2B1%29%27%20%5D%7D%0A%5D%2C%0A%20%20head%3A%7B%0A%20%20%20text%3A%27GPS%20data%20delays%20to%20update%20display%27%7D%0A%7D%0A&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;communication exchanges&lt;/a&gt; rather than signals.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://svg.wavedrom.com/%7Bsignal%3A%20%5B%0A%20%20%7Bname%3A%20%27GPS%201pps%27%2C%20wave%3A%20%27l..hl.........hl.........%27%7D%2C%0A%20%20%7Bname%3A%20%27GPS%20Tx%27%2C%20wave%3A%20%27x...3..x.......4..x......%27%2C%20data%3A%20%5B%27GPS%28x%29%27%2C%20%27GPS%28x%2B1%29%27%5D%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Time%27%2C%20wave%3A%20%27.x....3.x........4.x......%27%2C%20data%3A%20%5B%27T%28x%29%27%2C%27T%28x%2B1%29%27%5D%2C%20phase%3A%200.5%20%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Display%27%2C%20wave%3A%20%27x.......3.x........4.x...%27%2C%20data%3A%20%5B%27D%28x%29%27%2C%27D%28x%2B1%29%27%20%5D%7D%0A%5D%2C%0A%20%20head%3A%7B%0A%20%20%20text%3A%27GPS%20data%20delays%20to%20update%20display%27%7D%0A%7D%0A&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Initial setup with long delay&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After the 1 PPS signal rises, we see the initial delay to the point when the GPS receiver begins to produce the Serial Messages describing the GPS receivers locations in time and space. This delay changes frequently based on the signal that is received, and is documented on the &lt;a class=&#34;link&#34; href=&#34;https://content.u-blox.com/sites/default/files/products/documents/u-blox8-M8_ReceiverDescrProtSpec_UBX-13003221.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ublox website&lt;/a&gt; which shows the delay as the GPS Position fix calculation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_delays.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GPS Datasheet with timepulse to serial Processing delay&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For our purpose on top of the GPS Position fix calculation, there is also a delay in waiting for the GPS message &lt;code&gt;$GNRMC&lt;/code&gt; that we are using to extract the time data, then process that text string. This means that we only have to wait until the message we are intreseted in to arrive, at a relitivly slow baud rate of 9600. We can then process the data and not worry about the full range of other messages that we are receiving from the ublox receiver configured with its default settings, with is shown in the wavedrom diagram as &amp;lsquo;T(x)&amp;rsquo;, and continues after we decode our message.&lt;/p&gt;
&lt;p&gt;The update of the display then follows once we have converted the current time into a number of seconds to the next 25th december for this year. For this I used a crude estimate that is based on the number of days in each month, and that we only want to know how many seconds to the next christmas once the new year has started. This falls apart as we aren&amp;rsquo;t calculating leap years, so may produce some wired behavior I&amp;rsquo;ve not checked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//find the number of commas
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;comma&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTC Date is: %02i/%02i/%02i&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;//calculate seconds to 25th december
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;days_per_month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day_so_far&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;day_so_far&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day_so_far&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days_per_month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_of_year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;365&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day_so_far&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_of_day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hours&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_of_year&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_of_day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// between christmas and new year
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// the case of not being a valid year
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Display1A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I use the two digit year number as a sanity check to ensure that the date the receiver is producing is a valid number, but that is the only check that is carried out on the data, with it producing a zero output for all values that the number is not valid. This is the same behaviour as between christmas and the new year, which doesn&amp;rsquo;t help the user understand what is going on, but is a clear way of showing that it doesn&amp;rsquo;t currently know the actual number of seconds until christmas rather than displaying the wrong number of seconds.&lt;/p&gt;
&lt;p&gt;The setup here means that until all the code is executed only at the final line does the current time finally reach the display, which will be other 100ms. The aim is to reduce this time, so I wanted to look at reducing the time from the rising edge of the 1 PPS to that update. Now the fact that I know the time in seconds will increase by a single second at the next rising edge, and use this as a way of updating the display at the rising edge.&lt;/p&gt;
&lt;p&gt;For this to work I use two varribles &lt;code&gt;current_pps&lt;/code&gt; and &lt;code&gt;last_pps&lt;/code&gt;, the current PPS is read from the GPIO pin. This means when the &lt;code&gt;current_pps&lt;/code&gt; is high and the &lt;code&gt;last_pps&lt;/code&gt; is low we know there has been a rising edge at the start of the 1 PPS signal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_pps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gpio_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PPS1_PIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current_pps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_pps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Display1A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds_remaining&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Display1A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;last_pps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current_pps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For updating the display we can use the pervious number seconds remaining as read from the GPS receiver, but the value from the pervious second, so to get the value for the current second at the PPS I take 1 from seconds remaining that was read when the GPS value was read.  As long as the &lt;code&gt;seconds_remaining&lt;/code&gt; is greater than zero, we know that the number of seconds, and can update the display using &lt;code&gt;Display1A.setValue(double(seconds_remaining-1),0);&lt;/code&gt; just as that happens. This using the pervious GPS message and calculating the number of seconds remaining should give a much faster reaction time to the 1PPs rising edge. the flow of signals is shown in the &lt;a class=&#34;link&#34; href=&#34;https://wavedrom.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wavedrom&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://wavedrom.com/editor.html?%7Bsignal%3A%20%5B%0A%20%20%7Bname%3A%20%27GPS%201pps%27%2C%20wave%3A%20%27l..hl.........hl.........%27%7D%2C%0A%20%20%7Bname%3A%20%27GPS%20Tx%27%2C%20wave%3A%20%27x...3..x.......4..x......%27%2C%20data%3A%20%5B%27GPS%28x%29%27%2C%20%27GPS%28x%2B1%29%27%5D%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Time%27%2C%20wave%3A%20%27.x....3.x........4.x......%27%2C%20data%3A%20%5B%27T%28x%29%27%2C%27T%28x%2B1%29%27%5D%2C%20phase%3A%200.5%20%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Display%27%2C%20wave%3A%20%27x..5.x........3.x........%27%2C%20data%3A%20%5B%27D%28x-1%29%27%2C%27D%28x%29%27%20%5D%7D%0A%5D%2C%0A%20%20head%3A%7B%0A%20%20%20text%3A%27Using%20value%20reported%20at%20pervious%20GPS%20data%20point%20at%20next%201PPS%20rising%20edge%27%7D%0A%7D%0A&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Signal diagram&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://svg.wavedrom.com/%7Bsignal%3A%20%5B%0A%20%20%7Bname%3A%20%27GPS%201pps%27%2C%20wave%3A%20%27l..hl.........hl.........%27%7D%2C%0A%20%20%7Bname%3A%20%27GPS%20Tx%27%2C%20wave%3A%20%27x...3..x.......4..x......%27%2C%20data%3A%20%5B%27GPS%28x%29%27%2C%20%27GPS%28x%2B1%29%27%5D%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Time%27%2C%20wave%3A%20%27.x....3.x........4.x......%27%2C%20data%3A%20%5B%27T%28x%29%27%2C%27T%28x%2B1%29%27%5D%2C%20phase%3A%200.5%20%7D%2C%0A%20%20%7B%7D%2C%0A%20%20%7Bname%3A%20%27Display%27%2C%20wave%3A%20%27x..5.x........3.x........%27%2C%20data%3A%20%5B%27D%28x-1%29%27%2C%27D%28x%29%27%20%5D%7D%0A%5D%2C%0A%20%20head%3A%7B%0A%20%20%20text%3A%27Using%20value%20reported%20at%20pervious%20GPS%20data%20point%20at%20next%201PPS%20rising%20edge%27%7D%0A%7D%0A&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;After updating to write value on 1PPS Rising edge&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With this new setup we can now see the updated time imediatly after the rising edge on th 1 PPS, this now means that the delay time has been reduced by predicting the current time based on pervious gps data point and the Time Pulse signal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_update_time.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Much sorter update time to get the time to the display&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The improvement can be measured by taking a close look at the signal using the Pulse View. Which we can compared to the pervious measurment made at the start of this post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_after_time.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sigrok time remaining after change&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Now that the countdown timer is up and running, it just requires the 3D printed case modifying to allow space for the &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/gps_pmod_board/&#34; &gt;PMod GPS module&lt;/a&gt;. With that done the countdown clock will be ready to count down to christmas both this yeaar and next, without the need for any external hardware to provide the current time. This makes it much more flexible and useful, i&amp;rsquo;m also planning on using the GPS module for a few other projeccts that I have lined up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/countdown_gps_running.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Completed GPS Countdown clock up and running&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Creating a GPS PMod Board</title>
        <link>https://jjhorton.co.uk/posts/gps_pmod_board/</link>
        <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/gps_pmod_board/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Pmod-GPS_Purple.jpg" alt="Featured image of post Creating a GPS PMod Board" /&gt;&lt;p&gt;I have been looking to put together a GPS board for a while, as I had a few ideas for upgrading a project with realtime time information, and a few things that I could try out if I had location or time data, as well as an accurate timing pulse source. While there are actually plenty of options for just buying a pre-made &lt;a class=&#34;link&#34; href=&#34;https://digilent.com/shop/pmod-gps-gps-receiver/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PMod module&lt;/a&gt;, I decided I would be better of giving it a go myself as I wanted a few of them and that could make it cheaper to build my own if I needed a few.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/GPS_Design.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Initial PMod Board Schematic Design in KiCAD&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As I didn&amp;rsquo;t want to reinvent the wheel the easiest way to create what needed was to use a ublox module, and then mount an antenna on a PCB, and as simple as that it is job done. This module would give me a nice simple serial interface to the GPS data, allow me to get access to the time pulse data and is the lowest risk way to create what I needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Pmod-GPS_Green.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Initial PMod Board Design&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The first board had a minor error, in that I had connected the serial TX/RX wires the wrong way round, so I couldn&amp;rsquo;t connect to my (RP2040 PMOD Board)[https://github.com/jjhorton/Pico_Pmod] that I planned to test without using breakout wires. So while I re-spun the board with the serial connection the right way round I hooked up the board to an &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/icebreaker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iceBreaker&lt;/a&gt; FPGA Board.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Pmod-GPS_FPGA.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FPGA for initial testing&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;By using the FPGA &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/icebreaker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;board&lt;/a&gt;, I can create a simple thru wire design to out work as a serial device, so i can check the output from the serial output and that the one PPS is working as expected. With serial connected straight though the design, and then the 1 PPS signal broken out to an LED, on the icebreaker Development board I was using.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thruwire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_tx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;led&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;led&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;led&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;led&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_tx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_tx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pmod_rx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ledr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This design is then built with &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/nextpnr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;next-pnr&lt;/a&gt;, to allow the GPS board to be tested, confirming the messages were arriving at the PC and were giving the location as expected. This is a great point to get to in confirming the design works and that the antenna is suitable which were the main risks with this design. While there is more testing I want to do with the FPGA, but the new PCB&amp;rsquo;s arrived so it was time to get some more components on order and test it out with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 PMod Board&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the functionality of the GPS module itself, it was in part a case of confirming the behavior of the board, the first piece of data I was interested in was the location data, this is provided in the standard GPS messages that the uBlox produces over the serial messages, the real task here is decoding these messages and finding a way to display them.&lt;/p&gt;
&lt;p&gt;The first task here on the RP2040, is to read the message from the UART as they become available, for that in this case we are reading the sting, from the characters one at a time until reaching an end of line character, once there we can check the message type using the first 6 characters, in this case we are looking for &amp;ldquo;$GNRMC&amp;rdquo;, the details of the different GPS messages can be found &lt;a class=&#34;link&#34; href=&#34;https://docs.novatel.com/OEM7/Content/Logs/GPRMC.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;online.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// send any chars from stdio straight to the host
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uart_is_readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UART_ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uart_getc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UART_ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strncmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;$GNRMC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;found GNRMC&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have the message, we can then look to extract the values, and convert them to something I can then use, for this I can just work my way though the comma separated list of values that makes up the list, to find the points in the list that contain the lat and lon values that I am looking for.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;comma&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;comma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these values, its then just a case of taking the values from the string and turning them into a decimal number, as the values are in the format Latitude DDmm.mm, and Longitude DDDmm.mm, so these decimal and minute values need to be converted into a fully decimal value at the same time&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lat_deg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lat_min&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lon_deg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lon_min&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s_lon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With those values being displayed, it is then a simple case of outputting them to a display, which today is my severn segment displays I made last year.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Pmod-GPS_LonLat.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RP2040 Pmod Long/Lat Display&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;One limitation of these displays is that I never coded the ability to display negative values, to so cannot show them on here at the moment as should be the case, but I will have to update that at some point soon.&lt;/p&gt;
&lt;p&gt;The next challenge to be completed here is to update my Countdown timer, to use the GPS board as the source for its timing information rather than relying on a PC to provide it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Pmod-GPS_Countdown.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Upgrading my countdown timer to use GPS&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting started IKEA Vindriktning in Home Assistant with Pico W</title>
        <link>https://jjhorton.co.uk/posts/ikea-air_quality-sensor/</link>
        <pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/ikea-air_quality-sensor/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/2022-Ikea_Pico_w.jpg" alt="Featured image of post Getting started IKEA Vindriktning in Home Assistant with Pico W" /&gt;&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://www.ikea.com/gb/en/p/vindriktning-air-quality-sensor-80515910/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IKEA Vindriktning&lt;/a&gt; is an air quality sensor sold for just &lt;a class=&#34;link&#34; href=&#34;https://www.ikea.com/gb/en/p/vindriktning-air-quality-sensor-80515910/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;£13&lt;/a&gt;, that makes use of a &lt;a class=&#34;link&#34; href=&#34;https://esphome.io/components/sensor/pm1006.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PM1006&lt;/a&gt; sensor inside to detect particle matter in the air. Normally the readins from the sensor are displayed on one of 3 LED&amp;rsquo;s on the front of the unit, but here we are looking to collect this data and add it into &lt;a class=&#34;link&#34; href=&#34;https://www.home-assistant.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Home Assistant&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;There are a large number of &lt;a class=&#34;link&#34; href=&#34;https://community.home-assistant.io/t/ikea-vindriktning-air-quality-sensor/324599&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;posts&lt;/a&gt; and instructions &lt;a class=&#34;link&#34; href=&#34;https://www.instructables.com/Connecting-a-IKEA-Vindriktning-to-Home-Assistant-U/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;avalible&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://style.oversubstance.net/2021/08/diy-use-an-ikea-vindriktning-air-quality-sensor-in-home-assistant-with-esphome/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;online&lt;/a&gt; for modifying the &lt;a class=&#34;link&#34; href=&#34;https://www.ikea.com/gb/en/p/vindriktning-air-quality-sensor-80515910/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IKEA Vindriktning&lt;/a&gt; or removing the PM1006 sensor and building a Home Assistant integrated sensor using an ECP32 module. While I could have followed one of these, i actually had a spare &lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/products/raspberry-pi-pico-w&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico W&lt;/a&gt; that I brought at release and had never used, so my task was use this after seeing a video on &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=dFDGtlSi9Eg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YouTube&lt;/a&gt; where the RP2040 was used to monitor a garage door.&lt;/p&gt;
&lt;p&gt;The first task is a matter of getting the sensor apart so that we can connect the sensor up to the Raspberry Pi Pico W. The back of the sensor is just secured with 4 screws, and with those removed it simply pulls apart, and we can see the sensor and the controller PCB inside.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea_sensor_empty.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;IKEA Vindriktning opened&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;There are a number of options as to how I could have made use of the sensor, I chose to make use of the simplest which leaves the original electronics intact. The reason for me choosing this method is that I wanted to keep the functionality of the sensor the same that it was before, so that the front LED remains the same and the power USB-C plug still powers the whole device. This is the easiest method, requiring the attaching of 3 wires to some exposed pads on the PCB, for serial, power and ground. The wires on the &lt;a class=&#34;link&#34; href=&#34;https://www.ikea.com/gb/en/p/vindriktning-air-quality-sensor-80515910/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IKEA Vindriktning&lt;/a&gt; just need to be connected to the &lt;code&gt;5V&lt;/code&gt;, &lt;code&gt;GND&lt;/code&gt; and &lt;code&gt;REST&lt;/code&gt; pins on the PCB.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea_sensor_wires.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;IKEA Vindriktning with serial and power wires&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With the wires attached to the sensor&amp;rsquo;s PCB, we now need to hook them up to the &lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/products/raspberry-pi-pico-w&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico W&lt;/a&gt;, we need to attach the Power and GND to appropriate pins and then the serial need to be attached to an appropriately capable pin, I selected the following:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Ikea Vindriktning&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Raspberry Pi Pico W&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;5V&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;VSYS&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;GND&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;GND&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;REST&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;GPIO1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now with the modification complete we just need to flash the software onto the &lt;a class=&#34;link&#34; href=&#34;https://thepihut.com/products/raspberry-pi-pico-w&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico W&lt;/a&gt;, before we seel the unit up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea_Pico_w_Installed.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pico W installed within the IKEA Vindriktning&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;For the next step we need to use &lt;a class=&#34;link&#34; href=&#34;https://esphome.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ECP home&lt;/a&gt; from within &lt;a class=&#34;link&#34; href=&#34;https://www.home-assistant.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Home Assistant&lt;/a&gt; which in my case all runs on a Raspberry Pi 4, I&amp;rsquo;m running the development version of &lt;a class=&#34;link&#34; href=&#34;https://esphome.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ECP Home&lt;/a&gt;, as this has support for the Pico W, which should be available in the standard version soon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea-ecphome-add.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Add a Pico W in ECP Home&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;To build the setup I&amp;rsquo;m using the following configuration YAML file, this is made up a a few copy and pastes from a few locations on github that I failed to note down, but essentially it is using the &lt;code&gt;rp2040&lt;/code&gt; platform on the &lt;code&gt;rpipiow&lt;/code&gt; board, with enabling of the over the air updates (&lt;code&gt;OTA&lt;/code&gt;) and the Home assistant API enabled. The most import settings to note as the &lt;code&gt;UART&lt;/code&gt; and the &lt;code&gt;sensor&lt;/code&gt; definition, which makes use of the same definitions that would have been used on the ECP32 boards, while setting the serial port to the &lt;code&gt;GPIO&lt;/code&gt; pin we soldered the connector to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;esphome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ikea-sensor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rp2040&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rpipicow&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;framework&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;platform_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com/maxgerhardt/platform-raspberrypi.git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable logging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;logger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable Home Assistant API&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;encryption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Key here&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ota&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Password Here&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;wifi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ssid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;!&lt;span class=&#34;l&#34;&gt;secret wifi_ssid&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;!&lt;span class=&#34;l&#34;&gt;secret wifi_password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable fallback hotspot in case wifi connection fails&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ssid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ikea-Sensor Fallback Hotspot&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;e3kxZDktrp64&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rx_pin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GPIO1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;baud_rate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9600&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sensor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pm1006&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pm_2_5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Particulate Matter 2.5µm Concentration&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We just need to build the required image from within ECPHome using the Clean build option in the menu, then downloading from home assistant and onto the Pico W board using the &lt;code&gt;.u2f&lt;/code&gt; file that just needs to be copied to the Pico W using its built in Micro USB port, using the &lt;code&gt;bootsel&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea-ecphome-build.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Add a Pico W in ECP Home&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It is worth noting that on my Raspberry Pi 4 which hosts my &lt;a class=&#34;link&#34; href=&#34;https://www.home-assistant.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Home Assistant&lt;/a&gt; instance it took a good 10 minutes to build the image for the Pico as it needed to download all the required tools to build it first.&lt;/p&gt;
&lt;p&gt;With that all complete, it was then just a case of being able to squeeze the Pico W into the top of the &lt;a class=&#34;link&#34; href=&#34;https://www.ikea.com/gb/en/p/vindriktning-air-quality-sensor-80515910/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IKEA Vindriktning&lt;/a&gt; and attach the USB-C cable to provide power, within a couple of minutes it was showing in Home Assistant and I was able to add it to my dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/2022-Ikea-ha.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Data from IKEA Vindriktning in Home Assistant&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The data doesn&amp;rsquo;t look to bad and is updating frequently, I&amp;rsquo;m planning to set up a notification to warn me if the sensor is giving some consistent high readings so that I can do something about it. I will wait a week to two to build up enough background data to be able to add some reasonable limits.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Christmas Countdown</title>
        <link>https://jjhorton.co.uk/posts/christmascountdown/</link>
        <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/christmascountdown/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/ChristmasCountdown_OpenSCAD.jpg" alt="Featured image of post Christmas Countdown" /&gt;&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Initial.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Christmas Countdown on the Whiteboard&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Using my 7 segment display I wanted to build a Christmas countdown, this was just going to use the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/seven-segment-display-pmod-board.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PMod Display&lt;/a&gt; that I had around, and then run from one of the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 boards&lt;/a&gt; that I built earlier this year. As I wanted a count down that is frequently updating, I chose to use the countdown in seconds, as this for the month of December easily fits within the seven segments available.&lt;/p&gt;
&lt;p&gt;The code that runs on the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.com/products/rp2040/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040&lt;/a&gt; relies on a serial link as there is no real time clock on the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 boards&lt;/a&gt;. We can also reuse some of the libraries that I use to drive the seven segment display, this means the main function is relatively simple, to run on the RP2040, which takes the count down calculated on a main computer and takes it from the serial link and puts it onto the display.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;#34;pico/stdlib.h&amp;#34;
#include &amp;#34;pico/stdio_usb.h&amp;#34;

// Custom 7 Segment Display
#include &amp;#34;My7Seg.h&amp;#34;

int main() {
	//initalise the display
	My7Seg Display(0,2);
	Display.enable();

	int seconds_left = 0;
	char buffer[8];
	char countdown_str [8];

	stdio_init_all();
	printf(&amp;#34;Countdown Clock starting!\n&amp;#34;);
	Display.setValue(double(99999999), 0);

	while(1){
		buffer[0] = getchar_timeout_us(0);

		if (buffer[0] != 0){
			if (buffer[0] == &amp;#39;a&amp;#39;){

				for(int i = 0; i&amp;lt;8; i++){
					buffer[i] = getchar_timeout_us(0);
				}
				seconds_left = strtof(buffer, NULL);
			}
		}
		Display.setValue(double(seconds_left), 0);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The actually calculation of the number of seconds takes place on a &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.com/products/raspberry-pi-zero-w/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Zero&lt;/a&gt;, this takes the current time which it gets from its Wifi Network connection, and then calculates the difference between the current time and the number of seconds until Christmas day, and sends it over the serial link to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 Board&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import serial
import io
from datetime import *

# /dev/tty.usbmodem1101 115200

ser = serial.Serial(&amp;#39;/dev/tty.usbmodem1101&amp;#39;)  # open serial port
sio = io.TextIOWrapper(io.BufferedRWPair(ser, ser))

while(1):
	now = datetime.now()
	thisyear = now.year
	xmas = datetime(thisyear,12,25)

	if now &amp;lt; xmas:
		delta = int((xmas - now).total_seconds())
	else:
		delta = 0

	my_str = str(&amp;#39;a&amp;#39;+ str(delta))
	my_str.ljust(9, &amp;#34;.&amp;#34;)

	sio.write(my_str)
	sio.flush()

ser.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_OpenSCAD.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;OpenSCAD Case design&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With the main coding element taken care of the next task is building the case for the PCB&amp;rsquo;s, I wanted to be able to mount the two boards together, and be able to attach the whole setup to my whiteboard, for the I created a simple case, which has holes in the back for placing some small magnets, and then holes in the front for mounting the PCB&amp;rsquo;s on the front.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_CaseBack.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Case Mounting magnets&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This simple case provides an effective way of being mounted up on the Whiteboard, although now I am finally getting round to writing this all up, it is several days past Christmas so until next December it will have to wait until then, unless I can find a new date to countdown until.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Zero.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Counter hits Zero&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The code used to create this board, and the code for the case will be available &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/RP2040_Countdown&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Seven Segment Display PMod Board</title>
        <link>https://jjhorton.co.uk/posts/sevensegmentdisp/</link>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/sevensegmentdisp/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/SevenSegment_complete.jpg" alt="Featured image of post Seven Segment Display PMod Board" /&gt;&lt;p&gt;Ive always wanted to build a severn segment display, there is something about the old school style displays that it is hard to beat to display random numerical data like in &lt;a class=&#34;link&#34; href=&#34;https://www.thelegendofq.co.uk/encoder.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the movies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/SevenSegment_bond_gps_encoder.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The 7 Segment display that I decided to use, comes with 4 digits per display, and I was looking to combine two per PMod Board, with 8 LED per segment, we don&amp;rsquo;t have enough pins to be able to control them all. An example of the maximum number of displays that can be controlled by a single PMod, is the display that I got with my &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iceBreaker FPGA&lt;/a&gt; which has two digits, and removes the decimal point to allow multiplexing between the two displays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/icebreaker-pmod-7-segment.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Thankfully there are a large number of solutions available to solve this problem, one of which are a range of dedicated chips controlled over a serial link to set seven segment displays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/GN_Semic_GN1640.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Devices such as the &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GN Semic GN1640&lt;/a&gt; which is the chip I decided to tag onto an order I was already placing at &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCSC Components&lt;/a&gt;, at just £0.30 it seemed worth giving it a go. From what I had seen online these components were listed as being very similar to a number of other devices which are listed by other manufactures with similar part numbers such as TM1640, which appears to have a identical datasheet but with the advantage of being available in English.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/SevenSegment_schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The circuit for these &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GN1640&lt;/a&gt; chips is relatively simple, with just two input needing to come over the PMod connector, these are a clock signal and a data signal. The circuit for the Seven Segment displays is also relatively simple using a common cathode configuration, which matched my Seven Segment Displays I picked up from &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.co.uk/ProductDetail/859-LTC-5723HR&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mouser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/SevenSegment_pcb.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The boards were laid out so that they would fit within the maximum 10x10cm limits of the &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLC PCB&lt;/a&gt; 2 Layer PCB offer, the issue with this is that each of the displays was 5cm long, taking up the whole length of the PCB, but with all the control pins for the displays being in the centre of each display it was simple to mount the PCB with an overhang at one end leaving room for the PMod connector. The rest of the PCB is a simple 2 layer board, that was designed in KiCad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/SevenSegment_complete.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With the PCB&amp;rsquo;s made up, the next challenge was getting some software built up which allowed it to interface with one of my PMod Boards, to start with I used to the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/rp2040-pmod-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 PMod boards&lt;/a&gt; that I had already made. This helps to simplify building up a simple example, as I can use a bit bashing approach to get a simple example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/SevenSegment_TM1640-Timing.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The TM1640 Data Sheet provides a good description of the serial interface, so we can start to build up our functions to control the display, by setting the clk and serial pins either high or low, adding in the required delay as set out in the datasheets timing diagram.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void enable()
{
			//command to turn on the display
			int command1[] = {1,1,1,1,0,0,0,1};
			//initallisation
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,0);
			sleep_ms(0.2);
			//send the bits
			for(int i=0; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,command1[i]);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}
			//end the transmission
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,1);
			sleep_ms(0.2);
			gpio_put(pin_data,1);

			sleep_ms(10);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the display enabled I was then able to start sending data, this follows a similar design pattern with a function taking in the address and data, to trigger a series of short delays followed by setting the clock and data pins either high or low to transmit the data.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void txData(uint8_t pos, uint8_t data)
{
			uint8_t addr = 0b11000000 + pos;

			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,0);
			sleep_ms(0.2);

			for(int i=0; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,(addr &amp;gt;&amp;gt; i) &amp;amp; 1U);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}

			for(int i=0 ; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,(data &amp;gt;&amp;gt; i) &amp;amp; 1U);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,1);
			sleep_ms(0.2);
			gpio_put(pin_data,1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next challenge now I&amp;rsquo;m able to send data to the display using simple functions, is to look at turning the control functions into a C++ object, and then look at putting the display to a practical use. Another route to look at is setting up the PIO state machine to work with the display and possibly build a simple example that can also work with my &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ice Breaker FPGA&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RP2040 PMod PCB</title>
        <link>https://jjhorton.co.uk/posts/rp2040_pmod/</link>
        <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/rp2040_pmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/rp2040pmod_blankpcb.jpg" alt="Featured image of post RP2040 PMod PCB" /&gt;&lt;p&gt;Having perviously built myself a &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico PMod Board&lt;/a&gt; around the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&lt;/a&gt;, I wanted to take this to the next level, and build myself a few boards from scratch. So once the orders went live for the RP2040 microcontroller a few months ago, I ordered some, and then did nothing with them for a while.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_chips.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Like many people, I seem to end up with more ideas than time and it took me a little while to get around to this one. What I was looking to create was a simple board with a USB-C connector for my PC and 3 PMod Ports based around the RP2040, I settled on a form factor similar to the &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/icebreaker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IceBreaker FPGA&lt;/a&gt; board I have used in the past. This wasn&amp;rsquo;t for any particular project in mind, but I had enjoyed playing with my Pico PMod Boards so was looking to take it to the next level and improve my PCB building ability along the way.&lt;/p&gt;
&lt;p&gt;The boards themselves pretty much follow the &lt;a class=&#34;link&#34; href=&#34;https://datasheets.raspberrypi.org/rp2040/hardware-design-with-rp2040.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hardware guidelines&lt;/a&gt;, from the &lt;a class=&#34;link&#34; href=&#34;https://datasheets.raspberrypi.org/rp2040/rp2040-datasheet.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 Datasheet&lt;/a&gt; and the supporting documents, using the recommended parts. One thing I did decide that I wanted, was both a Run and Boot select button, as I found these very useful for working with the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico PMod Board&lt;/a&gt; over USB. The boards were designed using KiCAD and I had them made by &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_solderpaste.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RP2040 PMod Board ready for componts to be hand placed&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The first set of boards arrived in a couple of weeks, but after building up my first one I hit a few problems, the first was I was missing a few resistor values, so I had to bodge my way around those. I then hit an issue with the USB connection, with my computer not being able to see it. This took me a while to work out what I had done, but it transpired that I had mislabelled my USB connection and had connected the positive and negative data lines the wrong way round, so the USB wasn&amp;rsquo;t going to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_componentsonpcb.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;RP2040 PMod Board with components in place ready to be soldered&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;At that moment, I was expecting to have to throw away the boards, but then I thought I would have a go with the debug pins, I had broken these out at the last minute to a connector when designing the PCB. So I thought I should give the debugging interface a try before a scrap them. Having not used the debug interface before, I needed to get the build environment set up on a spare Raspberry Pi 4, and hook up the board, after a few tried working on the correct pins I was able to get a simple &amp;ldquo;Hello World&amp;rdquo; example running, flashing the on-board LED using the couple of debug interface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_testing.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Testing the RP2040 PMod Board&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A productive couple of evenings this week building up a PCB based on the Raspberry Pi RP2040, just a few bodges needed to get it programmed and the LED flashing &lt;a href=&#34;https://twitter.com/hashtag/electronics?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#electronics&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/madeathome?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#madeathome&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/raspberrypi?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#raspberrypi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rp2040?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rp2040&lt;/a&gt; &lt;a href=&#34;https://t.co/7IbJCgmGQY&#34;&gt;pic.twitter.com/7IbJCgmGQY&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/1423678980423569415?ref_src=twsrc%5Etfw&#34;&gt;August 6, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;With the good news that the board seemed to all be working, except the USB issue, I corrected the error, and had a few more PCB&amp;rsquo;s made by &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt;. Having had these ordered they soon arrived, and I was able to build a few more of the boards. One issue I did find is that I am struggling to get consistent results with surface mount soldering on my hot plate. The boards I&amp;rsquo;m building now are some of the smallest and most complex I&amp;rsquo;ve tried to build at home so there is always going to be a fair amount of trial and error. Of the second lot of 5 PCB&amp;rsquo;s ordered 4 were delivered as one was damaged by the PCB manufacturer, I then haven&amp;rsquo;t been able to get one working, and then two work perfectly after a couple of fixes, while one has a single IO pins which doesn&amp;rsquo;t seem to be functioning.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Sometime you can&amp;#39;t beat an evening spent playing with LEDs making patterns &lt;a href=&#34;https://twitter.com/hashtag/leds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#leds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/electronics?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#electronics&lt;/a&gt; &lt;a href=&#34;https://t.co/kchJTo22p3&#34;&gt;pic.twitter.com/kchJTo22p3&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/1432432328370962435?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;The next plan is to start getting some of the PMod Boards I have already purchased and made, hooked up, and get some more working examples with the RP2040 PMod Boards, as well as order a few more boards so I can attempt to improve my surface mount soldering.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pico PMod breakout PCB</title>
        <link>https://jjhorton.co.uk/posts/picopmod/</link>
        <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/picopmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/PicoPmod-JLC_PCB.jpg" alt="Featured image of post Pico PMod breakout PCB" /&gt;&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Breadboard.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Pico on a Breadboard&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After picking up a few &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&amp;rsquo;s&lt;/a&gt;, I was looking for a use for them and I decided to hook up a few of the PMod boards I have from playing around with FPGA. This PMod boards all use the same pinout, of 12 pins, which consists of 8 I/O pins, two 3.3V, and two GND connections on a two row 2.54mm header. I have a few kicking around from a more complex ones, down to a simple &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/collections/fpga/products/pmod-dip-switch&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;8 DIP switch&lt;/a&gt; and a &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/pmod-7-segment-display&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7 segment display&lt;/a&gt;. These are great little boards for connecting to boards like the Raspberry PI Pico when experimenting but the interface with the Pico requires a breadboard to hook them up, so I was looking for a better way to get these PMod&amp;rsquo;s hooked up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.raspberrypi.org/app/uploads/2021/01/Raspberry-Pi-Pico-at-an-angle-900x643.png%22&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Raspberry pi pico, image from raspberrypi.org&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Why bother experimenting with the Raspberry Pi Pico? Well the things that interested me with the Raspberry Pi Pico was not only the low price but also the Programable I/O or PIO on the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/documentation/rp2040/getting-started/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040&lt;/a&gt; device. This allows you to build small limited sate machines you can set up on some of the outputs, alongside some more traditional Hard IP (SPI/UART/I2C) on the device with a duel core ARM that supports running at a clock rate of over 100MHz. This make it interesting to play with, much as I have been playing around with on FPGA&amp;rsquo;s in the past few months, without having to get your head around writing lots of HDL such as Verilog or VHDL.&lt;/p&gt;
&lt;h1 id=&#34;designing-a-pcb-with-kicad&#34;&gt;Designing a PCB with KiCAD
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Schematic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;KiCad Schematic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Once I had decided to build a PMod Board, I needed to decide the requirements of the board, I decided that I wanted to be able to use the extended PMoD setup, that is used on the &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;colorlite I5 expansion board&lt;/a&gt; that I owned, which would allow me to have both a duel PMod connection, and a few extra I/O pins as well as 5V access. I also decided that I would want to be able to connect PMod&amp;rsquo;s as a host device, as well as connect into an FPGA board like the &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;colorlite I5&lt;/a&gt; . To do this I decided I would break out the 5V pin and 3v3 pin, so we can connect headers when I need to power PMod devices from the Picos power supply, or disconnect them when I want to use the USB connection.&lt;/p&gt;
&lt;p&gt;Other pins I looked to break out to headers was the analog inputs, and the 3v3 enable pin. This gives me more flexibility when choosing how to power the Pico when it is connected up as a client device to one of the FPGA boards. Another popular feature I added was connecting up the Run pin to a button which pulls it to ground, allowing the Pico to be safely reset, when I want to upload a new program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Layout.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;KiCad PCB Layout&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-3D_Layout.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;KiCad 3d Render&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Once all the requirements were captured in the schematic, it was a quick task to layout the board. Thankfully, a footprint and schematic symbol that match the Pico requirements were available in a library which could be loaded into KiCAD that someone has made available on &lt;a class=&#34;link&#34; href=&#34;https://github.com/HeadBoffin/RP_Silicon_KiCad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github&lt;/a&gt;, which greatly speed up getting these boards made up. With the simple boards made up&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-JLC_PCB.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;PCB’s as they arrived&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;building-a-counter-example&#34;&gt;Building a counter example
&lt;/h1&gt;&lt;p&gt;With the boards made and tested, I was now ready to start hooking up a simple PMod, and getting my head round writing C/C++ again, as it has been a while.&lt;/p&gt;
&lt;p&gt;The process for compiling c/c++ for the Raspberry Pi Pico is really well documented, and the Raspberry Pi Website is a great resource in getting everything set up on matter on what you are using to compile the software. I did find the examples repo, a bit intimidating when wanting to build something from scratch for the cmake files but there were plenty of back to basics examples avalible from a quick google search.&lt;/p&gt;
&lt;p&gt;The first example that I wanted used the PMod &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/pmod-7-segment-display&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7 segment display&lt;/a&gt;, and I wanted to display a counter that increments once per second. The first set was getting a suitable cmake file setup, this includes all the information the Pico SDK needs to build my project, this is a simple project with no real external dependancies other the the &lt;code&gt;pico_stdlib&lt;/code&gt; library and the code will be in my file &lt;code&gt;main.c&lt;/code&gt;, which keeps this file nice and simple.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make_minimum_required(VERSION 3.12)

# include(pico_sdk_import.cmake)
include($ENV{PICO_SDK_PATH}/pico_sdk_init.cmake)

# Change your executable name to something creative!
set(NAME pico-pmod)

project(${NAME} C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Initialize the SDK
pico_sdk_init()

# Add your source files
add_executable(${NAME}
    main.c
)

# Don&amp;#39;t forget to link the libraries you need!
target_link_libraries(${NAME}
	 pico_stdlib
)

# create map/bin/hex file etc.
pico_add_extra_outputs(${NAME})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next task is building up our program, first up is importing the standard library&amp;rsquo;s, and at this point we will also set up some variables that we will need. One of the main once here are the &lt;code&gt;SEVEN_SEGMENT_PINS&lt;/code&gt; array of constants, these list of pins can be swapped by changing the LCD_DISPLAY value which is the same as the PMod output connector of the custom PCB.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;#34;pico/stdlib.h&amp;#34;

#define LCD_DISPLAY 1
#define LOOKUP_TABLE_LENGTH 50

#if (LCD_DISPLAY==0)
	//if plugged into pmod1
	const uint SEVEN_SEGMENT_PINS[] = {9,11,13,15,8,10,12,14};
#else
	//if plugged into pmod0
	const uint SEVEN_SEGMENT_PINS[] = {21,19,17,3,20,18,16,2};
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first function we define is a nice simple one, this is used to setup the output pins, initialising them as GPIO (General Purpose Input Output) Pins, setting the direction for each of them as outputs and setting them each as a low value. This function is called as part of the setup process, and is only used once.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int setup_display(){
	for(int x = 0; x&amp;lt;8; x++) {
			gpio_init(SEVEN_SEGMENT_PINS[x]);
			gpio_set_dir(SEVEN_SEGMENT_PINS[x], GPIO_OUT);
			gpio_put(SEVEN_SEGMENT_PINS[x],0);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The function is to display the values on the seven segment display, to do this we create an array with each row corresponding to the pins that we need to turn on to display the corresponding number, this array is &lt;code&gt;characters[]&lt;/code&gt; array, with the first value of the &lt;code&gt;unit8&lt;/code&gt; always set to zero and ignored the rest define each of the segments on the seven segment display.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int set_display(uint num1, uint num2){

	// the table used to set the charcter to be on
	uint8_t characters[] = {0b01000000,	// 0
							0b01111001,	// 1
							0b00100100,	// 2
							0b00110000,	// 3
							0b00011001,	// 4
							0b00010010,	// 5
							0b00000010,	// 6
							0b01111000,	// 7
							0b00000000,	// 8
							0b00011000,	// 9
							0b00001000,	// A
							0b00000011,	// B
							0b01000110,	// C
							0b00100001,	// D
							0b00000110,	// E
							0b00001110};// F


	// set the display values
	//for the first digit
	for(int x = 0; x&amp;lt;7; x++) {
		gpio_put(SEVEN_SEGMENT_PINS[x], (characters[num1] &amp;gt;&amp;gt; x) &amp;amp; 1U);
	}

	gpio_put(SEVEN_SEGMENT_PINS[7], 1);
	sleep_ms(10);

	//for the second digit
	for(int x = 0; x&amp;lt;7; x++) {
		gpio_put(SEVEN_SEGMENT_PINS[x], (characters[num2] &amp;gt;&amp;gt; x) &amp;amp; 1U);
	}

	gpio_put(SEVEN_SEGMENT_PINS[7], 0);
	sleep_ms(10);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The two displays are multiplexed together, so the output pins for this loop are set using the &lt;code&gt;gpioput()&lt;/code&gt; function, cycling through the elements of the character with the &lt;code&gt;x&lt;/code&gt; variable and writing the binary values to the pins from the characters array using the command &lt;code&gt;(characters[num1] &amp;gt;&amp;gt; x) &amp;amp; 1U)&lt;/code&gt;. We then let this display remain on for a few milliseconds using the function &lt;code&gt;sleep_ms(10);&lt;/code&gt; before then setting the pin for the multiplexer &lt;code&gt;	gpio_put(SEVEN_SEGMENT_PINS[7], 0);&lt;/code&gt; and repeating the process for the other character with the &lt;code&gt;num2&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;The main function then pulls these two functions together, setting up the display and the counters that we will display. the counters are all initialised to zero, after we have called out &lt;code&gt;setup_display();&lt;/code&gt; function. The main &lt;code&gt;counter&lt;/code&gt; then cycles around 50 times, before we then increment &lt;code&gt;counter1&lt;/code&gt;, once counter 1 has reached 15 (displayed on the screen as e), we then increment the 2nd digit. This results in the counter incrementing approximately once per second.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main() {

		// setup the outputs for the display
		setup_display();

		//initalise the counters used to count up on the display

		uint counter = 0;
		uint counter1 = 0;
		uint counter2 = 0;

		// main loop for updating the display and updating the counter
		while (true) {
			set_display(counter1, counter2);
			counter++;

			if(counter&amp;gt;PAUSE_LENGTH){ counter = 0; counter1++;}
			if(counter1&amp;gt;15){ counter1=0; counter2++;}
			if(counter2&amp;gt;15){ counter2=0;}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next set is building the code i have written, this is a standard process which is well documented in the SDK documentation. As I tend to stick to the terminal when working on my Macbook, I just type the commands in which is a simple as:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; export PICO_SDK_PATH=../pico-sdk
 mkdir build
 cd build
 cmake ..
 make -j4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the code build successfully, we can then copy  it onto the Pico, with the PMod Board this is now easier and doesn&amp;rsquo;t require unplugging the Pico. Instead we can hold down the run button, then press the Boot button. the releasing the Run followed by Boot button and the Pico appears on as a removable drive ready for us to drop the &lt;code&gt;pico-pmod.uf2&lt;/code&gt; file onto it, at which point it begins running our program.&lt;/p&gt;
&lt;h1 id=&#34;what-next&#34;&gt;What next
&lt;/h1&gt;&lt;p&gt;The next challenge will be building some examples with PIO, working with a few more PMod type devices. One error that needs fixing, 5v and GND pin wrong way round, in order to match the Colorlite i5 FPGA Dev Board that I have. I&amp;rsquo;m planning on building a few custom PMod boards so I can develop and test both FPGA based examples and Pico Based examples, to improve my coding ability for coding on both.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bring a Raspberry Pi Cluster Back to Life</title>
        <link>https://jjhorton.co.uk/posts/piclusterreborn/</link>
        <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/piclusterreborn/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RPi2_case_external.png" alt="Featured image of post Bring a Raspberry Pi Cluster Back to Life" /&gt;&lt;p&gt;The raspberry pi cluster was built several years ago for some projects I was doing at the time, and experimenting with parallel computing. While the little raspberry pi&amp;rsquo;s were never going to keep up with a proper PC, they were great for experimenting with the principles of parallel computing, being it making use of the multiple CPU cores on each device or trying to spread the calculation over multiple raspberry pi&amp;rsquo;s. At thats all alongside the battle of dealing with the headache of moving data over a network efficiently.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Testing out some new GNU Octave code on my Raspberry pi cluster &lt;a href=&#34;https://twitter.com/hashtag/RaspberryPi?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#RaspberryPi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Cluster?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Cluster&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GNUOctave?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GNUOctave&lt;/a&gt; &lt;a href=&#34;https://t.co/c9OT9g9Ijb&#34;&gt;pic.twitter.com/c9OT9g9Ijb&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/715274998190116864?ref_src=twsrc%5Etfw&#34;&gt;March 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;After a couple of years on off experimenting with the raspberry Pi&amp;rsquo;s, when we ,moved to our new flat they ended up sat on the home network, and being used for odd jobs, one even had a old external hard drive attached to provide some Network Attached Storage when I need to move files around. After a reorganisation of the home office they need to find a new home, but having never been put in any sort of case they were not very portable, held together by some velcro.&lt;/p&gt;
&lt;p&gt;Having recently purchased an Ender3 3D printer at the start of the year, it seemed like a good use for the printer to build something a bit more rugged for the Raspberry Pi&amp;rsquo;s to live in. Having a quick look on &lt;a class=&#34;link&#34; href=&#34;https://www.thingiverse.com/thing:2084736&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thingevers&lt;/a&gt;, I came across the Six Inch Library, these cases are all designed to fit into a &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;six inch rack&lt;/a&gt; mount that is completely 3D printable.&lt;/p&gt;
&lt;p&gt;With a large selection of cases available, I had no problem in finding a suitable couple for both the Raspberry Pi&amp;rsquo;s and the power supply. Although I decided that there could be some small improvements made to make they more suitable for what I was trying to do. A couple of problems I had always had with my cluster was trying to keep a tab on the basic information for each of the Pi&amp;rsquo;s. Information such as Ip address, Memory usage and temperature, and I had always wanted to work out how to attach a screen to one of them to give me a health check at a glance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_screen.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As each of the Pi&amp;rsquo;s was going in there own case, I went hunting for some displays a could try and mount on the front of each of the cases, and found some small OLED screen on EBay, which gave me 4 lines of text. This was more than enough to display the information I was looking for, I just had to make a custom font panel from the six inch library.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_Front_outside.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_Front_inside.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The Six Inch Library is written in OpenSCAD, which worked well for me, as its programming interface combined with a quick hunt on google allowed me to be able to cut the hole of the screen and build a slot for it to sit in behind, so it could be slotted in without the need for lots of screws. It took 3 attempts to get it to all to fit together correctly, having messed up the measurements and then not allowed enough space to clear the Raspberry pi sitting behind it in the case, and getting the wires from the display round to the GPIO pins.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_case_internal.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Having got this together, all that was left it to get the software running to display on the screens, thankfully the screens are very common and there is already a library for them to get it all up and running. The screens are the same as the adafruit ssd1306, and the &lt;a class=&#34;link&#34; href=&#34;https://learn.adafruit.com/adafruit-pioled-128x32-mini-oled-for-raspberry-pi/usage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adafruit examples&lt;/a&gt; and even included example displaying the information I was looking for. Having swapped out the Disk usage for the temperate and added the CPU frequency all was complete for the Raspberry Pi&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_case_external.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Adding the python to the crontab to run at reboot, so the display come up when the cluster is powered on, and the code running in a loop to keep it updated it was job done.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My 3D printer has been busy the last couple of weeks, printing cases for my old Raspberry Pi 2B cluster that I&amp;#39;m bringing back to life &lt;a href=&#34;https://twitter.com/hashtag/raspberrypi?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#raspberrypi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/cluster?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#cluster&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/3Dprinting?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#3Dprinting&lt;/a&gt; &lt;a href=&#34;https://t.co/xJ0SoTG4NS&#34;&gt;pic.twitter.com/xJ0SoTG4NS&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/1235334229984243712?ref_src=twsrc%5Etfw&#34;&gt;March 4, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;Now that it is completely assembled as a single unit, I can hopefully move it around a bit easier,  I&amp;rsquo;m hoping to spend some time revisiting some of my old projects I once used the cluster for and see how much more performance I can get out of it now I understand what i&amp;rsquo;m doing with Python a bit more.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Octave on my Raspberry Pi Cluster</title>
        <link>https://jjhorton.co.uk/posts/octave-on-my-raspberry-pi-cluster/</link>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/octave-on-my-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Octave on my Raspberry Pi Cluster" /&gt;&lt;p&gt;The main aim of building my Raspberry Pi Cluster was so that I could run
octave code on it, now I&amp;rsquo;m not expecting to break any records, but
ideally I want some performance. The best way I found to do this was
with the parallel&amp;rsquo;s package.&lt;/p&gt;
&lt;p&gt;With octave and the parallels package installed on each of the Raspberry
Pi 2&amp;rsquo;s in the cluster, I setup SSH so that no passwords are required
between the nodes. The first step in running the octave scripts was to
launch the parallels server on each of the  3 other Raspberry Pi&amp;rsquo;s that
I&amp;rsquo;m not connected to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt;!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;HOSTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rpi1 rpi2 rpi3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SCRIPT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cd Documents/Octave; octave -q clusterStart.m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; HOSTNAME in &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;HOSTS&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh -l &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;USERNAME&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;HOSTNAME&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\${SCRIPT}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This launches Octave and runs the following script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pkg load parallel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;addpath&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\~/Documents/Octave/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;addpath&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\~/Documents/Octave/Server&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pserver
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With each of these raspberry pi&amp;rsquo;s now running on the 3 other Pi&amp;rsquo;s it is now possible to send simple commands to them and get the results returned to the first Pi. The octave script that I used to test this out is bellow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clear&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pkg load parallel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;hosts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi0&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi1&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi2&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi3&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;sockets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; connect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;hosts&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;psum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; zeros&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1,3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[1:10\]),sockets(1,:))&amp;#34;&lt;/span&gt;, sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[11:20\]),sockets(1,:))&amp;#34;&lt;/span&gt;, sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[21:30\]),sockets(1,:))&amp;#34;&lt;/span&gt;,sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;psum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;scloseall&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets up the sockets for all 4 Raspberry Pi&amp;rsquo;s including the one the code is run on (rpi0) and the 3 that are running the pserver (rpi1, rpi2 and rpi3). The code then sends commands as strings to be evaluated at the pserver&amp;rsquo;s, which in this case are simple summation&amp;rsquo;s, and then return the values to rpi0, which adds the 3 values they generated together and displays it on the screen.&lt;/p&gt;
&lt;p&gt;The next step for me in this project is to get it running my Twitter Sentiment Code.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Over clocking my Raspberry Pi cluster</title>
        <link>https://jjhorton.co.uk/posts/over-clocking-my-raspberry-pi-cluster/</link>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/over-clocking-my-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Over clocking my Raspberry Pi cluster" /&gt;&lt;p&gt;With my newly created raspberry pi cluster being made out of the
Raspberry Pi 2, I don&amp;rsquo;t want it to lag to far behind the freshly
announced Raspberry Pi 3. To try and keep up with the new hardware
without replacing all of my Pi&amp;rsquo;s I devices it was worth a go at
overclocking them.&lt;/p&gt;
&lt;p&gt;Overlooking my Pi&amp;rsquo;s should allow them to work a bit quicker, but it will reduce power efficient and increase the tempurature that the cluster runs at. Overclocking can be a dangerous game, as if you run the Pi&amp;rsquo;s to hard you could easily cause hardware damage to the boards if the tempurature gets to high. Thankfully there are plenty of &lt;a class=&#34;link&#34; href=&#34;http://haydenjames.io/raspberry-pi-2-overclock/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;guides on the
Internet&lt;/a&gt; to talk you through sure tasks which is what I used.&lt;/p&gt;
&lt;p&gt;All you have to do is edit the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo nano /boot/config.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then added the following at the end of the file, which increase not
only the clocking frequency, but also the sdram and core frequency. It
also enables over voltage and sets an upper temperature limit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;arm_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;sdram_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;core_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;over_voltage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;temp_limit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#Will throttle to default clock speed if hit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After which all there is to do is reboot the Raspberry Pi with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now time to test some code of my cluster and see what the performance increase is&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Building a Raspberry Pi Cluster</title>
        <link>https://jjhorton.co.uk/posts/building-a-raspberry-pi-cluster/</link>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/building-a-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Building a Raspberry Pi Cluster" /&gt;&lt;p&gt;I&amp;rsquo;ve had a long standing interest in Parallel Processing, and then a few months ago I came across Octave and its parallel package. Octave is very similar to MATLAB that I use every day, and for the most part basic MATLAB code works out of the box in Octave.&lt;/p&gt;
&lt;p&gt;I used this as the perfect excuse to build myself a mini-cluster computer&amp;hellip;&lt;/p&gt;
&lt;p&gt;The mini cluster needed to be cheep, so I based it on the raspberry pi. After reading around on the internet it became apparent that this has been done before, so I decided that I needed to give it a go and build my own cluster and run some octave code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/IMG_1223.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Here is the result of my work, all held together with velcro with the operating system installed on each unit. I based the setup on &lt;a class=&#34;link&#34; href=&#34;http://makezine.com/projects/build-a-compact-4-node-raspberry-pi-cluster/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; tutorial, but instead of using a Usb Ethernet adapter on the controller I used a WIFI adapter so it could be placed anywhere around the house.&lt;/p&gt;
&lt;p&gt;Things I need to do next are, installing and setting up Octave, also looking to see if I can make a cable to power the network switch from the spare port USB hub, so that the cluster can run of a single plug socket.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
