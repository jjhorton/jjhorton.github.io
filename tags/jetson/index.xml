<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jetson on James Horton</title>
        <link>https://jjhorton.co.uk/tags/jetson/</link>
        <description>Recent content in Jetson on James Horton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Mon, 22 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/tags/jetson/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nvidia Jetson Nano 2Gb Testing</title>
        <link>https://jjhorton.co.uk/posts/jetsontesting/</link>
        <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/jetsontesting/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Jetson_case_box.png" alt="Featured image of post Nvidia Jetson Nano 2Gb Testing" /&gt;&lt;p&gt;Now that I have the Jetson Nano all setup in a case, I wanted to test out a how well the GPU works on some simple problems. This post looks at my first test which looks at a simple method of calculating Pi, and looks at how quickly is can carry out those calculations.&lt;/p&gt;
&lt;p&gt;This method of calculating Pi is oftern refered to as the dart board method. This method relies on placing random number onto a square and then determining if that random number falls within a circle with a diameter that is the same size as the box or in the area outside of the circle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/2/20/MonteCarloIntegrationCircle.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Image from &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_integration#/media/File:MonteCarloIntegrationCircle.svg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By selecting two random numbers with are evenly distributed between a min and max, to be the x and Y coordinates, we can then calculate the distance from the centre of the circle using pythagorus theorem.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a%5e2&amp;#43;b%5e2=c%5e2&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Where our distance from the centre from the cicrle is c, and our randomly selected x and y co-ordinates a and b. This means that our distance from the centre of the circle is given by:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7bdistance%7d=%5csqrt%7bx%5e2&amp;#43;y%5e2%7d&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The next step is to see if this point falls within the circle, or in the area outside the circle. this is completed by comparing this distance from the centre of the circle with the radius of the circle. If this distance is less than the circle radius, then it is within the circle, and we count up how many times we get a value that falls inside the circle.&lt;/p&gt;
&lt;p&gt;We can the use the ratio of the number of points that we have found within the circle and the total number of test completed to approximate the value of pi. The area of the circle is defined as:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a_%7bcircle%7d=%7b%5cpi%7dr%5e2&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The area of the square is twice the radius of the circle, for each the x and y axis we have used for generating all our points is, therefor the area is&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7ba_%7bsquare%7d%7d=%7b%282r%29%7d%5e2&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;We can therefore calculate that the ratio in the area between the circle and the square is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%7b%5cpi%7dr%5e2%7d%7b%7b%282r%29%7d%5e2%7d&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This can be simplified to:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%5cpi%7d%7b4%7d&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Assuming that we have a sufficiently large number of points we can assume that the number of points which fall inside the circle is proportional to the total area of the square, so after rearranging we can then replace the areas with the number of points that fall within each:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7b%5cpi%7d=4%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This formula, with is relatively simple can allow us to compute the value of pi, which can be realised with python using numpy. The implementation, generates a random number between a width, and then calculates the distance from the centre, that this point is from the centre of the circle. This is then compared to the circles radius, and if it falls within the circle the total is implemented. The final value of Pi is then calculated when the main loop is finished.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import time

iterations = int(1e6)

totalIn = 0.0
width = np.power(2,15)

start = time.time()

for iter in range(iterations):
  x = np.random.random_integers(-width,width)
  y = np.random.random_integers(-width,width)

  dist = np.sqrt(np.power(x,2)+np.power(y,2))

  if dist&amp;lt;width:
    totalIn += 1


my_pi = 4 * np.divide(totalIn,iterations)
runtime = time.time() - start
print(&amp;#34;Pi is calculated as : %.10f&amp;#34; % my_pi)
print(runtime)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The accuracy of the value of Pi is highly linked to the number of iterations that are completed, as well as the number of bits used to calculate the final value. By varying the number of points we calculate with we can see the error reducing, the table bellow is for the code above, run on a Jetson Nano 2Gb.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Iterations&lt;/th&gt;
          &lt;th&gt;Pi Calculated&lt;/th&gt;
          &lt;th&gt;Run Time(s)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;3.0000000000&lt;/td&gt;
          &lt;td&gt;0.077&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1,000&lt;/td&gt;
          &lt;td&gt;3.0760000000&lt;/td&gt;
          &lt;td&gt;0.692&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10,000&lt;/td&gt;
          &lt;td&gt;3.1360000000&lt;/td&gt;
          &lt;td&gt;7.14&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;100,000&lt;/td&gt;
          &lt;td&gt;3.1518800000&lt;/td&gt;
          &lt;td&gt;69.6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1,000,000&lt;/td&gt;
          &lt;td&gt;3.1409400000&lt;/td&gt;
          &lt;td&gt;686&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The main thing we have control of is the number of iterations, and we can attempt to complete more iterations by optimising our code, the problem is the more iterations we do the longer is takes to complete, with 1,000,000 iterations taking 10 minutes we need to improve the execution time if we want to carry out more iterations.&lt;/p&gt;
&lt;p&gt;In Python Loops are relatively slow compared to other languages such as &amp;lsquo;c&amp;rsquo; and &amp;lsquo;c++&amp;rsquo;, this is due to the dynamically typed nature of python. Vectorising the calculation of the values, using Numpy helps to remove or limit the number of loops that need to be completed, and operations on vectors are generally more efficient in dynamically typed languages, and by avoiding context switching large efficiency gains can be found.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import time

test_points = int(1e9)
sample_size = int(1e6)
iterations = int(test_points/sample_size)*sample_size

count = np.array(0,dtype=np.float64)
width = np.power(2,15)

start = time.time()

max_value = np.array(width*width,dtype=np.float32)

for iter in range(int(iterations/sample_size)):
  x = np.random.random_integers(-width,width,sample_size)
  y = np.random.random_integers(-width,width,sample_size)

  result = np.less(np.add(x*x,y*y),max_value)
  count = count + np.sum(result)

pi_2 = 4.0 * np.divide(count,iterations)
runtime = time.time() - start

print(&amp;#34;Pi is calculated as : %.10f&amp;#34; % pi_2)
print(&amp;#34;Runs: %i&amp;#34; % iterations)
print(runtime)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach gives a significant improvement, we are now able to do the number of calculations that took over 10 minutes, in less than a second.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Iterations&lt;/th&gt;
          &lt;th&gt;Pi value&lt;/th&gt;
          &lt;th&gt;Run Time (s)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1,000,000&lt;/td&gt;
          &lt;td&gt;3.1449280000&lt;/td&gt;
          &lt;td&gt;0.28814268112182617&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10,000,000&lt;/td&gt;
          &lt;td&gt;3.1422772000&lt;/td&gt;
          &lt;td&gt;2.569852352142334&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;100,000,000&lt;/td&gt;
          &lt;td&gt;3.1415957200&lt;/td&gt;
          &lt;td&gt;26.24626588821411&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now making use of the unique of the Nvidia Jetson boards which is the GPU along with the 128 CUDA cores. Taking advantage of these features involves switching from Numpy which executes on arm core to using CUPY. The CUPY library is designed to be compatible with numpy, using the same syntax and function names but to be used to execute the commands on the GPU.&lt;/p&gt;
&lt;p&gt;While the syntax is almost identical between Numpy and CUPY, for the functions themselves, we actually need to deal with where the variables are located for the GPU version. Typically on a traditional Desktop PC the memory for the CPU and GPU are separate, and each time a variable needs to go between the two it has to be transferred over what is typically a PCIe link. This transfer takes time, but in the Jetson Boards the memory is shared between the CPU and the GPU, which means transfers are no longer a real issue but we still have the map the variables as ones that are able to be processed by the GPU as shown by the &amp;lsquo;cp.array()&amp;rsquo; commands, and then make that data available to Numpy and the CPU with commands such as &amp;lsquo;cp.asnumpy()&amp;rsquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import cupy as cp
import time

test_points = int(1e9)
sample_size = int(1e6)
iterations = int(test_points/sample_size)*sample_size

count = cp.array(0,dtype=cp.float64)
width = cp.power(2,15)

start = time.time()

max_value = cp.array(width*width,dtype=cp.float32)

for iter in range(int(iterations/sample_size)):
  x = cp.random.random_integers(-width,width,sample_size)
  y = cp.random.random_integers(-width,width,sample_size)

  result = cp.less(cp.add(x*x,y*y),max_value)
  count = count + cp.sum(result)

pi_2 = cp.asnumpy(4.0 * cp.divide(count,iterations))
runtime = time.time() - start

print(&amp;#34;Pi is calculated as : %.10f&amp;#34; % pi_2)
print(&amp;#34;Runs: %i&amp;#34; % iterations)
print(runtime)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apart from these memory management changes that code is broadly the same, so with these minor adjustment to make use of the GPU we can now get a roughly 5 times improvement in speed compared to the vectorised approach. The originally looped code took over 10 minutes to calculate one million iterations, which are now completed in just over half a second.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Iterations&lt;/th&gt;
          &lt;th&gt;Pi value&lt;/th&gt;
          &lt;th&gt;Run Time (s)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1,000,000&lt;/td&gt;
          &lt;td&gt;3.1428120000&lt;/td&gt;
          &lt;td&gt;0.536&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10,000,000&lt;/td&gt;
          &lt;td&gt;3.1412428000&lt;/td&gt;
          &lt;td&gt;0.952&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;100,000,000&lt;/td&gt;
          &lt;td&gt;3.1414888800&lt;/td&gt;
          &lt;td&gt;5.70&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1,000,000,000&lt;/td&gt;
          &lt;td&gt;3.1414574560&lt;/td&gt;
          &lt;td&gt;48.8&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These large improvements in speed, have allowed us to complete far more iterations in a shorter amount of time, and in terms of out algorithm we can see the improvements in the accuracy of Pi we are estimating. By the time we are calculating 1e9 values, we are getting pi correct to 4 significant figures. The question is are there any more options to improve the speed of our algorithm?&lt;/p&gt;
&lt;p&gt;One element that we skipped over is the size of the vectors that we are working with, for the above testing they were fixed at 1e6, without any real justification. This number was picked as an integer divide of the number of points was planning to test with, but could this be optimised, lets test a few Vector lengths with a fixed number of iterations at 1e8.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Vector Length&lt;/th&gt;
          &lt;th&gt;CPU Run Time (s)&lt;/th&gt;
          &lt;th&gt;GPU Run Time&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1e3&lt;/td&gt;
          &lt;td&gt;32.9&lt;/td&gt;
          &lt;td&gt;846&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2e3&lt;/td&gt;
          &lt;td&gt;21.3&lt;/td&gt;
          &lt;td&gt;420&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5e3&lt;/td&gt;
          &lt;td&gt;14.4&lt;/td&gt;
          &lt;td&gt;176&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1e4&lt;/td&gt;
          &lt;td&gt;12.0&lt;/td&gt;
          &lt;td&gt;82.8&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2e4&lt;/td&gt;
          &lt;td&gt;11.7&lt;/td&gt;
          &lt;td&gt;44.2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5e4&lt;/td&gt;
          &lt;td&gt;12.2&lt;/td&gt;
          &lt;td&gt;19.2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1e5&lt;/td&gt;
          &lt;td&gt;12.0&lt;/td&gt;
          &lt;td&gt;10.9&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2e5&lt;/td&gt;
          &lt;td&gt;11.5&lt;/td&gt;
          &lt;td&gt;6.90&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5e5&lt;/td&gt;
          &lt;td&gt;10.7&lt;/td&gt;
          &lt;td&gt;5.60&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1e6&lt;/td&gt;
          &lt;td&gt;10.4&lt;/td&gt;
          &lt;td&gt;5.18&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2e6&lt;/td&gt;
          &lt;td&gt;10.2&lt;/td&gt;
          &lt;td&gt;5.01&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5e6&lt;/td&gt;
          &lt;td&gt;10.8&lt;/td&gt;
          &lt;td&gt;4.94&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1e7&lt;/td&gt;
          &lt;td&gt;10.6&lt;/td&gt;
          &lt;td&gt;5.04&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2e7&lt;/td&gt;
          &lt;td&gt;10.6&lt;/td&gt;
          &lt;td&gt;5.45&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2.5e7&lt;/td&gt;
          &lt;td&gt;10.6&lt;/td&gt;
          &lt;td&gt;6.62&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What we see is that the Run time for the CPU and GPU both hit plateau, with the GPU implementation twice as as the CPU for large vectors. In contrast we also find that for small vector sizes the CPU implementation is significantly fast than the GPU. The vector length of 2.5e7, was the largest size that could be fit in the memory of the Jetson (vectors bigger than this caused failed out of memory errors).&lt;/p&gt;
&lt;p&gt;This is shown that the Jetson Nano can extract some more performance, by making use of the CUPY library to leverage the GPU has given x2 speed up over the CPU vectorised code. The x10000 time speed up from the original looping code, shows that the structure of the algorithm needs to be optimised, before assessing the before on the hardware in question.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Nvidia Jetson case</title>
        <link>https://jjhorton.co.uk/posts/jetson2gbcase/</link>
        <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/jetson2gbcase/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Jetson_case_complete.png" alt="Featured image of post Nvidia Jetson case" /&gt;&lt;p&gt;Before Christmas I picked up a 2GB Jetson Nano to have a play with, I think these devices are interesting with the combination of an ARM processor and GPU. There have been devices like this before, and we even have a spare one at work in our Makerspace but I never found time to have an experiment with one. Now with extra time on my hands over winter with the joy of home working, and the recently released 2GB version for about &lt;a class=&#34;link&#34; href=&#34;https://www.okdo.com/p/nvidia-jetson-nano-2gb-development-kit-with-wifi-bundle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;£55&lt;/a&gt; meant it was time to have an experiment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_box.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Jetson Nano&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Once I had got to grip with the Jetson Nano, and &lt;a class=&#34;link&#34; href=&#34;https://courses.nvidia.com/certificates/a09ef4efea32411e9647c5f9e4f5a2c9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;completed&lt;/a&gt; NVidia&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://courses.nvidia.com/courses/course-v1:DLI&amp;#43;S-RX-02&amp;#43;V2/about&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Getting Started With AI on Jetson Nano&lt;/a&gt;, I started thinking about 3D printing a case, so that it wasn&amp;rsquo;t another devboard lost down the back of my desk in an anti-static bag. At first I found a lot of design&amp;rsquo;s on thingiverse, but many of these are targeted at the 4Gb version, which has more ports and uses a Dc jack to power it. I did &lt;a class=&#34;link&#34; href=&#34;https://www.thingiverse.com/thing:4649425&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;find an  one on thingiverse&lt;/a&gt; which I printed at first, although I wasn&amp;rsquo;t completely happy with this as a long term solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_online.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;3D Printed Case&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I decided to take a look at making 3D printing a case that would fit in with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Six Inch Rack Mount&lt;/a&gt; system. As I already have an number of raspberry Pi&amp;rsquo;s in this mini rack mount based system. My plan was that by modifying an existing OpenSCAD model so that I could fit The Jetson Nano in, and that put the correct ports so I would have suitable holes in the back panel. The Jetson Nano, while being bigger than the Raspberry PI 2&amp;rsquo;s that are housed within the same front print, the Jetson Nano fits easily within the same space, except in terms of height due to the large heat sink. To allow the Jetson to fit in the rack mount cabinets I had to use 3U of height (each U is 1.44cm), instead of the 2U in the raspberry Pi cases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;OpenScad Case&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack/blob/master/RackCabinets/sixinch_library.scad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Six Inch Library&lt;/a&gt; makes building up the components, using measurements taken from the Jetson Nano, very simple. Passing values for the size of the hole into a function that then builds the part which can then be exported as an STL, and then on to be 3D printed.&lt;/p&gt;
&lt;p&gt;The square holes for each of ports of the ports on the Jetson Nano is described as a point on the back of the case by the first two coordinates, then followed by the X and Y coordinates representing the size of the square hole to be cut out of the back of the case. The other key values as the height of the side screws, which mounts the back panel to the main cabinet, then the number of units or height which in this case is 3 for 3U.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-OpenSCAD&#34; data-lang=&#34;OpenSCAD&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sixinch_library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;square_hole&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;92.5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;74&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;round_hole&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;screw_top&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mm
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mm
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;back_plate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square_hole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round_hole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another key component is the placement of the screw holes in the main cabinet, for mounting the Jetson Board using the mounting screws, the positions are measured from the board and then mapped onto the round peg parts. I used the same M2.5 screws I use when mounting my raspberry Pi&amp;rsquo;s in there Rack Mount, so the peg dimensions were taken from that design in the Six Inch Library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-OpenSCAD&#34; data-lang=&#34;OpenSCAD&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sixinch_library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom_front&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;screw_side_front&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;round_peg&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cabinet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom_front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round_peg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side_front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Hole possitioning for mounting&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Getting these measurements alright took a couple of attempts, getting the tolerances correct so that the heights all lined up with the ports, as leaving enough room to actually plug all the cables in were all issues I had, but thankfully almost all were on the back panel, which is quick to produce on the 3D printer.&lt;/p&gt;
&lt;p&gt;The large Heat sink also give a possible indication of heat being an issue, this is already a bit of an issue in the Raspberry Pi Cases, but with the large heatsink, I decided to make use of a mesh front to the case. The mesh front was also available on thingevers, and allows a bit more airflow to the heatsink.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_inside.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Part assembled Case&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The mesh based panel is taken directly from the another &lt;a class=&#34;link&#34; href=&#34;https://github.com/pgrondek/SixInchRack/tree/master/RackCabinets/Mesh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github repositry&lt;/a&gt; which contains a number of mesh grids. I have made use of the 3U mesh grid, but I needed to modify the positions of the screws, to line up with where the screws are placed on the main cabinet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_complete.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Full Assembled Case&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;With the case all completed, all that is left to do is add some handles when i get some black filament, taking them from the library and start getting a rack together like my Raspberry Pi Cluster. Once its all together I plan to have a look at getting started with &lt;a class=&#34;link&#34; href=&#34;https://cupy.dev/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CUPY&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/rapidsai/cusignal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cuSignal&lt;/a&gt;, and see what is possible with these Jetson Nano Boards.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
