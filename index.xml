<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>James Horton</title>
        <link>https://jjhorton.co.uk/</link>
        <description>Recent content on James Horton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Mon, 31 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jjhorton.co.uk/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Neopixel Drinks Coaster</title>
        <link>https://jjhorton.co.uk/posts/rp2040_coaster/</link>
        <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/rp2040_coaster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/NeopixelCoaster_PCB.jpg" alt="Featured image of post Neopixel Drinks Coaster" /&gt;&lt;p&gt;This little project involved building something unnecessarily complex when there are many much cheaper options that would have done the job just fine. The reason for this was that my girlfriend likes the light up gin bottles from &lt;a class=&#34;link&#34; href=&#34;https://www.marksandspencer.com/ie/c/food/not-just-any-food/food-news/christmas-gin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Marks and Spencer&amp;rsquo;s&lt;/a&gt;, and I though there could be a better way to create my own, and if your going to have a Light up bottle, it is always going to be improved by having programable RGB LED&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;The design was to be simple, a drinks coaster made from a 10cm square PCB, which could be powered by one of the many USB-C chargers that we have round the house, with a number of RGB LED&amp;rsquo;s on the top, which could light up any bottle or glass when placed on top of it. To detect when a drink was placed on, I planned on using small switches on each corner, that a micro-controller on board, could then be triggered by to set the RGB colors of.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_sch.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_sch.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;kiCad Schematic for Rp2040 Coaster&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;kiCad Schematic for Rp2040 Coaster&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The design is a simple one that uses the parts I had readily available, given the on-going parts shortage, as a result the microcontroller is a RP2040, which seems massively overpowered but I have many at home and you have to use what is avalible today, but who needs a Duel Core processor to just drive a couple of LED&amp;rsquo;s? The LED&amp;rsquo;s are essentially Neopixels, the WS2812B LEDs, which I had a reel I purchased earlier in the year from Aliexpress, when I was building some little displays I used with the &lt;a class=&#34;link&#34; href=&#34;http://www.jjhorton.co.uk/posts/infraredsensorneopixel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thermal Sensor&lt;/a&gt;. Much of the rest of the design is based on the RP2040 &lt;a class=&#34;link&#34; href=&#34;https://datasheets.raspberrypi.com/rp2040/hardware-design-with-rp2040.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Reference design&lt;/a&gt;, so was quick to pull together using KiCad, and before you know it the PCB is off to be manufactured.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Render.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Render.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Render of the Rp2040 Coaster PCB&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Render of the Rp2040 Coaster PCB&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the PCB order, the next job was to add some sort of case or cover for the board, and protect it from the contents of the bottle which wuld be placed on top. For this I used OpenSCAD to produce a tight fitting cover which could be 3D printed. The Case makes use of a few simple shapes, producing a square with the shape of the PCB cut away, and by matching the dimensions closely I&amp;rsquo;m able to get a case the pushes onto the board.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-OpenSCAD&#34; data-lang=&#34;OpenSCAD&#34;&gt;
&lt;span class=&#34;nb&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;difference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);};&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;41.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6.61&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

     &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;47.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6.61&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

     &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;46.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6.61&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

     &lt;span class=&#34;nb&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6.61&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;cube&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OpenSCAD is great when you just want to assemble a few simple shapes pragmatically, but I found it difficult to use in this context building a more complex piece with elements that need to fit together. I might look at trying something like FreeCAD next time, as it might be better suited to my needs especially as the PCB can be easily imported into freecad to see how the shapes interact. Even with these issues, having a 3D printer at home means that even an error such as this can be quickly corrected and solved, although it seems wasteful taking 4 attempts to get a part to fit together well.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Bodge.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Bodge.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PCB with problems&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PCB with problems&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first revision of the PCB, was a bit of a fail, as after making a few late changes to the PCB, a power rail was added that went though the ground plane on the back of the PCB. I was able to bodge this, with a bit of thin wire and some careful cutting with a scalpel, to test the design, before making some quick corrections and then getting a fresh PCB made up. One advantage of this was it let me work on a case, and getting it to fit with the board I had made up which would have the same dimensions as the final board.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Neopixel_WithCase.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Neopixel_WithCase.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Asseembled PCB with the 3D printed cover &#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Asseembled PCB with the 3D printed cover&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The code for controlling the board is just based on the examples provided with the Pico Board, which provides the functionality to send a stream of RGB values, to the interface and select the LED to be turned on. The decision on if to turn the coaster on is based on the number of the switches that are not high, the Pin Numbers for the switches are stored in &lt;code&gt;BUTTON_PINS&lt;/code&gt;, and the first loop checks if they are high or low, the color that is then set is driven by the counter &lt;code&gt;my_test&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gpio_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUTTON_PINS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	     &lt;span class=&#34;n&#34;&gt;my_test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;//Set the center LED&amp;#39;s
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
	   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		     &lt;span class=&#34;n&#34;&gt;setcenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	     &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;179&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
			 &lt;span class=&#34;n&#34;&gt;setcenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RGB_LOOKUP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;set_colour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the case where at least 3 of the buttons have triggered, the color is set from an array of values in &lt;code&gt;RGB_LOOKUP&lt;/code&gt;, this contains the 180 RGB values that create the smooth color transitions, with the next value in the lookup table being selected after each loop, before resetting once all values have been used.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Complete.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/NeopixelCoaster_Complete.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;The completed RP2040 powered coaster&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;The completed RP2040 powered coaster&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the code completed, the PCB and case assembled we can bring it all together, and see what we have. I&amp;rsquo;m happy with the results, and the code, PCB and case can all be found on Github if you want to have a look. &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Rp2040_Coaster&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gihub.com/jjhorton/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Sometimes you think your Gin bottle needs RGB lights, and you end up building something unnecessary like this &lt;a href=&#34;https://twitter.com/hashtag/electronics?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#electronics&lt;/a&gt; &lt;a href=&#34;https://t.co/q5HyRK8X9F&#34;&gt;pic.twitter.com/q5HyRK8X9F&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/1488206830568419331?ref_src=twsrc%5Etfw&#34;&gt;January 31, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;The changing colors work well on the textured glass of this bottle very well, the next task is to work out how I could make it battery powered&amp;hellip;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Christmas Countdown</title>
        <link>https://jjhorton.co.uk/posts/christmascountdown/</link>
        <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/christmascountdown/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/ChristmasCountdown_OpenSCAD.jpg" alt="Featured image of post Christmas Countdown" /&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Initial.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Initial.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Christmas Countdown on the Whiteboard&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Christmas Countdown on the Whiteboard&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Using my 7 segment display I wanted to build a Christmas countdown, this was just going to use the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/seven-segment-display-pmod-board.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PMod Display&lt;/a&gt; that I had around, and then run from one of the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 boards&lt;/a&gt; that I built earlier this year. As I wanted a count down that is frequently updating, I chose to use the countdown in seconds, as this for the month of December easily fits within the seven segments available.&lt;/p&gt;
&lt;p&gt;The code that runs on the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.com/products/rp2040/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040&lt;/a&gt; relies on a serial link as there is no real time clock on the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 boards&lt;/a&gt;. We can also reuse some of the libraries that I use to drive the seven segment display, this means the main function is relatively simple, to run on the RP2040, which takes the count down calculated on a main computer and takes it from the serial link and puts it onto the display.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;quot;pico/stdlib.h&amp;quot;
#include &amp;quot;pico/stdio_usb.h&amp;quot;

// Custom 7 Segment Display
#include &amp;quot;My7Seg.h&amp;quot;

int main() {
	//initalise the display
	My7Seg Display(0,2);
	Display.enable();

	int seconds_left = 0;
	char buffer[8];
	char countdown_str [8];

	stdio_init_all();
	printf(&amp;quot;Countdown Clock starting!\n&amp;quot;);
	Display.setValue(double(99999999), 0);

	while(1){
		buffer[0] = getchar_timeout_us(0);

		if (buffer[0] != 0){
			if (buffer[0] == &#39;a&#39;){

				for(int i = 0; i&amp;lt;8; i++){
					buffer[i] = getchar_timeout_us(0);
				}
				seconds_left = strtof(buffer, NULL);
			}
		}
		Display.setValue(double(seconds_left), 0);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The actually calculation of the number of seconds takes place on a &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.com/products/raspberry-pi-zero-w/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Zero&lt;/a&gt;, this takes the current time which it gets from its Wifi Network connection, and then calculates the difference between the current time and the number of seconds until Christmas day, and sends it over the serial link to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/Pico_Pmod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 Board&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import serial
import io
from datetime import *

# /dev/tty.usbmodem1101 115200

ser = serial.Serial(&#39;/dev/tty.usbmodem1101&#39;)  # open serial port
sio = io.TextIOWrapper(io.BufferedRWPair(ser, ser))

while(1):
	now = datetime.now()
	thisyear = now.year
	xmas = datetime(thisyear,12,25)

	if now &amp;lt; xmas:
		delta = int((xmas - now).total_seconds())
	else:
		delta = 0

	my_str = str(&#39;a&#39;+ str(delta))
	my_str.ljust(9, &amp;quot;.&amp;quot;)

	sio.write(my_str)
	sio.flush()

ser.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_OpenSCAD.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_OpenSCAD.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;OpenSCAD Case design&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;OpenSCAD Case design&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the main coding element taken care of the next task is building the case for the PCB&amp;rsquo;s, I wanted to be able to mount the two boards together, and be able to attach the whole setup to my whiteboard, for the I created a simple case, which has holes in the back for placing some small magnets, and then holes in the front for mounting the PCB&amp;rsquo;s on the front.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_CaseBack.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_CaseBack.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Case Mounting magnets&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Case Mounting magnets&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This simple case provides an effective way of being mounted up on the Whiteboard, although now I am finally getting round to writing this all up, it is several days past Christmas so until next December it will have to wait until then, unless I can find a new date to countdown until.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Zero.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/ChristmasCountdown_Zero.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Counter hits Zero&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Counter hits Zero&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The code used to create this board, and the code for the case will be available &lt;a class=&#34;link&#34; href=&#34;https://github.com/jjhorton/RP2040_Countdown&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Designing PCB Filters using MATLAB</title>
        <link>https://jjhorton.co.uk/posts/matlabpcbfilters/</link>
        <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/matlabpcbfilters/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/MatlabFilter_Assembled.jpg" alt="Featured image of post Designing PCB Filters using MATLAB" /&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mathworks.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mathworks&lt;/a&gt; released the RF PCB Toolbox with the &lt;a class=&#34;link&#34; href=&#34;https://uk.mathworks.com/help/rfpcb/release-notes.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;latest release&lt;/a&gt; of MATLAB, R2021B, this toolbox allows the creation and visualisation of &amp;ldquo;Transmission lines, Couplers, Splitters, Filters, and More&amp;rdquo;, this was something that I wanted to a go at particularly the design of the filters. These filters that are just made of PCB traces have always fascinated me and given the tools that should allow me to design them, I decided to give it a go. I&amp;rsquo;ve always though of RF design as a bit of a dark art, and as someone who spends a lot of time around Software Defined Radios in my day job, I find the more I know the less I truly understand, so being able to create some filters with just a few lines of code seemed like a great idea.&lt;/p&gt;
&lt;p&gt;The filter I decided to have a go at is one to work in the 2.4GHz ISM band, centred at 2440MHz, with a pass band of 80MHz, then as much stop band attenuation as possible. After having a look though the documentation I decided to have a go at the Hairpin filter.&lt;/p&gt;
&lt;p&gt;From the examples in the documentation for the toolbox which walk you though building the filter, I built myself a script with all the user configurable user configurable variables at the start. We begin by defining these parameters that we are going to use in our filter implementation, this includes variables such as our filter order &lt;code&gt;n&lt;/code&gt; and then specific properties such as the substrate and conductor that will make up our filter. In my case here as i&amp;rsquo;m looking to build the filter on a standard standard PCB, we are setting these variables based on there spec sheet, for FR4 and copper rather then more expensive options they default to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Ripple&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;BandWidth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Z0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;linspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1500e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3000e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;601&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EpsilonR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.6e-3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dielectric&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&amp;#34;&lt;span class=&#34;n&#34;&gt;FR4&lt;/span&gt;&amp;#34;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EpsilonR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EpsilonR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;metal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&amp;#34;&lt;span class=&#34;n&#34;&gt;Copper&lt;/span&gt;&amp;#34;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all these high level variables defined, I can then look to start building up my filter object with them, and then calling the filter design function. The filter design will generate a filter that matches my design requirements, and output it to the filter object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filterHairpin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FilterOrder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Substrate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conductor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;design&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2440e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;FBW&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BandWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;RippleFactor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ripple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this filter object we can now start to explore the filter design that has been created, in my case the first thing I wanted to see was what the filter actually looked like, to do this you just simply use the &lt;code&gt;show(filter);&lt;/code&gt; command, which generates a plot with a 3D visulisation of the filter which has been designed, as shown bellow.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Design_Matlab.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Design_Matlab.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Matlab Filter design plot&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Matlab Filter design plot&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The next big question is how well is this filter actually going to work, for that I wanted to look at the gain of the filter at different frequencies, for this we need to generate the s-parameters for this design, and the plot the result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span class=&#34;n&#34;&gt;spar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sparameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;rfplot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command take a while to run, as I have set this up with it running are 601 different frequency points to produce a high resolution plot, with the test points stored in the variable &lt;code&gt;f&lt;/code&gt;, but this helps to produce a graph which is shown bellow with our simulated performance.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_2440_3.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_2440_3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Simulated Frequency Response&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Simulated Frequency Response&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The next plot is the Current Distribution, i&amp;rsquo;m not really sure how you interpret this plot, but it does look cool, and one day I might look back at this post and actually undersatnd what it is actually telling me.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Current.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Current.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Current Plots&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Current Plots&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With this 3rd order Hairpin filter designed in MATLAB, the next stage is where you export it, they way of doing this which is given in the documentation is to export to gerbers. this seemed like a great option at first look but I soon came up with some issues with it, the first is this is designed to generate Gerber files and send them straight of for manufacture, and thats not what I wanted to do, the second issue I found was I couldn&amp;rsquo;t find a way to export the filter design in a way that I could import it into KiCAD as a component footprint I could use on a PCB design.&lt;/p&gt;
&lt;p&gt;My way round this was to export the gerbers, and then import the Gerbers into kiCAD and edit them there in PCBNew, to export the filter it is just the case of running a couple of simple lines of code in MATLAB&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pcbComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCBServices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PCBWayWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Filename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;Filter_2440MHz_3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCBConnectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SMAEdge_Samtec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCBConnectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SMAEdge_Samtec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EdgeLocation&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;west&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ExtendBoardProfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EdgeLocation&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;east&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ExtendBoardProfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gerberWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It actually took me a long time to work out how to add the connectors, and I&amp;rsquo;m not sure if it the correct way of adding the SMA connectors, but as I wanted an SMA on each side of the board this seemed the only way I could work out how to add them. The N-Type connectors worked as expected but I generally work with SMA at home. I had to disable the &lt;code&gt;ExtendBoardProfile&lt;/code&gt; as this kept producing boards with area&amp;rsquo;s of the PCB Filter missing with the connectors floating away from the PCB in the resulting Plots and gerber files. I had to add in a port line length to and from the filter with &lt;code&gt;filter.PortLineLength = 0.006;&lt;/code&gt; to force the designed filter to put the connectors where i wanted and stop MATLAB from placing the SMA&amp;rsquo;s ground connection within the filter. The issues like this all seemed to be a bit buggy, typical early release problems, but given this is the first release they will hopefully improve with time.&lt;/p&gt;
&lt;p&gt;With the output files generated I then opened loaded the Gerber files into KiCad&amp;rsquo;s Gerber Viewer and imported the layer into PcbNew, this allowed me to add my own custom description text and logos onto the board, getting it ready to be sent of to be manufactured. one problem I did find at this stage, is that some random copper blocks appeared over the SMA connectors, which I removed, which I don&amp;rsquo;t think should have been added.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_PCBs.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_PCBs.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Red PCB&amp;rsquo;s from JLCPCB&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Red PCB’s from JLCPCB&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With all that sorted, I added my designs to my filters GitHub repo and ordered the PCB using the Gerber files that were generated by KiCAD. Once the PCB&amp;rsquo;s had arrived from JLCPCB about a month after I had ordered, it was time to add some SMA connectors and give them a test.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilterSoldering.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilterSoldering.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Soldering the SMA Connectors&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Soldering the SMA Connectors&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using a NanoVNA to test them out, while not as good as a proper Network Analyser, but given the Nano VNA cost £60 it provides a great way of being able to get a good idea of there performance of these little filters at home.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Testing.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Testing.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Testing with Nano VNA&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Testing with Nano VNA&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The NanoVNA can be used with PC based software, such as i&amp;rsquo;m using bellow, which is much easier to interact with rather than the tiny screen, though this interface I can also calibrate the results, and use the s-parameter menu, to take measurements of each of the filters, which can be stored to S-parameter files that can be imported into MATLAB for analysis.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_nanoVNA_plot_2440_3.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_nanoVNA_plot_2440_3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;VNA View showing the measurements from 3rd order filter&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;VNA View showing the measurements from 3rd order filter&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The main test here is if the filters that I have make actually match the simulation, so the best way to assses them is to compare the filter gain from 3 of the real thing and the Matlab Simulation to see if they match, and well there is a bit of a difference, as we can see bellow for the 3rd order filter.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_measured_2440_3.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_measured_2440_3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Measured Filter response&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Measured Filter response&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The 3rd order filter is almost close to what is expected, but with the pass band pushed to a lower frequency, and a wider pass band, the attenuation of the filter at frequencies above the designed pass band is actually similar to what is expected. With it producing a similar ammount of attenuation, with a similar roll of to the simulation.&lt;/p&gt;
&lt;p&gt;We can also look at the results for the 5th Order Filter, which also shows a lot of similar characteristics, with the roll of at both high and low frequencies appearing to match the simulation, with the exception of the pass band being shifted to lower frequencies.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_measured_2440_5.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/MatlabFilter_Frequency_response_measured_2440_5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;5th Order filter results compared with simulated&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;5th Order filter results compared with simulated&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The fact the the results are both consistent between each of the types of filter and example of the filters produces similar results, make me think the is a systematic problem here. I think the issue point to there being a design error, and there are a couple of possible causes, the first of which is the PCB manufacturing. The PCB&amp;rsquo;s are low cost models costing just $2, and at that price accuracy is limited and this comes in more forms than one. The first is in terms of the accuracy of the PCB traces themselves, and then of the material used in the PCB&amp;rsquo;s themselves. One key parameter used in the PCB manufacture and filter design, this is the dielectric constant, which JLCPCB gives as &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com/capabilities/Capabilities&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;4.5 for a double sided PCB&lt;/a&gt;, which is typically a useful number to use but unfortunately this &lt;a class=&#34;link&#34; href=&#34;https://hackaday.io/project/158175-measuring-the-effective-permittivity-of-pcbs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;value actually varies with frequency&lt;/a&gt; which makes it more challenging to pick what to use when just working with standard FR4, this is not a problem if you are using a higher quality material, but when working on a budget there are limitations.&lt;/p&gt;
&lt;p&gt;The next stage is experiment with simulating the filters that were originally created, and to see if by changing the dielectric constant I can match up the simulation with the measured results. this would mean that I could have a go at re-creating the filters with a corrected value for dielectric constant at 2.45GHz, when having a second attempt at building some filters.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Seven Segment Display PMod Board</title>
        <link>https://jjhorton.co.uk/posts/sevensegmentdisp/</link>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/sevensegmentdisp/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/SevenSegment_complete.jpg" alt="Featured image of post Seven Segment Display PMod Board" /&gt;&lt;p&gt;Ive always wanted to build a severn segment display, there is something about the old school style displays that it is hard to beat to display random numerical data like in &lt;a class=&#34;link&#34; href=&#34;https://www.thelegendofq.co.uk/encoder.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the movies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The 7 Segment display that I decided to use, comes with 4 digits per display, and I was looking to combine two per PMod Board, with 8 LED per segment, we don&amp;rsquo;t have enough pins to be able to control them all. An example of the maximum number of displays that can be controlled by a single PMod, is the display that I got with my &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iceBreaker FPGA&lt;/a&gt; which has two digits, and removes the decimal point to allow multiplexing between the two displays.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Thankfully there are a large number of solutions available to solve this problem, one of which are a range of dedicated chips controlled over a serial link to set seven segment displays.&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;ldquo;images/GN_Semic_GN1640.png&amp;rdquo; width=&amp;ldquo;350 &amp;gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Devices such as the &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GN Semic GN1640&lt;/a&gt; which is the chip I decided to tag onto an order I was already placing at &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LCSC Components&lt;/a&gt;, at just £0.30 it seemed worth giving it a go. From what I had seen online these components were listed as being very similar to a number of other devices which are listed by other manufactures with similar part numbers such as TM1640, which appears to have a identical datasheet but with the advantage of being available in English.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The circuit for these &lt;a class=&#34;link&#34; href=&#34;https://lcsc.com/product-detail/LED-Display-Drivers_GN-Semic-GN1640_C265478.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GN1640&lt;/a&gt; chips is relatively simple, with just two input needing to come over the PMod connector, these are a clock signal and a data signal. The circuit for the Seven Segment displays is also relatively simple using a common cathode configuration, which matched my Seven Segment Displays I picked up from &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.co.uk/ProductDetail/859-LTC-5723HR&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mouser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The boards were laid out so that they would fit within the maximum 10x10cm limits of the &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLC PCB&lt;/a&gt; 2 Layer PCB offer, the issue with this is that each of the displays was 5cm long, taking up the whole length of the PCB, but with all the control pins for the displays being in the centre of each display it was simple to mount the PCB with an overhang at one end leaving room for the PMod connector. The rest of the PCB is a simple 2 layer board, that was designed in KiCad.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;With the PCB&amp;rsquo;s made up, the next challenge was getting some software built up which allowed it to interface with one of my PMod Boards, to start with I used to the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/rp2040-pmod-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 PMod boards&lt;/a&gt; that I had already made. This helps to simplify building up a simple example, as I can use a bit bashing approach to get a simple example.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The TM1640 Data Sheet provides a good description of the serial interface, so we can start to build up our functions to control the display, by setting the clk and serial pins either high or low, adding in the required delay as set out in the datasheets timing diagram.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void enable()
{
			//command to turn on the display
			int command1[] = {1,1,1,1,0,0,0,1};
			//initallisation
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,0);
			sleep_ms(0.2);
			//send the bits
			for(int i=0; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,command1[i]);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}
			//end the transmission
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,1);
			sleep_ms(0.2);
			gpio_put(pin_data,1);

			sleep_ms(10);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the display enabled I was then able to start sending data, this follows a similar design pattern with a function taking in the address and data, to trigger a series of short delays followed by setting the clock and data pins either high or low to transmit the data.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void txData(uint8_t pos, uint8_t data)
{
			uint8_t addr = 0b11000000 + pos;

			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,0);
			sleep_ms(0.2);

			for(int i=0; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,(addr &amp;gt;&amp;gt; i) &amp;amp; 1U);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}

			for(int i=0 ; i &amp;lt; 8; ++i ){
				gpio_put(pin_data,(data &amp;gt;&amp;gt; i) &amp;amp; 1U);
				sleep_ms(0.2);
				gpio_put(pin_clk,1);
				sleep_ms(0.4);
				gpio_put(pin_clk,0);
				sleep_ms(0.2);
			}
			gpio_put(pin_data,0);
			sleep_ms(0.2);
			gpio_put(pin_clk,1);
			sleep_ms(0.2);
			gpio_put(pin_data,1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next challenge now I&amp;rsquo;m able to send data to the display using simple functions, is to look at turning the control functions into a C++ object, and then look at putting the display to a practical use. Another route to look at is setting up the PIO state machine to work with the display and possibly build a simple example that can also work with my &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ice Breaker FPGA&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Infrared Sensors and Neopixel screen</title>
        <link>https://jjhorton.co.uk/posts/infraredsensorneopixel/</link>
        <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/infraredsensorneopixel/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Thermal_NeoPixel.jpg" alt="Featured image of post Infrared Sensors and Neopixel screen" /&gt;&lt;p&gt;After perviously building a &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pmod-8x8-infrared-sensor.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PMod Infrared Sensor board&lt;/a&gt;, that was perviously streaming data over the serial link from the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/rp2040-pmod-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 PMod board&lt;/a&gt; to a PC which was using Python to display the data. The next step is to look at using a screen to display the data from the infrared Sensor.&lt;/p&gt;
&lt;p&gt;The screen that I looked to use is a custom board based on using the Neopixel LED&amp;rsquo;s that I have previously used with the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/rp2040-pmod-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 board&lt;/a&gt;, this allows a simple way to display the data, the screen which is also a 8x8 grid the same resolution as the sensor. The screens which I assembled last month, provide a great way to display the data, the first task is to look at connecting every together, then building a colour map to display the temperature values.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Sometime you can&amp;#39;t beat an evening spent playing with LEDs making patterns &lt;a href=&#34;https://twitter.com/hashtag/leds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#leds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/electronics?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#electronics&lt;/a&gt; &lt;a href=&#34;https://t.co/kchJTo22p3&#34;&gt;pic.twitter.com/kchJTo22p3&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/1432432328370962435?ref_src=twsrc%5Etfw&#34;&gt;August 30, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;The screen is essentially a string of 64 WS2821B LED&amp;rsquo;s, in an 8 by 8 grid, which by sending RGB values over a serial link between the LED&amp;rsquo;s we can build up a 2D picture. The data is transmitted to the LED&amp;rsquo;s using the PIO state machine from the Raspberry Pi Pico example. This linked in well with the serial data stream that comes from the 8x8 Thermal Sensor, to provide an image that updates quickly.&lt;/p&gt;
&lt;p&gt;The code for reading the values from the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pmod-8x8-infrared-sensor.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PMod thermal camera&lt;/a&gt; is the same as before, but rather than writing the data to the serial link, we now store the tempurate readings in a 64 value array, which we will then write to the NeoPixels.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Write the values to the Neopixel Array
for (int i = 0; i &amp;lt; (64); i++) {
	int value = 90 - (result[POS_LOOKUP[i]]*0.25);
	put_pixel(urgb_u32(RGB_LOOKUP[value][0]/BRIGHTNESS,RGB_LOOKUP[value][1]/BRIGHTNESS,RGB_LOOKUP[value][2]/BRIGHTNESS));
}
sleep_ms(100); //required delay at TX sequence
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Two important points here, is that we reduce the brightness, which divides each of the RGB values by the same number, keeping the colour the same but reducing the brightness of the LED&amp;rsquo;s overall, another element that also has to be correct for is rotating the input data so that it is displayed in the same position on the screen relative to the Sensor. to do this I use a array, &lt;code&gt;POS_LOOKUP&lt;/code&gt; which returns the thermal sensor value, for each of the LED positions.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// position lookup table to map the positions rotated 90 degrees
const int POS_LOOKUP[] = {0, 8,16,24,32,40,48,56,
						1, 9,17,25,33,41,49,57,
						2,10,18,26,34,42,50,58,
						3,11,19,27,35,43,51,59,
						4,12,20,28,36,44,52,60,
						5,13,21,29,37,45,53,61,
						6,14,22,30,38,46,54,62,
						7,15,23,31,39,47,55,63};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The values for the image we create, are based on a static colour-map that is included in the main file, with the value input returning the appropriate colour for that temperature.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Lookup table the colourmap
const int RGB_LOOKUP[][3] = {{255,14,240},{255,13,240},{255,12,240},{255,11,240},
							{255,10,240},{255,9,240},{255,8,240},{255,7,240},
							{255,6,240},{255,5,240},{255,4,240},{255,3,240},
							{255,2,240},{255,1,240},{255,0,240},{255,0,224},
							{255,0,208},{255,0,192},{255,0,176},{255,0,160},
							{255,0,144},{255,0,128},{255,0,112},{255,0,96 },
							{255,0,80 },{255,0,64 },{255,0,48 },{255,0,32 },
							{255,0,16 },{255,0,0  },{255,10,0 },{255,20,0 },
							{255,30,0 },{255,40,0 },{255,50,0 },{255,60,0 },
							{255,70,0 },{255,80,0 },{255,90,0 },{255,100,0},
							{255,110,0},{255,120,0},{255,130,0},{255,140,0},
							{255,150,0},{255,160,0},{255,170,0},{255,180,0},
							{255,190,0},{255,200,0},{255,210,0},{255,220,0},
							{255,230,0},{255,240,0},{255,250,0},{253,255,0},
							{215,255,0},{176,255,0},{138,255,0},{101,255,0},
							{62,255,0 },{23,255,0 },{0,255,16 },{0,255,54 },
							{0,255,92 },{0,255,131},{0,255,168},{0,255,208},
							{0,255,244},{0,228,255},{0,212,255},{0,196,255},
							{0,180,255},{0,164,255},{0,148,255},{0,132,255},
							{0,116,255},{0,100,255},{0,84,255 },{0,68,255 },
							{0,50,255 },{0,34,255 },{0,18,255 },{0,2,255  },
							{0,0,255  },{1,0,255  },{2,0,255  },{3,0,255  },
							{4,0,255  },{5,0,255 }};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this colour map we can now start creating images on the NeoPixel based screen from the thermal sensor, which are easy to understand.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Thermal_NeoPixel.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Thermal_NeoPixel.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The next stage is to look at getting my head around implementing a similar thing on the my FPGA boards, on either the &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;colorlite i5&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iceBreaker&lt;/a&gt; boards.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RP2040 PMod PCB</title>
        <link>https://jjhorton.co.uk/posts/rp2040_pmod/</link>
        <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/rp2040_pmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/rp2040pmod_blankpcb.jpg" alt="Featured image of post RP2040 PMod PCB" /&gt;&lt;p&gt;Having perviously built myself a &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico PMod Board&lt;/a&gt; around the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&lt;/a&gt;, I wanted to take this to the next level, and build myself a few boards from scratch. So once the orders went live for the RP2040 microcontroller a few months ago, I ordered some, and then did nothing with them for a while.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/rp2040pmod_chips.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_chips.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Like many people, I seem to end up with more ideas than time and it took me a little while to get around to this one. What I was looking to create was a simple board with a USB-C connector for my PC and 3 PMod Ports based around the RP2040, I settled on a form factor similar to the &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/icebreaker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IceBreaker FPGA&lt;/a&gt; board I have used in the past. This wasn&amp;rsquo;t for any particular project in mind, but I had enjoyed playing with my Pico PMod Boards so was looking to take it to the next level and improve my PCB building ability along the way.&lt;/p&gt;
&lt;p&gt;The boards themselves pretty much follow the &lt;a class=&#34;link&#34; href=&#34;https://datasheets.raspberrypi.org/rp2040/hardware-design-with-rp2040.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hardware guidelines&lt;/a&gt;, from the &lt;a class=&#34;link&#34; href=&#34;https://datasheets.raspberrypi.org/rp2040/rp2040-datasheet.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040 Datasheet&lt;/a&gt; and the supporting documents, using the recommended parts. One thing I did decide that I wanted, was both a Run and Boot select button, as I found these very useful for working with the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pico PMod Board&lt;/a&gt; over USB. The boards were designed using KiCAD and I had them made by &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/rp2040pmod_solderpaste.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_solderpaste.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;RP2040 PMod Board ready for componts to be hand placed&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;RP2040 PMod Board ready for componts to be hand placed&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first set of boards arrived in a couple of weeks, but after building up my first one I hit a few problems, the first was I was missing a few resistor values, so I had to bodge my way around those. I then hit an issue with the USB connection, with my computer not being able to see it. This took me a while to work out what I had done, but it transpired that I had mislabelled my USB connection and had connected the positive and negative data lines the wrong way round, so the USB wasn&amp;rsquo;t going to work.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/rp2040pmod_componentsonpcb.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_componentsonpcb.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;RP2040 PMod Board with components in place ready to be soldered&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;RP2040 PMod Board with components in place ready to be soldered&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;At that moment, I was expecting to have to throw away the boards, but then I thought I would have a go with the debug pins, I had broken these out at the last minute to a connector when designing the PCB. So I thought I should give the debugging interface a try before a scrap them. Having not used the debug interface before, I needed to get the build environment set up on a spare Raspberry Pi 4, and hook up the board, after a few tried working on the correct pins I was able to get a simple &amp;ldquo;Hello World&amp;rdquo; example running, flashing the on-board LED using the couple of debug interface.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/rp2040pmod_testing.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/rp2040pmod_testing.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Testing the RP2040 PMod Board&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Testing the RP2040 PMod Board&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;With the good news that the board seemed to all be working, except the USB issue, I corrected the error, and had a few more PCB&amp;rsquo;s made by &lt;a class=&#34;link&#34; href=&#34;https://jlcpcb.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JLCPCB&lt;/a&gt;. Having had these ordered they soon arrived, and I was able to build a few more of the boards. One issue I did find is that I am struggling to get consistent results with surface mount soldering on my hot plate. The boards I&amp;rsquo;m building now are some of the smallest and most complex I&amp;rsquo;ve tried to build at home so there is always going to be a fair amount of trial and error. Of the second lot of 5 PCB&amp;rsquo;s ordered 4 were delivered as one was damaged by the PCB manufacturer, I then haven&amp;rsquo;t been able to get one working, and then two work perfectly after a couple of fixes, while one has a single IO pins which doesn&amp;rsquo;t seem to be functioning.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The next plan is to start getting some of the PMod Boards I have already purchased and made, hooked up, and get some more working examples with the RP2040 PMod Boards, as well as order a few more boards so I can attempt to improve my surface mount soldering.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PMod 8x8 Infrared Sensor</title>
        <link>https://jjhorton.co.uk/posts/infraredsensorpmod/</link>
        <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/infraredsensorpmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/PModinfrerred_running.png" alt="Featured image of post PMod 8x8 Infrared Sensor" /&gt;&lt;p&gt;After seeing a post on twitter where someone was experimenting with the AMG8834 sensor, and I wanted to give it a go. This sensor can be purchased preassembled on &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/wholesale?&amp;amp;SearchText=amg8833&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;breakout boards&lt;/a&gt;, ready to drop into a breadboard and build a system around.&lt;/p&gt;
&lt;p&gt;While I could build something around these breakout boards, I decided to take a different route and have a go at building one of my own boards. for the connector I wanted to use a PMod, as this would allow me to use the board with both my &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Boards&lt;/a&gt; that I just made, as well as the &lt;a class=&#34;link&#34; href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iceBreaker&lt;/a&gt; FPGA board I already own, and maybe in the future I may have a go with getting it working with my &lt;a class=&#34;link&#34; href=&#34;https://store.digilentinc.com/cora-z7-zynq-7000-single-core-and-dual-core-options-for-arm-fpga-soc-development/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Zynq based Cora Z7 board&lt;/a&gt;. This makes the PMod connector an excellent solution for my small prototypes, to be able to move between these types of boards.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PModInfrared_schematic.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PModInfrared_schematic.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For building my breakout board, I use KiCAD, and the process of building this board is as simple as copying the design as given in the sensors datasheet, the circuit required is very simple and helps minimise any potential errors. the main effort was ensuring that the i2c interface pins match up with the available i2c pins on the &lt;a class=&#34;link&#34; href=&#34;https://www.jjhorton.co.uk/pico-pmod-breakout-pcb.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico PMod board&lt;/a&gt;  connector. Once that is done its just a case of order the PCB and waiting for it to turn up in the post.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PModinfrerred_pcb.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PModinfrerred_pcb.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The sensor output is an 8x8 array of values, which refresh at a maximum rate of 10Hz, so my initial solution to test this sensor out is to stream it over the Raspberry Pi&amp;rsquo;s serial interface Back to my Computer where I will plot the result.&lt;/p&gt;
&lt;p&gt;To get started I took some of the code from the Raspberry Pico C/C++ examples, and used that to work out how to get the pins setup to work with i2c on the pins that I needed. I really like using the PIO, as it gives you a lot of flexibility, although it is taking a bit of getting used to.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stdio_init_all();
// This example will use I2C1 on the SDA and SCL pins (2, 3 on a Pico)
i2c_init(i2c1, 1000000);

//Setup the I2C pins
gpio_set_function(2, GPIO_FUNC_I2C);
gpio_set_function(3, GPIO_FUNC_I2C);
gpio_pull_up(2);
gpio_pull_up(3);

// Make the I2C pins available to picotool
bi_decl(bi_2pins_with_func(2, 3, GPIO_FUNC_I2C));

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reading of the pixel values turned out to be more simple than I was expecting, with the addr of the sensor being set with the hardware configuration &lt;code&gt;int addr = 0b01101000;&lt;/code&gt;. For getting the values, we just write position of the first value, and then just keep reading the two bytes, which contain the 14 bit values for the pixel, 64 times. Each time we have read a value, we convert it to a floating point value and scale it using the value 0.25, which was given in the datasheet for the sensor.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//read the pixel values
val = 0x80;
i2c_write_blocking(i2c1, addr, &amp;amp;val, 1, true);

for(int i = 0; i&amp;lt;63;++i){
	ret = i2c_read_blocking(i2c1, addr, &amp;amp;rxdata[0], 2, true);
	if(i%8 == 0){
		printf(&amp;quot;\n&amp;quot;);
	}
	float result  = (int16_t)((((uint16_t)rxdata[1] &amp;lt;&amp;lt; 8) | ((uint16_t)rxdata[0]))&amp;lt;&amp;lt; 4) &amp;gt;&amp;gt; 4;
	printf(&amp;quot;%6.2f, &amp;quot;, 0.25*result);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The printf function is then just printing to the serial interface, where we will be picking them up on the PC that is connected to it.&lt;/p&gt;
&lt;p&gt;For plotting the values from the Pico we are using a simple python script running on a PC, for that we have a number of dependancies, which we will first import.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import serial
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then need to setup the serial link, so that we can receive the output from the Raspberry Pi Pico on my MacBook, at this point we also initialise the &lt;code&gt;my_results&lt;/code&gt; array where we will be storing the values, along with a counter.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ser = serial.Serial(&#39;/dev/tty.usbmodem1101&#39;, 115200 ,timeout=1)
my_result = np.zeros([8,8],dtype=np.float32)
my_counter = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next up we need to setup the figure that we will plot the results in, for this we are using matplotlib, we are going to set the colourbar range to be from 0 to 40 degrees with &lt;code&gt;vmin=0, vmax=40&lt;/code&gt; , as this the range I&amp;rsquo;m expecting to see when testing it out.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fg = plt.figure()
ax = fg.gca()
h = ax.imshow(my_result, vmin=0, vmax=40,cmap=plt.get_cmap(&#39;inferno&#39;))
plt.colorbar(h)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we are ready to enter our main program loop, so that this runs indefinitely i&amp;rsquo;m using a &lt;code&gt;while(1)&lt;/code&gt; statement to keep it looping round. This is then followed by the &lt;code&gt;ser.readline()&lt;/code&gt; command, which should hopefully get us an string containing 8 comma seperated values from the Raspberry Pi Pico. To check it is likley the values we are expecting we check the length, if its long enough to be our values, we seperate the values using &lt;code&gt;split(&amp;quot;,&amp;quot;)&lt;/code&gt; function, and convert the values to be a &lt;code&gt;np.float32&lt;/code&gt; datatype.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;while(1):
	my_data = ser.readline()

  if len(my_data) &amp;gt; 20:
		my_string = str(my_data)[3:-7]

		my_result[my_counter,0:8] = np.asarray(my_string.split(&amp;quot;,&amp;quot;),dtype=np.float32)
		my_counter = my_counter + 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have a line of numbers, once we have 8 of them we now have all the image. This mean we need to update the plot that we created earlier with the values received from the sensor, before reseting our counter back to zero.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	if my_counter &amp;gt; 7:
		h.set_data(np.fliplr(np.flip(my_result)))
		plt.draw(), plt.pause(1e-4)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PModinfrerred_running.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PModinfrerred_running.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This then allows us to see what the sensor is seeing, which I was really happy with when I checked out that my solution actually worked the morning after writing the code.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;With that now completed, my next task is to look at getting an identical example in HDL which uses either the Icebreaker Board or the Colorlite i5, this will be a bit more of a challenge, but it will be a great little project for improving my HDL coding skills.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Inspectrum with SigMF Files</title>
        <link>https://jjhorton.co.uk/posts/inspectrumsigmf/</link>
        <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/inspectrumsigmf/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Inspectrum_WithAnnotations.png" alt="Featured image of post Inspectrum with SigMF Files" /&gt;&lt;p&gt;This post is as much a note to myself, for the next time that I hit this issue, which is installing &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt; with SigMF support.&lt;/p&gt;
&lt;p&gt;The tool I&amp;rsquo;m installing is &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt; which is for analysing captured files of sampled data, primarily from Software Defined Radios. This allows for looking at signals, and analysing what is in the capture. I was looking to use this tool with some &lt;a class=&#34;link&#34; href=&#34;https://github.com/gnuradio/SigMF&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SigMF&lt;/a&gt; files, the Signal Meta data files are made up of a Binary File containing the sample data, and a JSON companion file, which contains details about the capture. This file with details about the capture can also include annotations, which is what I am interested in today. The SigMF Repository contains all the details on what the standard supports: &lt;a class=&#34;link&#34; href=&#34;https://github.com/gnuradio/SigMF&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github.com/gnuradio/SigMF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Github repo for &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt; includes details on how to get it built, which is a simple case of running a few commands on my Ubuntu PC:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get install qtbase5-dev libfftw3-dev cmake pkg-config libliquid-dev
sudo apt-get install build-essential git
git clone https://github.com/miek/inspectrum.git
cd inspectrum/
mkdir build
cd build/
cmake ..
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The cmake command behaves as expected but it does not find &lt;code&gt;libsigmf&lt;/code&gt; which is probably expected as I haven&amp;rsquo;t installed it as part of installing the dependancies in the first two commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-- The CXX compiler identification is GNU 9.3.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version &amp;quot;0.29.1&amp;quot;)
-- Found FFTW: /usr/lib/x86_64-linux-gnu/libfftw3f.so  
-- Found LIQUID: /usr/lib/x86_64-linux-gnu/libliquid.so  
-- libsigmf not found. Disabling SigMF support
-- Configuring done
-- Generating done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that I won&amp;rsquo;t be able to open sigmf files in &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt;, as &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt; will now throw an error even when you attempt to open just the binary &lt;code&gt;.sigmf-data&lt;/code&gt; files, in the newer versions.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Inspectrum_SigMF_Error.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Inspectrum_SigMF_Error.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Inspectrum Error opening Sigmf File&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Inspectrum Error opening Sigmf File&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The issue I found next was that there were no clear instructions on how to install this &lt;a class=&#34;link&#34; href=&#34;https://github.com/deepsig/libsigmf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;libsigmf&lt;/a&gt; within its git repository, this seemed to be some assumed knowledge which I was clearly lacking. After a hunt around the repo, and looking though the github workflow files it was possible to work out the steps I seemed, by building and installing the &lt;a class=&#34;link&#34; href=&#34;https://github.com/deepsig/libsigmf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;libsigmf&lt;/a&gt; examples, which seemed to get the missing &lt;a class=&#34;link&#34; href=&#34;https://github.com/deepsig/libsigmf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;libsigmf&lt;/a&gt; library installed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/deepsig/libsigmf.git
cd libsigmf
cmake -B build
cmake --build build
sudo -H cmake --install build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The one step I then discovered I had missed is that I also need to install the dependancies for the &lt;a class=&#34;link&#34; href=&#34;https://github.com/deepsig/libsigmf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;libsigmf&lt;/a&gt; package on my Ubuntu PC, thankfully these are just available using apt on Ubuntu 20 LTS.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install libflatbuffers-dev nlohmann-json3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we are able to remove the build folder from the &lt;a class=&#34;link&#34; href=&#34;https://github.com/miek/inspectrum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inspectrum&lt;/a&gt; repositry we created earlier, and have a go at building again. Now we get a Much better looking message from the cmake command including &lt;code&gt;Enabling SigMF support&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-- The CXX compiler identification is GNU 9.3.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version &amp;quot;0.29.1&amp;quot;)
-- Found FFTW: /usr/lib/x86_64-linux-gnu/libfftw3f.so  
-- Found LIQUID: /usr/lib/x86_64-linux-gnu/libliquid.so  
-- libsigmf found. Enabling SigMF support
-- Configuring done
-- Generating done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From here is just a case of completing the build, running &lt;code&gt;instpectrum&lt;/code&gt; and opening up a sigmf file.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Inspectrum_WithAnnotations.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Inspectrum_WithAnnotations.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Sigmf File with annotations&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Sigmf File with annotations&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This means that I can now have a good look at some of the data files complete with the annotations that I have downloaded and wanted to explore. The files I am taking a look at are downloaded from &lt;a class=&#34;link&#34; href=&#34;https://deepsig.ai&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DeepSig&lt;/a&gt; for a competition being run at &lt;a class=&#34;link&#34; href=&#34;https://www.spawc2021.com/data-competition/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IEEE International Workshop on Signal Processing Advances in Wireless Communications&lt;/a&gt;, with this synthetic dataset of over 100Gb of RF data making up the &lt;a class=&#34;link&#34; href=&#34;https://eval.ai/web/challenges/challenge-page/1057/overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wideband Signal Recognition challenge&lt;/a&gt;. The dataset is currently available for anyone to download if they follow the challenge links and provide an email address, although it may take a while to download given its size. Now I&amp;rsquo;ve seen the data it is tempting to have a go and see what I can do, having played around with Modulation Recognition using machine Learning in the past it looks like a tempting challenge to have a go at, although it looks like a big challenge and I&amp;rsquo;m not sure how far I would get as a one man band over just a couple of months.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pico PMod breakout PCB</title>
        <link>https://jjhorton.co.uk/posts/picopmod/</link>
        <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/picopmod/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/PicoPmod-JLC_PCB.jpg" alt="Featured image of post Pico PMod breakout PCB" /&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PicoPmod-Breadboard.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Breadboard.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Pico on a Breadboard&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Pico on a Breadboard&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After picking up a few &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/products/raspberry-pi-pico/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Raspberry Pi Pico&amp;rsquo;s&lt;/a&gt;, I was looking for a use for them and I decided to hook up a few of the PMod boards I have from playing around with FPGA. This PMod boards all use the same pinout, of 12 pins, which consists of 8 I/O pins, two 3.3V, and two GND connections on a two row 2.54mm header. I have a few kicking around from a more complex ones, down to a simple &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/collections/fpga/products/pmod-dip-switch&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;8 DIP switch&lt;/a&gt; and a &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/pmod-7-segment-display&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7 segment display&lt;/a&gt;. These are great little boards for connecting to boards like the Raspberry PI Pico when experimenting but the interface with the Pico requires a breadboard to hook them up, so I was looking for a better way to get these PMod&amp;rsquo;s hooked up.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.raspberrypi.org/app/uploads/2021/01/Raspberry-Pi-Pico-at-an-angle-900x643.png%22&#34; &gt;
		&lt;img src=&#34;https://www.raspberrypi.org/app/uploads/2021/01/Raspberry-Pi-Pico-at-an-angle-900x643.png%22&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Raspberry pi pico, image from raspberrypi.org&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Raspberry pi pico, image from raspberrypi.org&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Why bother experimenting with the Raspberry Pi Pico? Well the things that interested me with the Raspberry Pi Pico was not only the low price but also the Programable I/O or PIO on the &lt;a class=&#34;link&#34; href=&#34;https://www.raspberrypi.org/documentation/rp2040/getting-started/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RP2040&lt;/a&gt; device. This allows you to build small limited sate machines you can set up on some of the outputs, alongside some more traditional Hard IP (SPI/UART/I2C) on the device with a duel core ARM that supports running at a clock rate of over 100MHz. This make it interesting to play with, much as I have been playing around with on FPGA&amp;rsquo;s in the past few months, without having to get your head around writing lots of HDL such as Verilog or VHDL.&lt;/p&gt;
&lt;h1 id=&#34;designing-a-pcb-with-kicad&#34;&gt;Designing a PCB with KiCAD&lt;/h1&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PicoPmod-Schematic.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Schematic.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;KiCad Schematic&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;KiCad Schematic&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once I had decided to build a PMod Board, I needed to decide the requirements of the board, I decided that I wanted to be able to use the extended PMoD setup, that is used on the &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;colorlite I5 expansion board&lt;/a&gt; that I owned, which would allow me to have both a duel PMod connection, and a few extra I/O pins as well as 5V access. I also decided that I would want to be able to connect PMod&amp;rsquo;s as a host device, as well as connect into an FPGA board like the &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;colorlite I5&lt;/a&gt; . To do this I decided I would break out the 5V pin and 3v3 pin, so we can connect headers when I need to power PMod devices from the Picos power supply, or disconnect them when I want to use the USB connection.&lt;/p&gt;
&lt;p&gt;Other pins I looked to break out to headers was the analog inputs, and the 3v3 enable pin. This gives me more flexibility when choosing how to power the Pico when it is connected up as a client device to one of the FPGA boards. Another popular feature I added was connecting up the Run pin to a button which pulls it to ground, allowing the Pico to be safely reset, when I want to upload a new program.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PicoPmod-Layout.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-Layout.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;KiCad PCB Layout&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;KiCad PCB Layout&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PicoPmod-3D_Layout.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-3D_Layout.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;KiCad 3d Render&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;KiCad 3d Render&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once all the requirements were captured in the schematic, it was a quick task to layout the board. Thankfully, a footprint and schematic symbol that match the Pico requirements were available in a library which could be loaded into KiCAD that someone has made available on &lt;a class=&#34;link&#34; href=&#34;https://github.com/HeadBoffin/RP_Silicon_KiCad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github&lt;/a&gt;, which greatly speed up getting these boards made up. With the simple boards made up&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/PicoPmod-JLC_PCB.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/PicoPmod-JLC_PCB.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PCB&amp;rsquo;s as they arrived&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PCB’s as they arrived&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;building-a-counter-example&#34;&gt;Building a counter example&lt;/h1&gt;
&lt;p&gt;With the boards made and tested, I was now ready to start hooking up a simple PMod, and getting my head round writing C/C++ again, as it has been a while.&lt;/p&gt;
&lt;p&gt;The process for compiling c/c++ for the Raspberry Pi Pico is really well documented, and the Raspberry Pi Website is a great resource in getting everything set up on matter on what you are using to compile the software. I did find the examples repo, a bit intimidating when wanting to build something from scratch for the cmake files but there were plenty of back to basics examples avalible from a quick google search.&lt;/p&gt;
&lt;p&gt;The first example that I wanted used the PMod &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/pmod-7-segment-display&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7 segment display&lt;/a&gt;, and I wanted to display a counter that increments once per second. The first set was getting a suitable cmake file setup, this includes all the information the Pico SDK needs to build my project, this is a simple project with no real external dependancies other the the &lt;code&gt;pico_stdlib&lt;/code&gt; library and the code will be in my file &lt;code&gt;main.c&lt;/code&gt;, which keeps this file nice and simple.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make_minimum_required(VERSION 3.12)

# include(pico_sdk_import.cmake)
include($ENV{PICO_SDK_PATH}/pico_sdk_init.cmake)

# Change your executable name to something creative!
set(NAME pico-pmod)

project(${NAME} C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# Initialize the SDK
pico_sdk_init()

# Add your source files
add_executable(${NAME}
    main.c
)

# Don&#39;t forget to link the libraries you need!
target_link_libraries(${NAME}
	 pico_stdlib
)

# create map/bin/hex file etc.
pico_add_extra_outputs(${NAME})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next task is building up our program, first up is importing the standard library&amp;rsquo;s, and at this point we will also set up some variables that we will need. One of the main once here are the &lt;code&gt;SEVEN_SEGMENT_PINS&lt;/code&gt; array of constants, these list of pins can be swapped by changing the LCD_DISPLAY value which is the same as the PMod output connector of the custom PCB.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;quot;pico/stdlib.h&amp;quot;

#define LCD_DISPLAY 1
#define LOOKUP_TABLE_LENGTH 50

#if (LCD_DISPLAY==0)
	//if plugged into pmod1
	const uint SEVEN_SEGMENT_PINS[] = {9,11,13,15,8,10,12,14};
#else
	//if plugged into pmod0
	const uint SEVEN_SEGMENT_PINS[] = {21,19,17,3,20,18,16,2};
#endif

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first function we define is a nice simple one, this is used to setup the output pins, initialising them as GPIO (General Purpose Input Output) Pins, setting the direction for each of them as outputs and setting them each as a low value. This function is called as part of the setup process, and is only used once.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int setup_display(){
	for(int x = 0; x&amp;lt;8; x++) {
			gpio_init(SEVEN_SEGMENT_PINS[x]);
			gpio_set_dir(SEVEN_SEGMENT_PINS[x], GPIO_OUT);
			gpio_put(SEVEN_SEGMENT_PINS[x],0);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The function is to display the values on the seven segment display, to do this we create an array with each row corresponding to the pins that we need to turn on to display the corresponding number, this array is &lt;code&gt;characters[]&lt;/code&gt; array, with the first value of the &lt;code&gt;unit8&lt;/code&gt; always set to zero and ignored the rest define each of the segments on the seven segment display.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int set_display(uint num1, uint num2){

	// the table used to set the charcter to be on
	uint8_t characters[] = {0b01000000,	// 0
							0b01111001,	// 1
							0b00100100,	// 2
							0b00110000,	// 3
							0b00011001,	// 4
							0b00010010,	// 5
							0b00000010,	// 6
							0b01111000,	// 7
							0b00000000,	// 8
							0b00011000,	// 9
							0b00001000,	// A
							0b00000011,	// B
							0b01000110,	// C
							0b00100001,	// D
							0b00000110,	// E
							0b00001110};// F


	// set the display values
	//for the first digit
	for(int x = 0; x&amp;lt;7; x++) {
		gpio_put(SEVEN_SEGMENT_PINS[x], (characters[num1] &amp;gt;&amp;gt; x) &amp;amp; 1U);
	}

	gpio_put(SEVEN_SEGMENT_PINS[7], 1);
	sleep_ms(10);

	//for the second digit
	for(int x = 0; x&amp;lt;7; x++) {
		gpio_put(SEVEN_SEGMENT_PINS[x], (characters[num2] &amp;gt;&amp;gt; x) &amp;amp; 1U);
	}

	gpio_put(SEVEN_SEGMENT_PINS[7], 0);
	sleep_ms(10);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The two displays are multiplexed together, so the output pins for this loop are set using the &lt;code&gt;gpioput()&lt;/code&gt; function, cycling through the elements of the character with the &lt;code&gt;x&lt;/code&gt; variable and writing the binary values to the pins from the characters array using the command &lt;code&gt;(characters[num1] &amp;gt;&amp;gt; x) &amp;amp; 1U)&lt;/code&gt;. We then let this display remain on for a few milliseconds using the function &lt;code&gt;sleep_ms(10);&lt;/code&gt; before then setting the pin for the multiplexer &lt;code&gt;	gpio_put(SEVEN_SEGMENT_PINS[7], 0);&lt;/code&gt; and repeating the process for the other character with the &lt;code&gt;num2&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;The main function then pulls these two functions together, setting up the display and the counters that we will display. the counters are all initialised to zero, after we have called out &lt;code&gt;setup_display();&lt;/code&gt; function. The main &lt;code&gt;counter&lt;/code&gt; then cycles around 50 times, before we then increment &lt;code&gt;counter1&lt;/code&gt;, once counter 1 has reached 15 (displayed on the screen as e), we then increment the 2nd digit. This results in the counter incrementing approximately once per second.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int main() {

		// setup the outputs for the display
		setup_display();

		//initalise the counters used to count up on the display

		uint counter = 0;
		uint counter1 = 0;
		uint counter2 = 0;

		// main loop for updating the display and updating the counter
		while (true) {
			set_display(counter1, counter2);
			counter++;

			if(counter&amp;gt;PAUSE_LENGTH){ counter = 0; counter1++;}
			if(counter1&amp;gt;15){ counter1=0; counter2++;}
			if(counter2&amp;gt;15){ counter2=0;}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next set is building the code i have written, this is a standard process which is well documented in the SDK documentation. As I tend to stick to the terminal when working on my Macbook, I just type the commands in which is a simple as:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; export PICO_SDK_PATH=../pico-sdk
 mkdir build
 cd build
 cmake ..
 make -j4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the code build successfully, we can then copy  it onto the Pico, with the PMod Board this is now easier and doesn&amp;rsquo;t require unplugging the Pico. Instead we can hold down the run button, then press the Boot button. the releasing the Run followed by Boot button and the Pico appears on as a removable drive ready for us to drop the &lt;code&gt;pico-pmod.uf2&lt;/code&gt; file onto it, at which point it begins running our program.&lt;/p&gt;
&lt;h1 id=&#34;what-next&#34;&gt;What next&lt;/h1&gt;
&lt;p&gt;The next challenge will be building some examples with PIO, working with a few more PMod type devices. One error that needs fixing, 5v and GND pin wrong way round, in order to match the Colorlite i5 FPGA Dev Board that I have. I&amp;rsquo;m planning on building a few custom PMod boards so I can develop and test both FPGA based examples and Pico Based examples, to improve my coding ability for coding on both.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Filter Testing</title>
        <link>https://jjhorton.co.uk/posts/filtertesting/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/filtertesting/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Filter_Test_Lots_of_PCBs.png" alt="Featured image of post Filter Testing" /&gt;&lt;p&gt;This post is going to take a look at some Filters that I have &amp;ldquo;made at home&amp;rdquo;, for when I am experimenting with my Software Defined Radio&amp;rsquo;s. The filters are for use in the 433MHz band, and I wanted to create some bandpass filters to improve the IQ Recordings I was making, as I was getting a lot of out of band interference on my Pluto SDR.&lt;/p&gt;
&lt;p&gt;For a 433MHz Filter I could have just purchased some pre-made boards, complete with some simple filters on ebay, there were plenty of options but they all seemed a little expensive, so what harm is there in just having a look at trying to build something myself. I once studied the RF module when I was at university, although I soon realised that it was going to be a bad idea to try and create something from scratch, as I how much of a dark art RF design was. A couple of days later I came across a &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=TnRn3Kn_aXg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;video&lt;/a&gt; on RF design on &lt;a class=&#34;link&#34; href=&#34;https://hackaday.com/2016/03/23/michael-ossmann-makes-you-an-rf-design-hero/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hackaday&lt;/a&gt; I realised that by just using a website like mouser I could get the hard part of filter design done for me, I would just need to put the right bits on a PCB in a form a could use.&lt;/p&gt;
&lt;p&gt;I quick search on mouser gave me a suitable &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.com/ProductDetail/RF360/B39431B3710U410?qs=%2Fha2pyFadugWu8BeNk2dKak5L2iKxbiW3IfNS5oXT%252BC8aOQqzmASyC1Xu7pW6gQv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Filter Part&lt;/a&gt;, The &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.com/datasheet/2/842/B3710-1092478.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;datasheet&lt;/a&gt; confirmed that would give me the out of band signal rejection I needed, all ready matched to 50 ohms and just needed to be attached to a couple of SMA connectors so I could hook it up in-between my SDR and my antenna.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_PCB_Schematic.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_PCB_Schematic.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PCB Scematic&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PCB Scematic&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_PCB_Layout.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_PCB_Layout.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PCB Layout&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PCB Layout&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once you have selected the parts it only the matter of quickly dropping the parts into a KiCAD schematic, laying out the PCB and before you know it, there is a small pile of PCB&amp;rsquo;s arriving.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_Lots_of_PCBs.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_Lots_of_PCBs.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;PCB&amp;rsquo;s Arrived&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PCB’s Arrived&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As it the way when ordering these types of PCB&amp;rsquo;s from (JLC PCB)[https://jlcpcb.com], shipping is the biggest expense, even when selecting the cheapest option so I always seem to end up with a lot more PCB than I actually need.&lt;/p&gt;
&lt;p&gt;For soldering the board I made us of a Hot Plate that I had recently &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/4000887663480.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;purchased&lt;/a&gt; for the purpose of being able to some small PCB at home in a more controlled way. The Hot plate has a temperature control so I can properly preheat my PCB&amp;rsquo;s before then increasing the temperate all the way up to ~200 degrees to briefly melt the solder, which made making a larger number of these PCB&amp;rsquo;s much easier and hopeful with more consistent results.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_Soldering.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_Soldering.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Filter soldering&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Filter soldering&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The next stage once I had a few of these Filters made up was to test there performance, for which I used the NanoVNA which I purchased last year. The Nano VNA is a Vector Network Analyser, which allows me to get a better understanding of the filters characteristics, and see if its performance is what I am expecting. While the NanoVNA&amp;rsquo;s performance is never going to beat the performance of the VNA&amp;rsquo;s you will find in commercial labs, it&amp;rsquo;s a great tool for testing out little filters like this that i&amp;rsquo;m making a home, you can find it on &lt;a class=&#34;link&#34; href=&#34;https://www.tindie.com/products/hcxqsgroup/nanovna-v2-plus/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tindie&lt;/a&gt;, although a newer model has since been released with an improved frequency range.&lt;/p&gt;
&lt;p&gt;For testing my filters, I hooked up the NanoVNA to my PC and used it with the software &lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NanoVNA QT GUI&lt;/a&gt; which allows me to use the NanoVNA from my PC instead of having to use the tiny touchscreen.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_NanoVNA.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_NanoVNA.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;NanoVNA Testing&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;NanoVNA Testing&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The software along with the NanoVNA allows me to clearly see the insertion loss of the filter across the range of frequencies i wanted to measure, as can be shown bellow along with the smith chart showing the measurements.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_NanoVNA_ScreenShot.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_NanoVNA_ScreenShot.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Nano VNA PC Software&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Nano VNA PC Software&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;One thing I was interested in looking into was how consistent all the results were between all the filters that I had built. To measure this between the different filters, I needed to export the results from the NanoVNA for this I attached each of the filters and made use of the ability of the software to measure and then export the S-Parameters in touchstone files for each of the filters.&lt;/p&gt;
&lt;p&gt;For analysing and comparing the results of all the different filters I turned to MATLAB, I use MATLAB at work in my day job a lot and have had to have a look at some s-parameter files before at work. I am lucky in that my &lt;a class=&#34;link&#34; href=&#34;https://uk.leonardocompany.com/en/people-careers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;employer&lt;/a&gt; provides me with a Home Use version of MATLAB to install on my home desktop computer, but as I was looking at the data from my laptop I fired up &lt;a class=&#34;link&#34; href=&#34;https://uk.mathworks.com/products/matlab-online.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MATLAB Online&lt;/a&gt;. MATLAB online allows me to upload my files to &amp;ldquo;The cloud&amp;rdquo;, and work from the MATLAB standard IDE from a web browser, without needing to work out how to get it installed on my Macbook with it &lt;a class=&#34;link&#34; href=&#34;https://www.apple.com/uk/mac/m1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M1 Processor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_Matlab_online.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_Matlab_online.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Using Matlab online to process the results&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Using Matlab online to process the results&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first step I wanted to do was comparing a set of measurements with the filters specifications, this would allow me to check not only that the filters performance was being dramatically being reduced by any of my bad PCB design and that I was able to plot the results in a meaningful way.&lt;/p&gt;
&lt;p&gt;The first step was to load the s-parameter files into MATLAB, and get the magnitude values out from them to be able to plot, this turned out to be possible in only a handful of commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-matlab&#34; data-lang=&#34;matlab&#34;&gt;&lt;span class=&#34;n&#34;&gt;measured_data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sparameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&amp;#34;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;433&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_filter1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2p&lt;/span&gt;&amp;#34;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gains&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;log10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;measured_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;powergain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;measured_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Frequencies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ylabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Filter Gain (dB)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;xlabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Frequencey (MHz)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ylim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the S-Parameters function, you do need to have the correct MATLAB toolbox to load the files, but once there loaded with &lt;code&gt;sparameters()&lt;/code&gt; function you get the measured_data object in my case, which provides access to the power gains variable that I wanted to be able to plot, along with the frequencies they were measured at.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Filter_Test_Single_433MHz.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Filter_Test_Single_433MHz.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Filter gain plotted in MATLAB&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Filter gain plotted in MATLAB&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For the plot above I&amp;rsquo;ve added the red lines which show the performance as quoted in the filter &lt;a class=&#34;link&#34; href=&#34;https://www.mouser.com/datasheet/2/842/B3710-1092478.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;datasheet&lt;/a&gt;, with the blue being the values being the values as measured on one of the filters, generated in MATLAB from the S-parameter touchstone file. It shows that mounting on the PCB&amp;rsquo;s has not resulted in the performance of the filter reducing from the specification. Now I wanted to look at the consistency between all the filters I made, which MATLAB is a great place to look at these variance in the filters gain, and that will be my next step once i&amp;rsquo;ve measured them all with the NanoVNA.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Continuous Integration for Firmware with Github Actions</title>
        <link>https://jjhorton.co.uk/posts/firmwareci/</link>
        <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/firmwareci/</guid>
        <description>&lt;p&gt;For a couple of months I&amp;rsquo;ve been slowly building up a little project using some Development boards that include an FPGA, typically once i&amp;rsquo;ve finished editing my design I run all my simulations, tests and then check I can still build the firmware. While running these manually before each commit isn&amp;rsquo;t typically much an issue, I wanted to automate this.&lt;/p&gt;
&lt;p&gt;The project i&amp;rsquo;m working on uses a &lt;a class=&#34;link&#34; href=&#34;https://www.aliexpress.com/item/1005001686186007.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ColorLite i5 FPGA board&lt;/a&gt;, this with it Lattice ECP5 FPGA allows me to use a set of Open source tools to test and build my FPGA images. For simulations I&amp;rsquo;m using &lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/wiki/verilator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt;, while for creating the FPGA images I&amp;rsquo;m using a combination of &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/nextpnr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Next-PNR&lt;/a&gt;. These excellent tools allow me to make use of the GitHub actions to test my FPGA images with very minimal effort.&lt;/p&gt;
&lt;p&gt;While my simulations require a couple of commands so these are contained to a makefile, the commands to build the FPGA image are very simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yosys -p &lt;span class=&#34;s1&#34;&gt;&amp;#39;synth_ecp5 -json top.json&amp;#39;&lt;/span&gt; -S firmware/top.v
nextpnr-ecp5 --25k --package CABGA381 --json top.json --lpf firmware/colorlight.lpf --textcfg out.config

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build the FPGA image is a simple task of running my &amp;lsquo;top.v&amp;rsquo; verilog file though yosys, before doing place and route with nextpnr, which again is a single line. These simple lines allow me to test if I can build my design, as long as they don&amp;rsquo;t return any error, then the build is successful.&lt;/p&gt;
&lt;p&gt;The GitHub actions are based on YAML files, which contain details of the container that the image is being run on, and the commands that are run for that image. These files are stored in the folder &lt;code&gt;.github/workflow&lt;/code&gt; in the GitHub repository, I have two, one which runs the Simulation and one which build the FPGA Image.&lt;/p&gt;
&lt;p&gt;We will talk though the build firmware Github Action, which I have called &lt;code&gt;Build Firmware&lt;/code&gt;. I have decided that this should be run whenever I push the repositry, for Pull requests and on demand. So we define the name of the action, and add the description of when it should be run, the &lt;code&gt;workflow_dispatch&lt;/code&gt; allows me to manually trigger it being run.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Firmware&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the name, and when the action should be run defined, we move onto defining the action. For my build we need to define the &lt;code&gt;job&lt;/code&gt; and the &lt;code&gt;build&lt;/code&gt;. For this I am running on Ubuntu Latest as my image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have the image we are running on we need to add the dependancies that are required for building out FPGA image. First step is to checkout our repository we are running from with the
&lt;code&gt;uses: actions/checkout@v2&lt;/code&gt;, which will get our repo using the default settings without any issues. With both Yosys and Next-Pnr needed to build the image, the next step is a little different to what I originally had planned. I thought that I would need to build these tools from source like I would on my own computer, but that is very time consuming, and I came across some pip packages, which installs them much quicker. This reduces build time, which on private repo&amp;rsquo;s on GitHub are billed after you are passed your allowance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Install the required Tools&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sudo -H pip3 install yowasp-yosys&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sudo -H pip3 install yowasp-nextpnr-ecp5-25k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One problem I did come across when installing these packages, was that if I ran these &lt;code&gt;pip3 install&lt;/code&gt; commands without sudo, then the commands that I need then aren&amp;rsquo;t available. Running with &lt;code&gt;sudo&lt;/code&gt; solves this issue although i&amp;rsquo;m not sure why.&lt;/p&gt;
&lt;p&gt;Now we have all the tools in place we can now run both yosys and nextpnr, using the commands specific to the &lt;code&gt;yowasp-yosys&lt;/code&gt; and &lt;code&gt;yowasp-nextpnr&lt;/code&gt; packages, which are a little different to the standard commands I would use on my own Laptop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run yosys on the files&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yowasp-yosys -p &amp;#39;synth_ecp5 -json top.json&amp;#39; -S firmware/top.v&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run Place and Route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yowasp-nextpnr-ecp5 --25k --package CABGA381 --json top.json --lpf firmware/colorlight.lpf --textcfg out.config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then pull all those components into a single &lt;code&gt;FirmwareBuild.yaml&lt;/code&gt; file in the &lt;code&gt;.github/workflow&lt;/code&gt; folder, which is then run on each push to the repo. The current design is very simple, but runs in a little over 30 seconds for the build, this makes running on each push manageable, but as the firmware design continues to grow, I may look to only run on Pull request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Build Firmware&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Install the required Tools&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;          sudo -H pip3 install yowasp-yosys
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;          sudo -H pip3 install yowasp-nextpnr-ecp5-25k&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run yosys on the files&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yowasp-yosys -p &amp;#39;synth_ecp5 -json top.json&amp;#39; -S firmware/top.v&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run Place and Route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yowasp-nextpnr-ecp5 --25k --package CABGA381 --json top.json --lpf firmware/colorlight.lpf --textcfg out.config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The GitHub action for running the simulation is very similar, but instead of &lt;code&gt;pip3 install&lt;/code&gt; for the build tools, I require &lt;code&gt;Verilator&lt;/code&gt; which is available to install using apt. As the code to run my Verilator tests is identical between how i run it on my computer and in the GitHub action, I just us my make command to run the tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Simulate Firmware&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Install Verilator required for the simulation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sudo apt install verilator&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run the Serial Test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;          export VINC=/usr/share/verilator/include
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;          make test-serial&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My next step for the these GitHub Actions, is to look at extracting some statistics from particularly the build process. I&amp;rsquo;m  interested in monitoring the FPGA utilisation and frequency that the design can be run at, being able to see the effect of each pull request would be advantageous for keeping an eye on how well my design is coming together and the effect of different changes.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Nvidia Jetson Nano 2Gb Testing</title>
        <link>https://jjhorton.co.uk/posts/jetsontesting/</link>
        <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/jetsontesting/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Jetson_case_box.png" alt="Featured image of post Nvidia Jetson Nano 2Gb Testing" /&gt;&lt;p&gt;Now that I have the Jetson Nano all setup in a case, I wanted to test out a how well the GPU works on some simple problems. This post looks at my first test which looks at a simple method of calculating Pi, and looks at how quickly is can carry out those calculations.&lt;/p&gt;
&lt;p&gt;This method of calculating Pi is oftern refered to as the dart board method. This method relies on placing random number onto a square and then determining if that random number falls within a circle with a diameter that is the same size as the box or in the area outside of the circle.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/2/20/MonteCarloIntegrationCircle.svg&#34; &gt;
		&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/2/20/MonteCarloIntegrationCircle.svg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Image from &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_integration#/media/File:MonteCarloIntegrationCircle.svg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By selecting two random numbers with are evenly distributed between a min and max, to be the x and Y coordinates, we can then calculate the distance from the centre of the circle using pythagorus theorem.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a%5e2&amp;#43;b%5e2=c%5e2&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a%5e2&amp;#43;b%5e2=c%5e2&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Where our distance from the centre from the cicrle is c, and our randomly selected x and y co-ordinates a and b. This means that our distance from the centre of the circle is given by:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7bdistance%7d=%5csqrt%7bx%5e2&amp;#43;y%5e2%7d&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7bdistance%7d=%5csqrt%7bx%5e2&amp;#43;y%5e2%7d&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The next step is to see if this point falls within the circle, or in the area outside the circle. this is completed by comparing this distance from the centre of the circle with the radius of the circle. If this distance is less than the circle radius, then it is within the circle, and we count up how many times we get a value that falls inside the circle.&lt;/p&gt;
&lt;p&gt;We can the use the ratio of the number of points that we have found within the circle and the total number of test completed to approximate the value of pi. The area of the circle is defined as:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a_%7bcircle%7d=%7b%5cpi%7dr%5e2&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;a_%7bcircle%7d=%7b%5cpi%7dr%5e2&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The area of the square is twice the radius of the circle, for each the x and y axis we have used for generating all our points is, therefor the area is&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7ba_%7bsquare%7d%7d=%7b%282r%29%7d%5e2&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7ba_%7bsquare%7d%7d=%7b%282r%29%7d%5e2&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can therefore calculate that the ratio in the area between the circle and the square is:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%7b%5cpi%7dr%5e2%7d%7b%7b%282r%29%7d%5e2%7d&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%7b%5cpi%7dr%5e2%7d%7b%7b%282r%29%7d%5e2%7d&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This can be simplified to:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%5cpi%7d%7b4%7d&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d=%5cfrac%7b%5cpi%7d%7b4%7d&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Assuming that we have a sufficiently large number of points we can assume that the number of points which fall inside the circle is proportional to the total area of the square, so after rearranging we can then replace the areas with the number of points that fall within each:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7b%5cpi%7d=4%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d&#34; &gt;
		&lt;img src=&#34;https://latex.codecogs.com/svg.latex?%5cLarge&amp;amp;space;%7b%5cpi%7d=4%5cfrac%7ba_%7bcircle%7d%7d%7ba_%7bsquare%7d%7d&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This formula, with is relatively simple can allow us to compute the value of pi, which can be realised with python using numpy. The implementation, generates a random number between a width, and then calculates the distance from the centre, that this point is from the centre of the circle. This is then compared to the circles radius, and if it falls within the circle the total is implemented. The final value of Pi is then calculated when the main loop is finished.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import time

iterations = int(1e6)

totalIn = 0.0
width = np.power(2,15)

start = time.time()

for iter in range(iterations):
  x = np.random.random_integers(-width,width)
  y = np.random.random_integers(-width,width)

  dist = np.sqrt(np.power(x,2)+np.power(y,2))

  if dist&amp;lt;width:
    totalIn += 1


my_pi = 4 * np.divide(totalIn,iterations)
runtime = time.time() - start
print(&amp;quot;Pi is calculated as : %.10f&amp;quot; % my_pi)
print(runtime)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The accuracy of the value of Pi is highly linked to the number of iterations that are completed, as well as the number of bits used to calculate the final value. By varying the number of points we calculate with we can see the error reducing, the table bellow is for the code above, run on a Jetson Nano 2Gb.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th&gt;Pi Calculated&lt;/th&gt;
&lt;th&gt;Run Time(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;3.0000000000&lt;/td&gt;
&lt;td&gt;0.077&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;td&gt;3.0760000000&lt;/td&gt;
&lt;td&gt;0.692&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10,000&lt;/td&gt;
&lt;td&gt;3.1360000000&lt;/td&gt;
&lt;td&gt;7.14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100,000&lt;/td&gt;
&lt;td&gt;3.1518800000&lt;/td&gt;
&lt;td&gt;69.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,000,000&lt;/td&gt;
&lt;td&gt;3.1409400000&lt;/td&gt;
&lt;td&gt;686&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The main thing we have control of is the number of iterations, and we can attempt to complete more iterations by optimising our code, the problem is the more iterations we do the longer is takes to complete, with 1,000,000 iterations taking 10 minutes we need to improve the execution time if we want to carry out more iterations.&lt;/p&gt;
&lt;p&gt;In Python Loops are relatively slow compared to other languages such as &amp;lsquo;c&amp;rsquo; and &amp;lsquo;c++&amp;rsquo;, this is due to the dynamically typed nature of python. Vectorising the calculation of the values, using Numpy helps to remove or limit the number of loops that need to be completed, and operations on vectors are generally more efficient in dynamically typed languages, and by avoiding context switching large efficiency gains can be found.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import time

test_points = int(1e9)
sample_size = int(1e6)
iterations = int(test_points/sample_size)*sample_size

count = np.array(0,dtype=np.float64)
width = np.power(2,15)

start = time.time()

max_value = np.array(width*width,dtype=np.float32)

for iter in range(int(iterations/sample_size)):
  x = np.random.random_integers(-width,width,sample_size)
  y = np.random.random_integers(-width,width,sample_size)

  result = np.less(np.add(x*x,y*y),max_value)
  count = count + np.sum(result)

pi_2 = 4.0 * np.divide(count,iterations)
runtime = time.time() - start

print(&amp;quot;Pi is calculated as : %.10f&amp;quot; % pi_2)
print(&amp;quot;Runs: %i&amp;quot; % iterations)
print(runtime)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach gives a significant improvement, we are now able to do the number of calculations that took over 10 minutes, in less than a second.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th&gt;Pi value&lt;/th&gt;
&lt;th&gt;Run Time (s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,000,000&lt;/td&gt;
&lt;td&gt;3.1449280000&lt;/td&gt;
&lt;td&gt;0.28814268112182617&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10,000,000&lt;/td&gt;
&lt;td&gt;3.1422772000&lt;/td&gt;
&lt;td&gt;2.569852352142334&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100,000,000&lt;/td&gt;
&lt;td&gt;3.1415957200&lt;/td&gt;
&lt;td&gt;26.24626588821411&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now making use of the unique of the Nvidia Jetson boards which is the GPU along with the 128 CUDA cores. Taking advantage of these features involves switching from Numpy which executes on arm core to using CUPY. The CUPY library is designed to be compatible with numpy, using the same syntax and function names but to be used to execute the commands on the GPU.&lt;/p&gt;
&lt;p&gt;While the syntax is almost identical between Numpy and CUPY, for the functions themselves, we actually need to deal with where the variables are located for the GPU version. Typically on a traditional Desktop PC the memory for the CPU and GPU are separate, and each time a variable needs to go between the two it has to be transferred over what is typically a PCIe link. This transfer takes time, but in the Jetson Boards the memory is shared between the CPU and the GPU, which means transfers are no longer a real issue but we still have the map the variables as ones that are able to be processed by the GPU as shown by the &amp;lsquo;cp.array()&amp;rsquo; commands, and then make that data available to Numpy and the CPU with commands such as &amp;lsquo;cp.asnumpy()&amp;rsquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import numpy as np
import cupy as cp
import time

test_points = int(1e9)
sample_size = int(1e6)
iterations = int(test_points/sample_size)*sample_size

count = cp.array(0,dtype=cp.float64)
width = cp.power(2,15)

start = time.time()

max_value = cp.array(width*width,dtype=cp.float32)

for iter in range(int(iterations/sample_size)):
  x = cp.random.random_integers(-width,width,sample_size)
  y = cp.random.random_integers(-width,width,sample_size)

  result = cp.less(cp.add(x*x,y*y),max_value)
  count = count + cp.sum(result)

pi_2 = cp.asnumpy(4.0 * cp.divide(count,iterations))
runtime = time.time() - start

print(&amp;quot;Pi is calculated as : %.10f&amp;quot; % pi_2)
print(&amp;quot;Runs: %i&amp;quot; % iterations)
print(runtime)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apart from these memory management changes that code is broadly the same, so with these minor adjustment to make use of the GPU we can now get a roughly 5 times improvement in speed compared to the vectorised approach. The originally looped code took over 10 minutes to calculate one million iterations, which are now completed in just over half a second.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iterations&lt;/th&gt;
&lt;th&gt;Pi value&lt;/th&gt;
&lt;th&gt;Run Time (s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,000,000&lt;/td&gt;
&lt;td&gt;3.1428120000&lt;/td&gt;
&lt;td&gt;0.536&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10,000,000&lt;/td&gt;
&lt;td&gt;3.1412428000&lt;/td&gt;
&lt;td&gt;0.952&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100,000,000&lt;/td&gt;
&lt;td&gt;3.1414888800&lt;/td&gt;
&lt;td&gt;5.70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,000,000,000&lt;/td&gt;
&lt;td&gt;3.1414574560&lt;/td&gt;
&lt;td&gt;48.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These large improvements in speed, have allowed us to complete far more iterations in a shorter amount of time, and in terms of out algorithm we can see the improvements in the accuracy of Pi we are estimating. By the time we are calculating 1e9 values, we are getting pi correct to 4 significant figures. The question is are there any more options to improve the speed of our algorithm?&lt;/p&gt;
&lt;p&gt;One element that we skipped over is the size of the vectors that we are working with, for the above testing they were fixed at 1e6, without any real justification. This number was picked as an integer divide of the number of points was planning to test with, but could this be optimised, lets test a few Vector lengths with a fixed number of iterations at 1e8.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vector Length&lt;/th&gt;
&lt;th&gt;CPU Run Time (s)&lt;/th&gt;
&lt;th&gt;GPU Run Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1e3&lt;/td&gt;
&lt;td&gt;32.9&lt;/td&gt;
&lt;td&gt;846&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2e3&lt;/td&gt;
&lt;td&gt;21.3&lt;/td&gt;
&lt;td&gt;420&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5e3&lt;/td&gt;
&lt;td&gt;14.4&lt;/td&gt;
&lt;td&gt;176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1e4&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;82.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2e4&lt;/td&gt;
&lt;td&gt;11.7&lt;/td&gt;
&lt;td&gt;44.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5e4&lt;/td&gt;
&lt;td&gt;12.2&lt;/td&gt;
&lt;td&gt;19.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1e5&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;10.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2e5&lt;/td&gt;
&lt;td&gt;11.5&lt;/td&gt;
&lt;td&gt;6.90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5e5&lt;/td&gt;
&lt;td&gt;10.7&lt;/td&gt;
&lt;td&gt;5.60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1e6&lt;/td&gt;
&lt;td&gt;10.4&lt;/td&gt;
&lt;td&gt;5.18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2e6&lt;/td&gt;
&lt;td&gt;10.2&lt;/td&gt;
&lt;td&gt;5.01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5e6&lt;/td&gt;
&lt;td&gt;10.8&lt;/td&gt;
&lt;td&gt;4.94&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1e7&lt;/td&gt;
&lt;td&gt;10.6&lt;/td&gt;
&lt;td&gt;5.04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2e7&lt;/td&gt;
&lt;td&gt;10.6&lt;/td&gt;
&lt;td&gt;5.45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.5e7&lt;/td&gt;
&lt;td&gt;10.6&lt;/td&gt;
&lt;td&gt;6.62&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What we see is that the Run time for the CPU and GPU both hit plateau, with the GPU implementation twice as as the CPU for large vectors. In contrast we also find that for small vector sizes the CPU implementation is significantly fast than the GPU. The vector length of 2.5e7, was the largest size that could be fit in the memory of the Jetson (vectors bigger than this caused failed out of memory errors).&lt;/p&gt;
&lt;p&gt;This is shown that the Jetson Nano can extract some more performance, by making use of the CUPY library to leverage the GPU has given x2 speed up over the CPU vectorised code. The x10000 time speed up from the original looping code, shows that the structure of the algorithm needs to be optimised, before assessing the before on the hardware in question.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Nvidia Jetson case</title>
        <link>https://jjhorton.co.uk/posts/jetson2gbcase/</link>
        <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/jetson2gbcase/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Jetson_case_complete.png" alt="Featured image of post Nvidia Jetson case" /&gt;&lt;p&gt;Before Christmas I picked up a 2GB Jetson Nano to have a play with, I think these devices are interesting with the combination of an ARM processor and GPU. There have been devices like this before, and we even have a spare one at work in our Makerspace but I never found time to have an experiment with one. Now with extra time on my hands over winter with the joy of home working, and the recently released 2GB version for about &lt;a class=&#34;link&#34; href=&#34;https://www.okdo.com/p/nvidia-jetson-nano-2gb-development-kit-with-wifi-bundle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;£55&lt;/a&gt; meant it was time to have an experiment.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_box.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_box.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Jetson Nano&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Jetson Nano&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once I had got to grip with the Jetson Nano, and &lt;a class=&#34;link&#34; href=&#34;https://courses.nvidia.com/certificates/a09ef4efea32411e9647c5f9e4f5a2c9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;completed&lt;/a&gt; NVidia&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://courses.nvidia.com/courses/course-v1:DLI&amp;#43;S-RX-02&amp;#43;V2/about&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Getting Started With AI on Jetson Nano&lt;/a&gt;, I started thinking about 3D printing a case, so that it wasn&amp;rsquo;t another devboard lost down the back of my desk in an anti-static bag. At first I found a lot of design&amp;rsquo;s on thingiverse, but many of these are targeted at the 4Gb version, which has more ports and uses a Dc jack to power it. I did &lt;a class=&#34;link&#34; href=&#34;https://www.thingiverse.com/thing:4649425&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;find an  one on thingiverse&lt;/a&gt; which I printed at first, although I wasn&amp;rsquo;t completely happy with this as a long term solution.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_online.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_online.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;3D Printed Case&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;3D Printed Case&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I decided to take a look at making 3D printing a case that would fit in with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Six Inch Rack Mount&lt;/a&gt; system. As I already have an number of raspberry Pi&amp;rsquo;s in this mini rack mount based system. My plan was that by modifying an existing OpenSCAD model so that I could fit The Jetson Nano in, and that put the correct ports so I would have suitable holes in the back panel. The Jetson Nano, while being bigger than the Raspberry PI 2&amp;rsquo;s that are housed within the same front print, the Jetson Nano fits easily within the same space, except in terms of height due to the large heat sink. To allow the Jetson to fit in the rack mount cabinets I had to use 3U of height (each U is 1.44cm), instead of the 2U in the raspberry Pi cases.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;OpenScad Case&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;OpenScad Case&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack/blob/master/RackCabinets/sixinch_library.scad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Six Inch Library&lt;/a&gt; makes building up the components, using measurements taken from the Jetson Nano, very simple. Passing values for the size of the hole into a function that then builds the part which can then be exported as an STL, and then on to be 3D printed.&lt;/p&gt;
&lt;p&gt;The square holes for each of ports of the ports on the Jetson Nano is described as a point on the back of the case by the first two coordinates, then followed by the X and Y coordinates representing the size of the square hole to be cut out of the back of the case. The other key values as the height of the side screws, which mounts the back panel to the main cabinet, then the number of units or height which in this case is 3 for 3U.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-OpenSCAD&#34; data-lang=&#34;OpenSCAD&#34;&gt;&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sixinch_library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;square_hole&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;92.5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;74&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;round_hole&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;screw_top&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mm
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//mm
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;back_plate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square_hole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round_hole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another key component is the placement of the screw holes in the main cabinet, for mounting the Jetson Board using the mounting screws, the positions are measured from the board and then mapped onto the round peg parts. I used the same M2.5 screws I use when mounting my raspberry Pi&amp;rsquo;s in there Rack Mount, so the peg dimensions were taken from that design in the Six Inch Library.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-OpenSCAD&#34; data-lang=&#34;OpenSCAD&#34;&gt;&lt;span class=&#34;k&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sixinch_library&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;screw_bottom_front&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;screw_side_front&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;round_peg&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
										 &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cabinet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;units&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_bottom_front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;round_peg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screw_side_front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;ldquo;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad2.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_openscad2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Hole possitioning for mounting&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Hole possitioning for mounting&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Getting these measurements alright took a couple of attempts, getting the tolerances correct so that the heights all lined up with the ports, as leaving enough room to actually plug all the cables in were all issues I had, but thankfully almost all were on the back panel, which is quick to produce on the 3D printer.&lt;/p&gt;
&lt;p&gt;The large Heat sink also give a possible indication of heat being an issue, this is already a bit of an issue in the Raspberry Pi Cases, but with the large heatsink, I decided to make use of a mesh front to the case. The mesh front was also available on thingevers, and allows a bit more airflow to the heatsink.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_inside.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_inside.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Part assembled Case&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Part assembled Case&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The mesh based panel is taken directly from the another &lt;a class=&#34;link&#34; href=&#34;https://github.com/pgrondek/SixInchRack/tree/master/RackCabinets/Mesh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github repositry&lt;/a&gt; which contains a number of mesh grids. I have made use of the 3U mesh grid, but I needed to modify the positions of the screws, to line up with where the screws are placed on the main cabinet.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Jetson_case_complete.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Jetson_case_complete.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Full Assembled Case&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Full Assembled Case&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the case all completed, all that is left to do is add some handles when i get some black filament, taking them from the library and start getting a rack together like my Raspberry Pi Cluster. Once its all together I plan to have a look at getting started with &lt;a class=&#34;link&#34; href=&#34;https://cupy.dev/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CUPY&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/rapidsai/cusignal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cuSignal&lt;/a&gt;, and see what is possible with these Jetson Nano Boards.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bring a Raspberry Pi Cluster Back to Life</title>
        <link>https://jjhorton.co.uk/posts/piclusterreborn/</link>
        <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/piclusterreborn/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/RPi2_case_external.png" alt="Featured image of post Bring a Raspberry Pi Cluster Back to Life" /&gt;&lt;p&gt;The raspberry pi cluster was built several years ago for some projects I was doing at the time, and experimenting with parallel computing. While the little raspberry pi&amp;rsquo;s were never going to keep up with a proper PC, they were great for experimenting with the principles of parallel computing, being it making use of the multiple CPU cores on each device or trying to spread the calculation over multiple raspberry pi&amp;rsquo;s. At thats all alongside the battle of dealing with the headache of moving data over a network efficiently.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Testing out some new GNU Octave code on my Raspberry pi cluster &lt;a href=&#34;https://twitter.com/hashtag/RaspberryPi?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#RaspberryPi&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Cluster?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Cluster&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/GNUOctave?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GNUOctave&lt;/a&gt; &lt;a href=&#34;https://t.co/c9OT9g9Ijb&#34;&gt;pic.twitter.com/c9OT9g9Ijb&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/715274998190116864?ref_src=twsrc%5Etfw&#34;&gt;March 30, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;After a couple of years on off experimenting with the raspberry Pi&amp;rsquo;s, when we ,moved to our new flat they ended up sat on the home network, and being used for odd jobs, one even had a old external hard drive attached to provide some Network Attached Storage when I need to move files around. After a reorganisation of the home office they need to find a new home, but having never been put in any sort of case they were not very portable, held together by some velcro.&lt;/p&gt;
&lt;p&gt;Having recently purchased an Ender3 3D printer at the start of the year, it seemed like a good use for the printer to build something a bit more rugged for the Raspberry Pi&amp;rsquo;s to live in. Having a quick look on &lt;a class=&#34;link&#34; href=&#34;https://www.thingiverse.com/thing:2084736&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thingevers&lt;/a&gt;, I came across the Six Inch Library, these cases are all designed to fit into a &lt;a class=&#34;link&#34; href=&#34;https://github.com/KronBjorn/SixInchRack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;six inch rack&lt;/a&gt; mount that is completely 3D printable.&lt;/p&gt;
&lt;p&gt;With a large selection of cases available, I had no problem in finding a suitable couple for both the Raspberry Pi&amp;rsquo;s and the power supply. Although I decided that there could be some small improvements made to make they more suitable for what I was trying to do. A couple of problems I had always had with my cluster was trying to keep a tab on the basic information for each of the Pi&amp;rsquo;s. Information such as Ip address, Memory usage and temperature, and I had always wanted to work out how to attach a screen to one of them to give me a health check at a glance.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RPi2_screen.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_screen.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As each of the Pi&amp;rsquo;s was going in there own case, I went hunting for some displays a could try and mount on the front of each of the cases, and found some small OLED screen on EBay, which gave me 4 lines of text. This was more than enough to display the information I was looking for, I just had to make a custom font panel from the six inch library.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RPi2_Front_outside.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_Front_outside.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RPi2_Front_inside.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_Front_inside.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The Six Inch Library is written in OpenSCAD, which worked well for me, as its programming interface combined with a quick hunt on google allowed me to be able to cut the hole of the screen and build a slot for it to sit in behind, so it could be slotted in without the need for lots of screws. It took 3 attempts to get it to all to fit together correctly, having messed up the measurements and then not allowed enough space to clear the Raspberry pi sitting behind it in the case, and getting the wires from the display round to the GPIO pins.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RPi2_case_internal.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_case_internal.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Having got this together, all that was left it to get the software running to display on the screens, thankfully the screens are very common and there is already a library for them to get it all up and running. The screens are the same as the adafruit ssd1306, and the &lt;a class=&#34;link&#34; href=&#34;https://learn.adafruit.com/adafruit-pioled-128x32-mini-oled-for-raspberry-pi/usage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adafruit examples&lt;/a&gt; and even included example displaying the information I was looking for. Having swapped out the Disk usage for the temperate and added the CPU frequency all was complete for the Raspberry Pi&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RPi2_case_external.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RPi2_case_external.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Adding the python to the crontab to run at reboot, so the display come up when the cluster is powered on, and the code running in a loop to keep it updated it was job done.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now that it is completely assembled as a single unit, I can hopefully move it around a bit easier,  I&amp;rsquo;m hoping to spend some time revisiting some of my old projects I once used the cluster for and see how much more performance I can get out of it now I understand what i&amp;rsquo;m doing with Python a bit more.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>New Website</title>
        <link>https://jjhorton.co.uk/posts/new_website/</link>
        <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/new_website/</guid>
        <description>&lt;p&gt;Well I have finally got around to starting to sort my website out, after my old
one disappeared from the internet. It seems that no one really noticed it was missing
from the internet, so I must have just been talking to myself!&lt;/p&gt;
&lt;p&gt;The old site was a Wordpress blog that I had been using on and off since 2011,
I&amp;rsquo;d also had various attempts at a website since  getting my own domain 2006.
The Wordpress had done well but I hadn&amp;rsquo;t updated in over a year when I got rid
of it, unable to justify paying for hosting a blog that I have never really had
time to update regularly since I finished university.There was a reasonable
amount of content on the site, but a lot of the original posts didn&amp;rsquo;t really
work as Wordpress had lost some of the features I used and a number of key
plug-in I used were no longer available.&lt;/p&gt;
&lt;p&gt;So this is the new site&amp;hellip; Or it will be once I have finished making it work, the
replacement website is now hosted using &lt;!-- raw HTML omitted --&gt;
Github Pages&lt;!-- raw HTML omitted --&gt;, and is a statically generated HTML site created using
&lt;!-- raw HTML omitted --&gt; Pelican&lt;!-- raw HTML omitted --&gt;. Hopefully it will
be easy to keep working and slightly more up-to date than my old blog was!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello World back online</title>
        <link>https://jjhorton.co.uk/posts/first_post/</link>
        <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/first_post/</guid>
        <description>&lt;p&gt;Is anyone there? Trying to get my wedbsite working Again&amp;hellip;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Octave on my Raspberry Pi Cluster</title>
        <link>https://jjhorton.co.uk/posts/octave-on-my-raspberry-pi-cluster/</link>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/octave-on-my-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Octave on my Raspberry Pi Cluster" /&gt;&lt;p&gt;The main aim of building my Raspberry Pi Cluster was so that I could run
octave code on it, now I&amp;rsquo;m not expecting to break any records, but
ideally I want some performance. The best way I found to do this was
with the parallel&amp;rsquo;s package.&lt;/p&gt;
&lt;p&gt;With octave and the parallels package installed on each of the Raspberry
Pi 2&amp;rsquo;s in the cluster, I setup SSH so that no passwords are required
between the nodes. The first step in running the octave scripts was to
launch the parallels server on each of the  3 other Raspberry Pi&amp;rsquo;s that
I&amp;rsquo;m not connected to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;se&#34;&gt;\#&lt;/span&gt;!/bin/bash
&lt;span class=&#34;nv&#34;&gt;USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pi
&lt;span class=&#34;nv&#34;&gt;HOSTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rpi1 rpi2 rpi3&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;SCRIPT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cd Documents/Octave; octave -q clusterStart.m&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; HOSTNAME in &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;HOSTS&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
ssh -l &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;USERNAME&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;HOSTNAME&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\${SCRIPT}&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This launches Octave and runs the following script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;pkg load parallel
addpath&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\~/Documents/Octave/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
addpath&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\~/Documents/Octave/Server&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
pserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With each of these raspberry pi&amp;rsquo;s now running on the 3 other Pi&amp;rsquo;s it is now possible to send simple commands to them and get the results returned to the first Pi. The octave script that I used to test this out is bellow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;clear&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
pkg load parallel
&lt;span class=&#34;nv&#34;&gt;hosts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi0&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi1&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi2&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;rpi3&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;sockets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; connect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;hosts&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;psum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; zeros&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1,3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[1:10\]),sockets(1,:))&amp;#34;&lt;/span&gt;, sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[11:20\]),sockets(1,:))&amp;#34;&lt;/span&gt;, sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
reval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;send(sum(\[21:30\]),sockets(1,:))&amp;#34;&lt;/span&gt;,sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
psum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; recv&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4,:&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;psum&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
scloseall&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sockets&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets up the sockets for all 4 Raspberry Pi&amp;rsquo;s including the one the code is run on (rpi0) and the 3 that are running the pserver (rpi1, rpi2 and rpi3). The code then sends commands as strings to be evaluated at the pserver&amp;rsquo;s, which in this case are simple summation&amp;rsquo;s, and then return the values to rpi0, which adds the 3 values they generated together and displays it on the screen.&lt;/p&gt;
&lt;p&gt;The next step for me in this project is to get it running my Twitter Sentiment Code.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Over clocking my Raspberry Pi cluster</title>
        <link>https://jjhorton.co.uk/posts/over-clocking-my-raspberry-pi-cluster/</link>
        <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/over-clocking-my-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Over clocking my Raspberry Pi cluster" /&gt;&lt;p&gt;With my newly created raspberry pi cluster being made out of the
Raspberry Pi 2, I don&amp;rsquo;t want it to lag to far behind the freshly
announced Raspberry Pi 3. To try and keep up with the new hardware
without replacing all of my Pi&amp;rsquo;s I devices it was worth a go at
overclocking them.&lt;/p&gt;
&lt;p&gt;Overlooking my Pi&amp;rsquo;s should allow them to work a bit quicker, but it will reduce power efficient and increase the tempurature that the cluster runs at. Overclocking can be a dangerous game, as if you run the Pi&amp;rsquo;s to hard you could easily cause hardware damage to the boards if the tempurature gets to high. Thankfully there are plenty of &lt;a class=&#34;link&#34; href=&#34;http://haydenjames.io/raspberry-pi-2-overclock/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;guides on the
Internet&lt;/a&gt; to talk you through sure tasks which is what I used.&lt;/p&gt;
&lt;p&gt;All you have to do is edit the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo nano /boot/config.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then added the following at the end of the file, which increase not
only the clocking frequency, but also the sdram and core frequency. It
also enables over voltage and sets an upper temperature limit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;arm_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;sdram_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;core_freq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;over_voltage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;temp_limit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#Will throttle to default clock speed if hit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After which all there is to do is reboot the Raspberry Pi with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now time to test some code of my cluster and see what the performance increase is&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Building a Raspberry Pi Cluster</title>
        <link>https://jjhorton.co.uk/posts/building-a-raspberry-pi-cluster/</link>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/building-a-raspberry-pi-cluster/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/picluster.jpg" alt="Featured image of post Building a Raspberry Pi Cluster" /&gt;&lt;p&gt;I&amp;rsquo;ve had a long standing interest in Parallel Processing, and then a few months ago I came across Octave and its parallel package. Octave is very similar to MATLAB that I use every day, and for the most part basic MATLAB code works out of the box in Octave.&lt;/p&gt;
&lt;p&gt;I used this as the perfect excuse to build myself a mini-cluster computer&amp;hellip;&lt;/p&gt;
&lt;p&gt;The mini cluster needed to be cheep, so I based it on the raspberry pi. After reading around on the internet it became apparent that this has been done before, so I decided that I needed to give it a go and build my own cluster and run some octave code.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/IMG_1223.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/IMG_1223.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is the result of my work, all held together with velcro with the operating system installed on each unit. I based the setup on &lt;a class=&#34;link&#34; href=&#34;http://makezine.com/projects/build-a-compact-4-node-raspberry-pi-cluster/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; tutorial, but instead of using a Usb Ethernet adapter on the controller I used a WIFI adapter so it could be placed anywhere around the house.&lt;/p&gt;
&lt;p&gt;Things I need to do next are, installing and setting up Octave, also looking to see if I can make a cable to power the network switch from the spare port USB hub, so that the cluster can run of a single plug socket.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Last minute trip to Dartmoor</title>
        <link>https://jjhorton.co.uk/posts/last-minute-trip-to-dartmoor/</link>
        <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/last-minute-trip-to-dartmoor/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DartmoorLM_exeter.jpg" alt="Featured image of post Last minute trip to Dartmoor" /&gt;&lt;p&gt;The original plan for the weekend was for a BVCC club trip up to
Yorkshire to sample some of the white water that is on offer up North,
but it wasn’t too be. Not to be put of by the lack of water up north
arrangements were for a few of us to head south instead, and down to
Dartmoor. With the rooms booked in a local Travelodge on the Thursday
night, and rain forecast it was looking like a good shout.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Packing up all my gear ready for &lt;a href=&#34;https://twitter.com/hashtag/kayaking?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#kayaking&lt;/a&gt; in dartmoor &lt;a href=&#34;https://twitter.com/hashtag/ReadyForTheWeekend?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ReadyForTheWeekend&lt;/a&gt; &lt;a href=&#34;https://t.co/CmxfZ74zGm&#34;&gt;https://t.co/CmxfZ74zGm&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/423926717179510784?ref_src=twsrc%5Etfw&#34;&gt;January 16, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;On the Saturday morning every meet in the little chef next door for some
breakfast and Wifi signal so we could check the gauges and hut out a
river. Unfortunately there hadn’t been as much rain as was hoped, and
the gauges were still showing on the low side, but we decided to head to
the middle Tavy which wasn’t far for the Travelodge we were staying at
in Oakhampton and go for a look at least. The section in town looked
like it was running, so we left my car at the bottom and headed upto the
get on.&lt;/p&gt;
&lt;p&gt;While all the travel faffing and driving had been going on the heavens
had opened, little did we realize it but these little storms would keep
going all day. With the river levels on the rise we were of, during the
time we were on the water the level went from scrape/low on the
rainchasers website to high.&lt;/p&gt;
&lt;p&gt;The middle Tavy is a rewarding run, with its more or less continuous
grade 3 water all the way down, most of which can be inspected from the
boat, giving a good fun run. Most of the group had never run the river
before, and those of us that had, couldn’t remember it, so gave a good
opportunity to practice those river leading skills on some interesting
water.&lt;/p&gt;
&lt;p&gt;After running the river, and popping into Tavistock town center to get
some food we went down to have a look at the Upper section of the River
Plym. The section was running at a high level, but we only went for a
look this evening.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Lots of water for &lt;a href=&#34;https://twitter.com/hashtag/kayaking?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#kayaking&lt;/a&gt; in dartmoor this weekend &lt;a href=&#34;https://twitter.com/hashtag/winning?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#winning&lt;/a&gt; &lt;a href=&#34;https://t.co/f6iGnmflEs&#34;&gt;https://t.co/f6iGnmflEs&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/424616078971764736?ref_src=twsrc%5Etfw&#34;&gt;January 18, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;After heading back to our accommodation, we spent an hour consulting
which pub to visit for food asking the opinions of many including
google, and some locals only to decide to spend the evening at the pub
over the road.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Is de-icing the inside of the windscreen normal? &lt;a href=&#34;https://twitter.com/hashtag/cold?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#cold&lt;/a&gt; &lt;a href=&#34;http://t.co/ActeWWkmCd&#34;&gt;pic.twitter.com/ActeWWkmCd&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/424833896237514752?ref_src=twsrc%5Etfw&#34;&gt;January 19, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Again over night there hadn’t been much rain, and by the time we got up
on Sunday morning everything was covered in frost. With little rain
forecast for the rest of the day we consulted the rain gauges, and
settled on heading out and paddling the Lower Section of the Plym.&lt;/p&gt;
&lt;p&gt;This lower section of the Plym, was of similar difficulty to the section
of the Tavy we paddled on the Saturday with a grading of 3/4. The run
starts of at it most difficult, with some of the rapids hard to see
down, but then settles down into a nice run. At the level we ran it the
group thought that a bit more water would have been beneficial, with a
few of the rapids felling particularly rocky. All in all it was a good
run, that we completed quickly as it was only a few km long.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The question is after paddling the Plym this morning should we now paddle Pots or go to the pub &lt;a href=&#34;https://twitter.com/hashtag/fb?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#fb&lt;/a&gt; &lt;a href=&#34;http://t.co/kdnpwyfPKJ&#34;&gt;pic.twitter.com/kdnpwyfPKJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/424921542665846784?ref_src=twsrc%5Etfw&#34;&gt;January 19, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;After we decided to Pots Weir in Exeter to have a look at the play
feature there, but we bravely decided to head into the pub there, as the
weir was running very high after all the rainfall they have seen down
that was in the last few weeks.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Popping into Wales for a paddle</title>
        <link>https://jjhorton.co.uk/posts/popping-into-wales-for-a-paddle/</link>
        <pubDate>Fri, 10 Jan 2014 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/popping-into-wales-for-a-paddle/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/2014_south_wales.jpg" alt="Featured image of post Popping into Wales for a paddle" /&gt;&lt;p&gt;With most of the country suffering with storms and rain over the
Christmas period one of the few groups of people who were looking out
the window all excited were the kayakers…&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I think the ford maybe a bit to deep today, time to find another way around &lt;a href=&#34;https://twitter.com/hashtag/flood?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#flood&lt;/a&gt; &lt;a href=&#34;http://t.co/FylGGkijTS&#34;&gt;pic.twitter.com/FylGGkijTS&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/418769624868859904?ref_src=twsrc%5Etfw&#34;&gt;January 2, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Unfortunately unable to get out paddling until after the new year we hit
the road on the Friday after new year to meet up in Swansea ready for a
bit of paddling. Despite the huge amount of water that seemed to be
flooding most of the field I saw on my journey into south wales the
river levels on Saturday morning seemed disappointingly low. Despite
this we headed of out of Swansea to the River Tawe.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A good day &lt;a href=&#34;https://twitter.com/hashtag/kayaking?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#kayaking&lt;/a&gt; today in South Wales, managed to find some water for once! &lt;a href=&#34;http://t.co/EDCg4JCZL7&#34;&gt;pic.twitter.com/EDCg4JCZL7&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/419518659380273153?ref_src=twsrc%5Etfw&#34;&gt;January 4, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;The river could have done with a bit more water, we meet another group
at the get on, who had decided it was too low for them and were heading
elsewhere in search of water. We decided it was worth a run, so hopped
on and went for a paddle. The river is made up of some fun rapids,
including a good slide and a decent ledge drop.&lt;/p&gt;
&lt;p&gt;After running the river we went for a walk up another local river that
wasn&amp;rsquo;t running, which had amazingly good phone reception considering how
remote it seemed!  The river showed some great potential, but with trees
stuck across the majority of the river and it being in need of some more
water it wasn’t going to be happening this weekend.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Not sure where we are but it has 3G signal &lt;a href=&#34;https://twitter.com/hashtag/lost?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#lost&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/wales?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#wales&lt;/a&gt; &lt;a href=&#34;http://t.co/b0xUPIqwlI&#34;&gt;pic.twitter.com/b0xUPIqwlI&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Horton (@JamesjHorton) &lt;a href=&#34;https://twitter.com/JamesjHorton/status/419488264731373568?ref_src=twsrc%5Etfw&#34;&gt;January 4, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;After all this we retired back to Swansea for some Champaign out of
mugs, before heading of down to our natural habitat… the pub.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>A weekend on the Wye</title>
        <link>https://jjhorton.co.uk/posts/a-weekend-on-the-wye/</link>
        <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/a-weekend-on-the-wye/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF3394.jpg" alt="Featured image of post A weekend on the Wye" /&gt;&lt;p&gt;After reaching the end of yet another year at uni (and almost the end of
my time there), I tagged along with &lt;a class=&#34;link&#34; href=&#34;http://bvcc.org.uk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blackwater Valley Canoe
Club&lt;/a&gt; (BVCC) for a trip along the River Wye.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF3373.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF3373.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As I no longer have much to do with my time (expect move out my old
house), I decided to take an extra day off, and head across to the Black
Mountains for a bonus day of cycling in the unusually sunny Wales.
Getting almost 30 Km of cycling was well worth it for the last few miles
of decent even if I did have a disagreement over the direction that my
Mountain Bike should be going, and fell off scraping a lot of skin of my
legs in the process.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF3388.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF3388.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As for the kayaking on the first day we paddled along the Wye to Symonds
Yat in the big boats, with a bit the paddling being a bit more relaxed
than the typical white water river I&amp;rsquo;m used to in this boat. Although
having a boat that moves fast though the water is helpful when there is
a lot less help from gravity than i&amp;rsquo;m used to.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF3394.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF3394.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For the second day, we got in just above Symonds Yat, and played in the
rapids again before heading on down river and into Wales which is
unusually Sunny yet again. Paddling all the way to Monmouth, where there
was handily a pub to have lunch in before heading back to England.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>36 Hours in North Wales</title>
        <link>https://jjhorton.co.uk/posts/36-hours-in-north-wales/</link>
        <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/36-hours-in-north-wales/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF2940.JPG" alt="Featured image of post 36 Hours in North Wales" /&gt;&lt;p&gt;After the lack of paddling while up in scotland the opportunity came for
to spend the weekend up in north wales with &lt;a class=&#34;link&#34; href=&#34;http://www.bromleycanoeclub.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bromley Canoe
Club&lt;/a&gt;. Unfortunately yet again it
was looking like there would still be a complete lack of water, but
knowing that at least the River Dee would be running I packed my
Playboat and in the early hours of Saturday Morning headed to the
&lt;a class=&#34;link&#34; href=&#34;http://www.tyddynbychan.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bunkhouse&lt;/a&gt; they were staying at.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2890.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2890.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The Bunkhouse was one I stay at regularly, so regularly with the
different paddling groups that lydia the owner wanted to check which
name they knew me by &amp;ldquo;Potter&amp;rdquo;, &amp;ldquo;Harry&amp;rdquo; or &amp;ldquo;James&amp;rdquo; as well as find out
the details of what had happened to Richard&amp;rsquo;s van while up in scotland.
After much faffing and breakfast we headed to the River Dee, which in
the past I have only paddled in low or very high water, but this time it
was a good level, providing some good play waves and serpents tail
almost managed to back loop me, but I managed to keep my head dry.&lt;/p&gt;
&lt;p&gt;With the Trywern not releasing for the weekend and only a bit of rain
for the night, we were expecting to end up back on the Dee again
tomorrow, so I chose not to run town fall instead opting for one of the
many river left lines down under the bridge, to get back to the car a
bit quicker&lt;/p&gt;
&lt;p&gt;So came Sunday morning, and it turned out there had been a fairly
large amount of rain over night. It soon became apparent as we were
traveling around that the rivers were high, as we saw groups paddling
though fields alongside the A5! After looking around for a bit we
settled on running the River Conwy, which made me wish I had packed the
River Runner - as the playboat (Dagger Kingpin) was hardly the ideal
boat to be takling this in, especially as we watched the gauge under the
bridge disappear bellow the water line&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2934.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2934.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2937.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2937.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The river turned out to be good fun, the river had become big
and bouncy which was great fun in the playboat, testing my ability to
stay upright all the way along. The stoppers produced some entertaining
moments, which combined with the eddy lines ensuring I saw a lot of the
sky on my way down the river. We had a few swims in the group, which
produced some challenging boat chases especially in my little playboat
searching for eddies behind trees and rocks that are normally on the
bank.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2940.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2940.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All in all it turned out to be a great weekend, maybe next time I&amp;rsquo;ll
think to pack my river runner just incase it rains in wales!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Week Two in Scotland</title>
        <link>https://jjhorton.co.uk/posts/week-two-in-scotland/</link>
        <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/week-two-in-scotland/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/544146_10151527924663011_1555724195_n.jpg" alt="Featured image of post Week Two in Scotland" /&gt;&lt;p&gt;Well week 2 wasn&amp;rsquo;t much different to week 1, with there still being no water in Scotland. As a result much of the time was spent walking and sight seeing rather than kayaking.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2758.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2758.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We paddled the River Awe, which allowed us to see some interesting signs, hide Richards boat in the middle of the river and experience a bit of white water.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2696.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2696.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2697.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2697.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Luckily the River Garry was releasing again this week, which gave me opportunity to get my head wet, as well as practice my air brace.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/482860_10151593707651079_1922721987_n.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/482860_10151593707651079_1922721987_n.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/aoifestrahan&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Aoife Strahan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/544146_10151527924663011_1555724195_n.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/544146_10151527924663011_1555724195_n.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;
Photo By Phil Porter&lt;/p&gt;
&lt;p&gt;Apart from that there was just much driving, walking, sight seeing and general relaxing at the spa - Certainly not the 2 weeks away that I had
planned in my mind but a relaxing holiday instead. Lets just hope for some more water next time!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Week one in Scotland</title>
        <link>https://jjhorton.co.uk/posts/week-one-in-scotland/</link>
        <pubDate>Tue, 02 Apr 2013 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/week-one-in-scotland/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF2219.JPG" alt="Featured image of post Week one in Scotland" /&gt;&lt;p&gt;This last week I have been in the Fort William area with the university
of Surrey Canoe Club, for a week of white water paddling. Despite Fort
William being known for giving reliable white water we managed to pick
the time of year were there was no rain, and only snow!&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/IMG_0363.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/IMG_0363.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The journey up to Fort William had been a battle, with the country being
hit by large snowfall and high wind warning along almost the entire
route, but all the vehicles managed to make it along the A82 without
incident, unlike many cars that were seen along the way.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2633.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2633.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We stayed near the &lt;a class=&#34;link&#34; href=&#34;http://www.inchree.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inchree Chalets&lt;/a&gt;, not far
outside fort william, with 3 of them rented for the group.&lt;/p&gt;
&lt;h2 id=&#34;sunday&#34;&gt;Sunday&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2219.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2219.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Despite being warned of the low water, we were hopeful that at least
some of the rivers would run, but it was today that we realized just how
little water was going to be about, unless we got some more rain. The
first river we tried was the Spean Gorge Section, which should be
runnable in most levels, but as we soon found out most levels doesn’t
include as low as this. Many sections that we would have expected to
find features were none existent, and some not even passable, with the
portage becoming a way of life. This is also before you coincided the
long flat water scrape back to the vehicles.&lt;/p&gt;
&lt;h2 id=&#34;monday&#34;&gt;Monday&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2238.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2238.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the lack of water the day before, instead of heading of kayaking
most of the group went for a walk to look at the Inchree Falls that were
located close to the bunkhouse. With much of the group going for an
explore around the falls which have been run a handful of times,
followed by a number of people scaling a nearby hill, to see the view,
and the snow.&lt;/p&gt;
&lt;h2 id=&#34;tuesday&#34;&gt;Tuesday&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2287.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2287.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With the group not managing to get on the water the day before, we
decided to give the Arkaig a go, this river runs between 2 lochs, but
even this does not guarantee there will be any water. The river was
found to be runnable, if not completely different to how it would be
normally.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2300.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2300.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Most of the group ran the main rapid multiple times, making use of the
water and the short walk back up. At the get off to the river is a
bridge going over the loch, which many people may have jumped off.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2375.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2375.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;wednesday&#34;&gt;Wednesday&lt;/h2&gt;
&lt;p&gt;Not for the first time this week we found the lack of water an issue, so a number of the group decide to go and make use of another form of white water up in Glencoe, and go skiing instead. With the remainder of the
group taking a walk up the River Nevis in the afternoon.&lt;/p&gt;
&lt;h2 id=&#34;thursday&#34;&gt;Thursday&lt;/h2&gt;
&lt;p&gt;Today we had some guaranteed water in the form of the first dam release
of the year on the River Garry. This made a welcome break from the rest
of the week were the group were able to paddle without scraping along
the rocks like previous rivers.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2489.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2489.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;When we arrived at the get on the river was quiet and the water was
still rising, but it didn’t take long for the river level to have risen
and the car park to have been filled. The river had large numbers of
groups, making the most of the release to get out paddling with a number
of university groups around.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2465.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2465.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Following on from a good few runs we heading to the Moriston to see what
the levels looked like up there, but the lack of water was easy to see.&lt;/p&gt;
&lt;h2 id=&#34;friday&#34;&gt;Friday&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2525.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2525.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For the first day of the week the river level in the Etive had picked up enough to make it worth a fun, so the group decided to jump on for a run while they could. Triple Falls had enough water to fall over, along with a scrap through bits in between that the group was able to run.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2620.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2620.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All this was enough to ensure that people got some photos of them
falling over right angle falls before the final day.&lt;/p&gt;
&lt;p&gt;Now the university group head backs to Guildford, but i’ve got another
week of waiting for the rain gods to provide some water&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Lake District</title>
        <link>https://jjhorton.co.uk/posts/lake-district/</link>
        <pubDate>Tue, 26 Feb 2013 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/lake-district/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF2173.JPG" alt="Featured image of post Lake District" /&gt;&lt;p&gt;Last weekend I joined &lt;a class=&#34;link&#34; href=&#34;http://www.bvcc.org.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blackwater Valley Canoe
Club&lt;/a&gt; for a trip unto the Lake District, for
most of the people going they were heading up on Thursday making the
most of the February half term. Unfortunately we don’t get half terms at
university, so I had to wait until my final lecture had finished at 5pm
on Friday to hit the road and head north, which as it turns out is a
very long way! Even only taking only one stop along the way it still
took almost 6 and a half hours including the time spent in traffic, not
getting to the
&lt;a class=&#34;link&#34; href=&#34;http://dentonhouse-keswick.co.uk/pages/accommodation.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bunkhouse&lt;/a&gt;until
11:59PM.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2164.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2164.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After the early start on Saturday we headed north to do the River Eden,
which as with the rest of the rivers up north this weekend was low. The
river was mainly flat, with large sections of flat water paddling, but
the final rapid and pub at the end made up for this. This river was also
the first outing of my new paddles picked up only a few days ago on the
way to an interview. Being a low run it was hardly ideal, and there are
already scratches on the paddles! After this it was back to the
bunkhouse and off into town to look though the many outdoor shops, 
trying to avoid spending money on lost of shiny new toys, but I managed
to get away only buying a new sling and crab.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF2173.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF2173.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;On the Sunday we paddled the River Kent, the section was much shorter
than what we had paddled on The River Eden, as well as being much more
action packed. The rapids were all located quickly together, together
with a few small drops which made for a great run. The odd thing about
this paddling is that we were done much earlier than normal (Before
Midday), but with the long run home we decided to head of home early
after a bit of Dry suit conga (Photo bellow by &lt;a class=&#34;link&#34; href=&#34;http://www.fluidfocus.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mike
Hamilton&lt;/a&gt;), knowing that we had many hours
of driving ahead.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jjhorton.co.uk/wp-content/uploads/2013/02/P1020358.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://jjhorton.co.uk/wp-content/uploads/2013/02/P1020358.jpg&#34; &gt;
		&lt;img src=&#34;http://jjhorton.co.uk/wp-content/uploads/2013/02/P1020358.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;P1020358&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;P1020358&lt;/figcaption&gt;
	
&lt;/figure&gt;{.aligncenter
.size-full .wp-image-424 width=&amp;ldquo;640px&amp;rdquo;
height=&amp;ldquo;480px&amp;rdquo;}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Full BVCC Trip report available
&lt;a class=&#34;link&#34; href=&#34;http://www.bvcc.org.uk/2/forum/viewtopic.php?f=36&amp;amp;t=829&amp;amp;p=3006#p3006&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>A cold weekend in Dartmoor</title>
        <link>https://jjhorton.co.uk/posts/a-cold-weekend-in-dartmoor/</link>
        <pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/a-cold-weekend-in-dartmoor/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF1930.JPG" alt="Featured image of post A cold weekend in Dartmoor" /&gt;&lt;p&gt;Last weekend was spent in one of the places that I have kayaked the
most, dartmoor. Although trips here normally revole around the river
dart, normally on the loop and upper this time we
found ourselves looking further afield. Paddling with 4 friends from uni
on the same weekend that the &lt;a class=&#34;link&#34; href=&#34;http://gene17.com/riverssource/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;River
Source&lt;/a&gt; event the aim was to try and
avoid the country park as best we could.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF1897.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF1897.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Our accommodation for the weekend was a &lt;a class=&#34;link&#34; href=&#34;http://www.yha.org.uk/barn/great-hound-tor-camping-barn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YHA camping
barn&lt;/a&gt; which is
basic at best, very different to the usual bunkhouses with beds and
central heating. This was a barn with some areas for sleeping, a gas
camping stove, and a wood burn and that is it. The main advantage of
this was that it was dirt cheap, helping keep the cost fo the weekend
down.&lt;/p&gt;
&lt;p&gt;On Saturday morning we were joined by Rich who for reasons we never
really worked out had driven down in the small hours of the morning, and
we paddled the Walkham. The river Walkham both me and Richard had
paddled before, but for the others this was a new river. The levels
were reasonably good, although in places we could have done with a few
more cm&amp;rsquo;s. One surprise that we did find was a log stuck just bellow the
slot, which was a point of concern, but didn&amp;rsquo;t cause us any issues.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF1919.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF1919.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We had originally hoped we would be able to do 2 rivers on the saturday
morning, and although we were up bright and early it didn&amp;rsquo;t work out,
allowing us only 3 hours until sunset as we reached our get off we
headed for a local cafe for some warmth, before heading on to the pub in
Princetown.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF1930.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF1930.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Sunday morning didn&amp;rsquo;t really go to plan, after going to sleep a bit
later than planned as we were sat around the warm fire, followed by the
phone we were using as a alarm running out of battery we didn&amp;rsquo;t even
wake up until 8:30. The group headed of to see if the River Erme had
enough water to run, and although it was on the low side decided it
would be runnable. Richard and myself had been lucky enough to have
paddled it in the summer when it was higher and decided to give it a
miss with Richard joining some of my mates from &lt;a class=&#34;link&#34; href=&#34;http://www.bromleycanoeclub.co.uk/index.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bromley Canoe
Club&lt;/a&gt; who had been down for
the &lt;a class=&#34;link&#34; href=&#34;http://gene17.com/riverssource/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;River Source Weekend&lt;/a&gt; that was
taking place at the country park.&lt;/p&gt;
&lt;p&gt;I decided to head to a local cafe, and then take a walk up the path to
get a few photos of the group heading down the river. We then hit the
road home with a short diversion into Exeter to &lt;a class=&#34;link&#34; href=&#34;http://www.millontheexe.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mill on the
Exe&lt;/a&gt; to see the Pots Weir and have a
meal before heading back to guildford.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>A weekend on the Barle</title>
        <link>https://jjhorton.co.uk/posts/a-weekend-on-the-barle/</link>
        <pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/a-weekend-on-the-barle/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/2012_Barle_3.jpg" alt="Featured image of post A weekend on the Barle" /&gt;&lt;p&gt;For the 4th year in a row a trip down the River Barle marks the start
of my winter white water session here in the Uk. The river Barle being
my second white water kayaking trip seems like a long time ago,
paddling for survival in one of the &lt;a class=&#34;link&#34; href=&#34;http://uniscanoe.co.uk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;University of Surrey Canoe
Club&lt;/a&gt; boats on my second trip since starting
university. Now 4 years on I find myself drifting down the river in my
play boat drifting along enjoying the sights. This year I joined
&lt;a class=&#34;link&#34; href=&#34;http://BVCC.org.uk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blackwater Valley Canoe Club&lt;/a&gt; for the trip, along
with 5 other ex-Surrey students.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/2012_Barle_1.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/2012_Barle_1.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After spending the morning in university on Friday the quickest packed
I&amp;rsquo;d managed to do in a long time, we hit the road and headed for
exmoor down the A303, a road that I normally get to know quiet well
over the winter months. For the weekend we were staying at &lt;a class=&#34;link&#34; href=&#34;http://exmoorhostel.co.uk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dulverton
Residential Center&lt;/a&gt;, somewhere we have all
stayed a number of times before. The hostel has to be one of the most
confusing layouts that I have experienced in a bunkhouse, with a
basement kitchen, and 2 upstairs floors of bedrooms connected by what
seems like a maze of staircases. That said it is one of the most
comfortable bunkhouses we stay in each year, combined with central
heating which is well worth it given the freezing temperatures that
we&amp;rsquo;re forecast each night.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/2012_Barle_2.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/2012_Barle_2.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This weekend there seemed to be a lack of water in the river, just
enough to float down the river but continuous rock dodging especially
on the Saturday where we paddled from Tar Steps to Dulverton. The
paddling on the Sunday was much better, aided possibly from some rain
on Saturday night where we continued down the river to exe bridge.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/2012_Barle_3.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/2012_Barle_3.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Low Cost Quad Rotor Design and Implementation Report</title>
        <link>https://jjhorton.co.uk/posts/low-cost-quad-rotor-design-and-implementation-report/</link>
        <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/low-cost-quad-rotor-design-and-implementation-report/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/QuadcopterFrame.png" alt="Featured image of post Low Cost Quad Rotor Design and Implementation Report" /&gt;&lt;p&gt;Now that the project is long finished and my marks for the year have
been given I thought I would share the final report for the project.&lt;/p&gt;
&lt;p&gt;Although the project was not completed, with me unable to finish tuning
the PID control loops to a standard were it would be able to fly, I was
successfully able to get the quad rotor to be able to balance most of
the time on its test jig. Hopefully at some point in the future I will
be able to finish the project, but at the moment there is just too much
to do and not enough time.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jjhorton.co.uk/wp-content/uploads/2012/11/FinalProjectReport.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Low Cost Quad Rotor Design and Implementation Final
Report&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hurley for the day</title>
        <link>https://jjhorton.co.uk/posts/hurley-for-the-day/</link>
        <pubDate>Fri, 31 Aug 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/hurley-for-the-day/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/2012_Hurley_1.jpg" alt="Featured image of post Hurley for the day" /&gt;&lt;p&gt;After nearly 4 years of paddling I&amp;rsquo;ve finally got around to getting
some qualifications, the first one a few weeks ago was the FSRT
(Foundation Safety and Rescue) Training. The training was run by Simon
from backwater valley canoe club and was good fun, even though last
year I did my advanced white water safety and rescue.
We did the course on the river Thames, nearly Hurley weir and to break
the day up we couldn&amp;rsquo;t say no to a quick play on the weir which was on
2 gates.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/2012_Hurley_2.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/2012_Hurley_2.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Serial Communication and MATLAB</title>
        <link>https://jjhorton.co.uk/posts/serial-control-and-matlab/</link>
        <pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/serial-control-and-matlab/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/QuadcopterFrame.png" alt="Featured image of post Serial Communication and MATLAB" /&gt;&lt;p&gt;For producing the Quad Rotor&amp;rsquo;s GUI I needed to be able to implement the
serial communication in MATLAB. This it seemed would be a simple task as
on windows machines it is a simple task of opening the comms port, send
the data, and closing the port. All seemed so simple, but as it turns
out this was not the case on the Mac which I was using from my project
with MATLAB R2008a&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s = serial(&#39;/dev/tty.usbserial-FT4KIQ90&#39;);
fopen(s);
fprintf(s, &#39;a&#39;);
fclose(s);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I found that the serial interface on this version of MATLAB was not
fully implemented, as a result every time that you tried to close the
serial port you would need to restart the computer, which is far from
ideal. Luckily for me my university had just made available the latest
version of MATLAB (R2011a) which supported the serial communication
commands that I needed.&lt;/p&gt;
&lt;p&gt;So how does the serial communication work? Well it all starts when the
user request the software to connect to the Quad Rotor, this checks to
see if the serial port is open or not, then if it is not it opens up the
serial link. This series of events first starts when the GUI is opened
up, at this point the serial object is created, with the parameters set
at this stage it allows the program to access it at any point though a
common interface. For the purpose of testing I am using a USB serial
connection in place of the bluetooth link, to prevent problems that
could be caused in the case of a communication failure. At this point
the BaudRate is set for the link, which is 115200, the same as used in
pervious tests, apart from this I user the standard settings for the
port.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;handles.s = serial(&#39;/dev/tty.usbserial-11BP0140&#39;);
handles.s.BaudRate = 115200;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Opening the connection, with the object no created it is possible to
connect to the Quad Rotor. This is done when the user selects the
Connect Button, which is names cmdConnect, and calls the function
bellow.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% --- Executes on button press in cmdConnect.
function cmdConnect_Callback(hObject, eventdata, handles)
% hObject handle to cmdConnect (see GCBO)
% eventdata reserved - to be defined in a future version of MATLAB
% handles structure with handles and user data (see GUIDATA)

%check if the serial port is avalible to connect to
if isa(handles.s,&#39;serial&#39;) &amp;amp;&amp;amp; isvalid(handles.s)
if strcmpi(get(handles.s,&#39;Status&#39;),&#39;open&#39;)
addstr = cellstr(&#39;Already Connected to Quadrotor&#39;);
else
fopen(handles.s);
addstr = cellstr(&#39;Connected to Quadrotor&#39;);
pause(2);
end
commsStats = &#39;Connected to Quadrotor&#39;;
%set the enabled buttons
set(handles.cmdDisconnect, &#39;Enable&#39;, &#39;on&#39;);
set(handles.cmdConnect, &#39;Enable , &#39;off&#39;);

else
addstr = cellstr(&#39;Failed to connect to quadrotor&#39;);
commsStats = &#39;Disconnected from Quadrotor&#39;;
end

%add the log update to the gui
oldstr = cellstr(get(handles.lbDataveiw, &#39;String&#39;));
set(handles.lbDataveiw, &#39;str&#39;, { addstr{:} ,oldstr{:} });
%set(handles.tbComms, &#39;str&#39;, commsStats);
set( handles.tbComms, &#39;String&#39;, commsStats );
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function carries out a few simple error checks to ensure that the
program only calls the function that opens the COM port at the right
time, otherwise MATLAB and GUI could crash. It first checks that the
serial port object has been created, and if it is valid. This allows the
confirmation of if the serial port exists, as the Quad Rotor may not
have power, be disconnected from the setup, or the port is in use by
another program, in this case it reports to the user about the failure,
by adding a new cell to the text reporting system in the GUI.&lt;/p&gt;
&lt;p&gt;Now that it confirmed that the port exists it checks if the port is
actually open or not, using the following code, which comes back with a
true or false statement which is used as part of an If statement.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;strcmpi(get(handles.s,&#39;Status&#39;),&#39;open&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the port is already open it again reports this to the user, but if
all the details are correct then it is able to open the connection to
the Aurdino Microcontroller on board the quad rotor.&lt;/p&gt;
&lt;p&gt;The next stage in the system is sending data to the Aurdino
Microcontroller, and receiving it back. This is relatively straight
forward, to send the data, For example to request a communication link
test:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fprintf(handles.s, &#39;t&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then to receive the data that is send back we use:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;testresult = fscanf(handles.s);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next stage on the process, is now to close the serial port. This is
important to free it us for use with other programs, and ensure we are
able to connect to it again when the program is next started up. The
port can simply closed using the following command, which closes the
connection:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fclose(handles.s);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In my case this is called when we click on the Disconnect button in the
GUI. Next thing to do on the project now is automating the process of
sending an receiving this data.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The journey home begins</title>
        <link>https://jjhorton.co.uk/posts/the-journey-home-begins/</link>
        <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/the-journey-home-begins/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/LastDayinScotland.JPG" alt="Featured image of post The journey home begins" /&gt;&lt;p&gt;With everyone up and awake early, they knew they had a long journey
ahead, with the chalets clean everyone hit the road for home, well not
quiet everyone. I headed in the opposite direction, with my sights set of
the Nevis Range. This was another chance to have a run at some of the
routes I had done on Wednesday. This time I only managed to do
the Championship Red Route, having not fully recovered from yesterdays
kayaking, with it taking me longer this time than it did on Wednesday.
So with the weather not looking very good I hit the road and started on
the journey home, the difference begin I was taking my time unlike the
journey there, so stopped off a few times to take pictures and watch a
random man plan the bagpipes.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/LastDayinScotland.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/LastDayinScotland.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Only a few mountains stand between me and my hoteltonight&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Only a few mountains stand between me and my hoteltonight&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After all these stops I made it to my home for the night, a Travelodge
in Glasgow, swapping the view off the highlands to one of Type
45 Destroyers that are being finished off on the other side of the
river.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</description>
        </item>
        <item>
        <title>The final day in the kayak</title>
        <link>https://jjhorton.co.uk/posts/the-final-day-in-the-kayak/</link>
        <pubDate>Fri, 13 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/the-final-day-in-the-kayak/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/DSCF1027.JPG" alt="Featured image of post The final day in the kayak" /&gt;&lt;p&gt;Well we all knew this days was coming, the final day of kayaking in
Scotland. Having know this was coming we had planned an epic day of
kayaking, all starting with the earliest alarm of the week at 7am, ready
to hit the road at 8am with the satnav&amp;rsquo;s aimed at Glen Etive&lt;/p&gt;
&lt;p&gt;The reason for this early start would all soon before clear, that being
the longest and hardest walk in that I have ever undertaken, which make
the walk in on the Garry seem small in comparison. This river is a
tributary to the River Etive, the Allt a&#39; Chaorainn, This river as
described by richard &amp;ldquo;is gravity feed, water is only required for
lubrication&amp;rdquo;, and I can&amp;rsquo;t say he isn&amp;rsquo;t wrong. With the early start and
the long hike, when we were stood in the middle of nowhere at 10am,
ready to hit the water I was hoping he was right.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF0989.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF0989.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For the 5 off use who took our boats along for the long hike the effort
easily justified, taking us down huge rock slides, narrow slots while
testing our ability to dodge rocks. As we went down the river we
were accompanied by Rhiannon, Ian and Emma who had been entrusted  with
the cameras, so hopefully the photos should appear over the next few
days of the trip.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/ScotlandSlide2012.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/ScotlandSlide2012.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Me making my way down Pinball Machine&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Me making my way down Pinball Machine&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After arriving at the bottom of the river we packed the boats into the
back of richards Van, and prepared to head off to do what everyone had
been waiting for, the Etive. For many people including myself this was
the opportunity to run some of the biggest drops we have ever done, as
well as get some new Facebook profile pictures. We started of at tripple
falls  (which was much more impressive than the other tripple falls I
had done on the Dart Loop!), watching richard to a run first to give use
who had never done it before an idea off the line.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF0998.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF0998.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We then set up safety, and the first guys and girls where off with
Rhiannon following Richard down, she made it successfully down the first
drop, only to go over at the bottom. Following a failed attempt at
rolling, then taking a swim beween the first and second drop. She was
then followed by Polina, who powered down both the first and second
drop successfully and even survived a few iffy moments in the eddy
bellow the drop. Bob, followed the girls down, making a point of saying
hello to Mike on the way down although we don&amp;rsquo;t think it was
intentional! With the 4 off them back in the boats they made there way
down the final drop with Polina taking a swim at the bottom. Myself and
Zoe, then joined richard to a quick run from top to bottom, with
Richards only run to be caught on camera he messed up. Not to mention
Zoe needing Richards Help after ending up against the wall at the bottom
of the 3rd drop.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF1027.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF1027.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;At the bottom, most people pilled into the cars and headed off to right
angle falls, with Richard, Zoe, Bob and myself paddling down the river
to meet them, while Mike headed down with his camera kit to capture the
action as we paddled down. With both me and Bob having never paddled the
river we were relying on Richard&amp;rsquo;s and Zoe&amp;rsquo;s memory, Richard took the
lead, for another amazing section of river. With each feature known not
my its name but by who ran it, and who/what got broken there when the
university group paddled it last year. The quick pace off the run made
it really enjoyable, with quick inspections off the features, and the
small number of us allowing for a quick run of the river. The run was
uneventful, apart from Zoe&amp;rsquo;s swim at letter box, for which richard wins
the award of most useless throw line for (all will be explained when the
video appears).&lt;/p&gt;
&lt;p&gt;We were soon down at Right Angle Falls, and ready to do the biggest
waterfall that many off us had ever done. The girls who had done tripple
falls  took the option for Richard to launch them from directly above
the drop, both completing it successfully, albeit with a bit of swimming
after. The time came for my run, and I seemed to go for the option off
keep paddling and then air brace (something I seem to have a habit
of), disappearing underwater for sometime, but resurfacing upright,
meaning I managed to stay upright for the whole trip, without the need
for a single roll!&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/RightAngle2012.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/RightAngle2012.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Me heading over right angle falls&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Me heading over right angle falls&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;During the time we were are Right Angle Falls every single weather
Scotland could trow at us had come though; Sun, Rain, Wind, Hail and
Snow, but Nothing seemed to be able to wipe the smile of peoples faces,
it was a great way to end the weeks paddling, now time to pack up ready
for most people to hit the road home tomorrow, while I&amp;rsquo;ll be off
Mountain Biking.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Communication Control</title>
        <link>https://jjhorton.co.uk/posts/communication-control/</link>
        <pubDate>Mon, 09 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/communication-control/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/GUIWithData.jpg" alt="Featured image of post Communication Control" /&gt;&lt;p&gt;For the Quad rotor to work I need some control over it, I have got my
&lt;a class=&#34;link&#34; href=&#34;http://jjhorton.co.uk/archives/67&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;communications link&lt;/a&gt; all set up, but
I need to sort out what I&amp;rsquo;m going to send over it. Previously I had just
been sending gyroscope or accelerometer readings, but now this needs to
become a two way system and for that I need to write some code at both
ends that is up to the task.&lt;/p&gt;
&lt;p&gt;For the computer side of things I&amp;rsquo;m going to be using MATLAB, there are
2 reasons I have chosen MATLAB for this task, the first of which is that
I have done similar control stuff in MATLAB before, and the second being
that there is lots of support out there for this kind of task for
MATLAB. With MATLAB having many of the functions that I will need built
in all I need to do is join up the dots.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/GUIWithData.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/GUIWithData.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The above shows GUI that I developed to do the task, bellow I&amp;rsquo;ll talk
you though its main functions. The user interface was created using the
GUIDE (Graphical User Interface Development Environment) that is
supplied with MATLAB, which made placing all the parts in place simple
case of drop and drag, but then came the part of making them do
something. The GUI is made up of the following core components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic 3D Graphical display of the Quad Rotors orientation&lt;/li&gt;
&lt;li&gt;A plot of the 3 gyroscopes readings over the last 30 seconds&lt;/li&gt;
&lt;li&gt;A plot of the 3 accelerometers readings over the last 30 seconds&lt;/li&gt;
&lt;li&gt;A text display of the data sent and received from the Quad Rotor&lt;/li&gt;
&lt;li&gt;Button down the right hand side to control the quad rotor with&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Falls of Lora</title>
        <link>https://jjhorton.co.uk/posts/falls-of-lora/</link>
        <pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/falls-of-lora/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/FallsofLora.jpg" alt="Featured image of post Falls of Lora" /&gt;&lt;p&gt;Today we were up early, for the second day of paddling we were going to do something a bit stupid, the falls of lora.&lt;/p&gt;
&lt;p&gt;The Fall of Lora are formed as the tide changes, and lasts for a few hours, with the height of the tide determining how and which waves form. Today happened to be one off the biggest of the year and we happened to be there, an opportunity to be missed.&lt;/p&gt;
&lt;p&gt;Me and Richard were the only ones stupid/brave enough to give it a go, joining the large numbers of locals, and university groups that had turned out to see what it is all about. Getting there nice and early to watch it form we then hoped of the water at around 11:30, with the
wave still building. Richard was at home on the wave enjoying a good surf and play of the wave, unlike me. I was struggling with the huge eddie line and still not feeling at home in my playboat, as a result I only had a few goes which I didn&amp;rsquo;t achieve much in.&lt;/p&gt;
&lt;p&gt;While we were here the rest of the group went on to paddle the River Awe, but we decided rather than chasing them the local cafe along with an hour in the spa was a better idea.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/IMG_8556.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/IMG_8556.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>First day in Scotland</title>
        <link>https://jjhorton.co.uk/posts/first-day-in-scotland/</link>
        <pubDate>Fri, 06 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/first-day-in-scotland/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/FirstDayScotland.jpg" alt="Featured image of post First day in Scotland" /&gt;&lt;p&gt;After the long drive yesterday, today we hit the first river off the
trip the River Loche. Although you would think the rivers would have had
enough of driving following the 100&amp;rsquo;s of miles covered yesterday,
everyone seemed to enough the rally stage like road which takes you to
the get on, the single track making a nice change to the motorway and A
roads everyone had been traveling on yesterday.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/DSCF0816.JPG&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/DSCF0816.JPG&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This river was a gentle start to the trip, with the river being mostly
flat. It was also our first opportunity to paddle as a group, and see
how everyones paddling was, as well as get comfortable in our boats. The
river has only one small feature, but more than enough to keep everyone
entertains in the small feature that is half way down the river.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting the Rotors Running</title>
        <link>https://jjhorton.co.uk/posts/getting-the-rotors-running/</link>
        <pubDate>Thu, 05 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/getting-the-rotors-running/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/Quadcopter_rotortest.jpg" alt="Featured image of post Getting the Rotors Running" /&gt;&lt;p&gt;After several weeks off nothing happening, then hitting problems with
the filtering i&amp;rsquo;ve finally found sometime to get some work done on my
project. This week I have been getting the rotors running, which is
surprisingly simple no that I know how it all works.&lt;/p&gt;
&lt;p&gt;With my project being based on an Arduino Nano processor I was able to
use the &lt;a class=&#34;link&#34; href=&#34;http://arduino.cc/en/Reference/Servo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Servo Library&lt;/a&gt;, although
this is mainly aimed at controlling servo&amp;rsquo;s it also works for ESC&amp;rsquo;s.
This allows me to comunicate to the servo&amp;rsquo;s using a simplified
interface, not having to worry about the interrupts, and timing cycles.
This does come at the cost of code size ad run speed, but if this
becomes a problem I can always go back and take another look at it.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/Quadcopter_rotortest.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/Quadcopter_rotortest.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The code I created uses 3 main functions, with another one for testing,
these functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; initRotor - This function initiales the servos, and sets an initial
value off zero.&lt;/li&gt;
&lt;li&gt;rotorSet - This function takes the 4 integer values representing the
rotor speeds and sets each off the rotors to them.&lt;/li&gt;
&lt;li&gt;rotorStop - This is used to stop the rotors, I may remove this
function but has been useful in testing when it all goes wrong.&lt;/li&gt;
&lt;li&gt;rotorTest - This has been mainly used for testing, running each
rotor up for a short period of time individually before starting the
next, again this will probably be removed from the final code .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is shown here, although its very simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//the code to control the rotor speeds
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; 	&lt;span class=&#34;cpf&#34;&gt;Servo.h;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Servo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rotor1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Servo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rotor2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Servo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rotor3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Servo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rotor4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initRotor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//attach the servos, to stop them from beeping
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;rotor1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//This will then set all the rotors to zero rotorSet(0, 0, 0, 0);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rotorSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//speed values must be given as 0-1000, to update power
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;rotor1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rotorStop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//this function stops al the rotors
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;rotor1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rotor4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writeMicroseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code is mainly driven by the writeMicroseconds operation off the
servo object, this allows for the updating off the servo pulse width,
which is normally defined as between 1000 and 2000 Micro Seconds,
representing the minimum and maximum output respectively from the ESC
that they will drive. The reason that the stop function uses the lower
value off 700, is to ensure that it falls outside the tolerances off the
ESC timing preventing any movement from the rotors.&lt;/p&gt;
&lt;p&gt;These 4 functions provide all the required functionality that my quad
rotor will need for this project. The big tasks that I hope to get done
in the next week include the filtering, and the PID control so I should
soon have this quad rotor off the ground.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Packed and ready to hit the road to Scotland</title>
        <link>https://jjhorton.co.uk/posts/packed-and-ready-to-hit-the-road-to-scotland/</link>
        <pubDate>Thu, 05 Apr 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/packed-and-ready-to-hit-the-road-to-scotland/</guid>
        <description>&lt;p&gt;Well the time has come for my first trip to scotland, and its been a
long time coming. Most people who take up kayaking tend to end up
kayaking as many places at home before the head overseas, but for me the
sunshine in the alps has ment I&amp;rsquo;ve never headed north beyond Yorkshire.&lt;/p&gt;
&lt;p&gt;So what to take to scotland? Well the big boats in, thats a given but
I&amp;rsquo;m also taking the Playboat, I don&amp;rsquo;t know why at the moment but I&amp;rsquo;m
sure that it&amp;rsquo;ll hit the water at some point over the 10 days. All thats
assuming there is any water, but based on what i&amp;rsquo;ve head there was only
snow up there the other day so the mountain bike is also having another
outing - which is amazing given it hadn&amp;rsquo;t let the house all year before
the start off this week.&lt;/p&gt;
&lt;p&gt;Along with all the normal rubbish I take on these trips means my car is
very full, but soon it will be on its 400 mile journey to this place
they call &amp;ldquo;scotland&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jjhorton.co.uk/wp-content/uploads/2012/04/carkayak.jpg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://jjhorton.co.uk/wp-content/uploads/2012/04/carkayak.jpg&#34; &gt;
		&lt;img src=&#34;http://jjhorton.co.uk/wp-content/uploads/2012/04/carkayak.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image0&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image0&lt;/figcaption&gt;
	
&lt;/figure&gt;{.aligncenter
.size-full .wp-image-131 width=&amp;ldquo;640px&amp;rdquo;
height=&amp;ldquo;480px&amp;rdquo;}&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Communication</title>
        <link>https://jjhorton.co.uk/posts/communication/</link>
        <pubDate>Fri, 17 Feb 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/communication/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/BluetoothPcb.png" alt="Featured image of post Communication" /&gt;&lt;p&gt;For the communication system, there are many choices available from the
traditional route of model building and control. The main issue with
these systems is that they are very expensive, so for my project I have
chosen to use a Bluetooth module.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/BluetoothPcb.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/BluetoothPcb.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The module that I have chosen is the Spark fun Bluetooth Mate Silver
from &lt;a class=&#34;link&#34; href=&#34;http://proto-pic.co.uk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;proto-pic.co.uk&lt;/a&gt;, this simply attaches to
the RX and TX lines on the arduino processor that I’m using, this makes
the communication very simple, helping to reduce the development time.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/BluetoothHelloWorld.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/BluetoothHelloWorld.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The Bluetooth module is mounted on the same main board as my processor,
and only required a few quick solder connections to start getting some
response on my computer. To start with a found that I wasn’t getting
anything that I expected out of the board, but looking though the
datasheets as well as a few useful posts on the
&lt;a class=&#34;link&#34; href=&#34;http://sparkfun.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sparkfun.com&lt;/a&gt; website, I found that the default
baud rate for the Bluetooth module was 115200 not 9600, I had been
trying to use. This quick fix meant that in no time at all I was able to
send data to my computer, and also with a little bit of code be able to
flash an LED.&lt;/p&gt;
&lt;p&gt;Now to stop turning on and off LED’s and turn this into a quad rotor.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Processing Power</title>
        <link>https://jjhorton.co.uk/posts/processing-power/</link>
        <pubDate>Fri, 17 Feb 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/processing-power/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/QuadcopterFrame.png" alt="Featured image of post Processing Power" /&gt;&lt;p&gt;To get everything talking together I’m going to need something to sit in
the middle, and provide all the processing power. On the recommendation
of my supervisor I had a look at the arduino boards. The arduino boards
are based on Atmel processors in the middle with a boot loader
per-installed to allow the uploading of programs straight onto the board
from USB.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/nano.jpg&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/nano.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Arduino Nano Board&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Arduino Nano Board&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;There are many variants of the processor available, all with more than
enough programming power for what I will be doing, the important thing
for me to consider was which input and output interfaces I’d need for my
quad rotor. The key one that I decided I’d need where,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serial&lt;/strong&gt; – to provide my communication link to the computer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I2C&lt;/strong&gt; – this would provide all the communications between my main
board and any sensors that would be required&lt;/li&gt;
&lt;li&gt;4 x &lt;strong&gt;PWM outputs&lt;/strong&gt; – these would be used to control each of the
motors that will be on board the Quad Rotor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After considering all these factors, the next thing to consider is ease
of integration and the size and weight limitations. I made the decision
to purchase an &lt;a class=&#34;link&#34; href=&#34;http://arduino.cc/en/Main/ArduinoBoardNano&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Arduino Nano
board&lt;/a&gt;, this provides all
the I/O pins that I require in a very small package. This board also has
the voltage regulators that I’ll require for my circuit, reducing the
component count on the main board.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Quad Rotor Project, Introduction</title>
        <link>https://jjhorton.co.uk/posts/quad-rotor-project-introduction/</link>
        <pubDate>Fri, 17 Feb 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/quad-rotor-project-introduction/</guid>
        <description>&lt;img src="https://jjhorton.co.uk/img/QuadcopterFrame.png" alt="Featured image of post Quad Rotor Project, Introduction" /&gt;&lt;p&gt;Well one day after looking though pictures of these magical 4 rotor
helicopter type things hovering, I was sold it was a good idea… that was
over a year ago, and now I’m building one for my 3^rd^ year project at
university. The quad rotor uses 4 rotors, 2 rotating one way and 2 going
the in the opposite direction. The forces can be shown on a simple wire
frame model&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/QuadcopterWireFrame.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/QuadcopterWireFrame.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For my project as an electronic engineer I am concentrating on the
electronic systems that control the quad rotor rather than the frame and
structure itself, as a result I have purchased a frame, which comes with
the motors and propellers. This leaves me to focus on building the
electronic system, and control software for my quad rotor, the frame was
purchased from uavshop.com.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://jjhorton.co.uk/img/QuadcopterFrame.png&#34; &gt;
		&lt;img src=&#34;https://jjhorton.co.uk/img/QuadcopterFrame.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;On my Blog I will post updates of how the project progresses, as I do
each stage of the project.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello world!</title>
        <link>https://jjhorton.co.uk/posts/hello-world/</link>
        <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
        
        <guid>https://jjhorton.co.uk/posts/hello-world/</guid>
        <description>&lt;p&gt;Well this is it, I finally gave up writing my own blog and just installed one.&lt;/p&gt;
&lt;p&gt;Now I just need to find some content to fill it with!&lt;/p&gt;
&lt;p&gt;Updated: This was for my old wordpress based website, since been &lt;a class=&#34;link&#34; href=&#34;https://jjhorton.co.uk/posts/new_website/&#34; &gt;upgraded&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
